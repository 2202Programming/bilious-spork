//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceTest.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RobotContainer", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class RobotContainer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> ControlObjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> SmartDashboardOutputField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> ControlObjects {
            get {
                return this.ControlObjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.ControlObjectsField, value) != true)) {
                    this.ControlObjectsField = value;
                    this.RaisePropertyChanged("ControlObjects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> SmartDashboardOutput {
            get {
                return this.SmartDashboardOutputField;
            }
            set {
                if ((object.ReferenceEquals(this.SmartDashboardOutputField, value) != true)) {
                    this.SmartDashboardOutputField = value;
                    this.RaisePropertyChanged("SmartDashboardOutput");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRobotService")]
    public interface IRobotService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/GetData", ReplyAction="http://tempuri.org/IRobotService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/GetData", ReplyAction="http://tempuri.org/IRobotService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/GetValue", ReplyAction="http://tempuri.org/IRobotService/GetValueResponse")]
        string GetValue(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/GetValue", ReplyAction="http://tempuri.org/IRobotService/GetValueResponse")]
        System.Threading.Tasks.Task<string> GetValueAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IRobotService/GetDataUsingDataContractResponse")]
        ServiceTest.ServiceReference1.CompositeType GetDataUsingDataContract(ServiceTest.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IRobotService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<ServiceTest.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(ServiceTest.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/GetRobotContainer", ReplyAction="http://tempuri.org/IRobotService/GetRobotContainerResponse")]
        ServiceTest.ServiceReference1.RobotContainer GetRobotContainer(ServiceTest.ServiceReference1.RobotContainer container);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/GetRobotContainer", ReplyAction="http://tempuri.org/IRobotService/GetRobotContainerResponse")]
        System.Threading.Tasks.Task<ServiceTest.ServiceReference1.RobotContainer> GetRobotContainerAsync(ServiceTest.ServiceReference1.RobotContainer container);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/UpDateRobotContainers", ReplyAction="http://tempuri.org/IRobotService/UpDateRobotContainersResponse")]
        void UpDateRobotContainers(ServiceTest.ServiceReference1.RobotContainer container);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/UpDateRobotContainers", ReplyAction="http://tempuri.org/IRobotService/UpDateRobotContainersResponse")]
        System.Threading.Tasks.Task UpDateRobotContainersAsync(ServiceTest.ServiceReference1.RobotContainer container);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRobotServiceChannel : ServiceTest.ServiceReference1.IRobotService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RobotServiceClient : System.ServiceModel.ClientBase<ServiceTest.ServiceReference1.IRobotService>, ServiceTest.ServiceReference1.IRobotService {
        
        public RobotServiceClient() {
        }
        
        public RobotServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RobotServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RobotServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RobotServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public string GetValue(string value) {
            return base.Channel.GetValue(value);
        }
        
        public System.Threading.Tasks.Task<string> GetValueAsync(string value) {
            return base.Channel.GetValueAsync(value);
        }
        
        public ServiceTest.ServiceReference1.CompositeType GetDataUsingDataContract(ServiceTest.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<ServiceTest.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(ServiceTest.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public ServiceTest.ServiceReference1.RobotContainer GetRobotContainer(ServiceTest.ServiceReference1.RobotContainer container) {
            return base.Channel.GetRobotContainer(container);
        }
        
        public System.Threading.Tasks.Task<ServiceTest.ServiceReference1.RobotContainer> GetRobotContainerAsync(ServiceTest.ServiceReference1.RobotContainer container) {
            return base.Channel.GetRobotContainerAsync(container);
        }
        
        public void UpDateRobotContainers(ServiceTest.ServiceReference1.RobotContainer container) {
            base.Channel.UpDateRobotContainers(container);
        }
        
        public System.Threading.Tasks.Task UpDateRobotContainersAsync(ServiceTest.ServiceReference1.RobotContainer container) {
            return base.Channel.UpDateRobotContainersAsync(container);
        }
    }
}
