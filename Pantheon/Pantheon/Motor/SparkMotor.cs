//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Pantheon
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using WPILib;


    public class SparkMotor : InteruptableMotor
	{
		private Spark FrontLeft
		{
			get;
			set;
		}

		private Spark FrontRight
		{
			get;
			set;
		}

		private Spark BackLeft
		{
			get;
			set;
		}

		private Spark BackRight
		{
			get;
			set;
		}

        /// <summary>
        /// 
        /// </summary>
        /// <param name="FL">Front Left Motor</param>
        /// <param name="FR"></param>
        /// <param name="BR"></param>
        /// <param name="BL"></param>
        public SparkMotor(int FL, int FR, int BR, int BL)
        {
            FrontLeft = new Spark(FL);
            BackLeft = new Spark(BL);
            BackRight = new Spark(BR);
            FrontRight = new Spark(FR);

            FrontLeft.Inverted = true;
            BackLeft.Inverted = true;

            mode = MotorMode.Stopped;
            Update();
        }

        public override void Set(double left, double right)
        {
            LeftSet = left;
            RightSet = right;
        }

        public override void Stop()
        {
            LeftSet = 0.0;
            RightSet = 0.0;
        }

        public override void AutoInit()
        {
            LeftSet = 0.0;
            RightSet = 0.0;

            LeftExterior = 0.0;
            RightExterior = 0.0;

            mode = MotorMode.Auto;
            Update();
        }

        public override void AutoPeriodic()
        {
            Update();
            Drive();
        }

        public override void DisabledInit()
        {
            mode = MotorMode.Stopped;
            Update();
        }

        public override void TeleopInit()
        {
            mode = MotorMode.UserControl;
            Update();
        }

        public override void TeleopPeriodic()
        {
            Update();
            Drive();
        }

        public void Drive()
        {
            BackLeft.Set(LeftSet);
            FrontLeft.Set(LeftSet);

            BackRight.Set(RightSet);
            FrontRight.Set(RightSet);

            SmartWriter.WriteNumber("Left Set", LeftSet, DebugMode.Full);
            SmartWriter.WriteNumber("Right Set", RightSet, DebugMode.Full);
        }
    }
}

