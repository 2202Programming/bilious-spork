<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WPILib.Extras</name>
  </assembly>
  <members>
    <member name="T:WPILib.Extras.ActionCommand">
      <summary>
            A <see cref="T:WPILib.Extras.ActionCommand" /> will run an <see cref="T:System.Action" /> when it is
            initialized and will finish immediately.
            </summary>
    </member>
    <member name="M:WPILib.Extras.ActionCommand.#ctor(System.Action)">
      <summary>
            Creates a new <see cref="T:WPILib.Extras.ActionCommand" /> which will start the given <see cref="T:System.Action" />
            when its <see cref="M:WPILib.Extras.ActionCommand.Initialize" /> is called.
            </summary>
      <param name="action">The <see cref="T:System.Action" /> to run.</param>
    </member>
    <member name="M:WPILib.Extras.ActionCommand.#ctor(System.Action,System.String)">
      <summary>
            Creates a new <see cref="T:WPILib.Extras.ActionCommand" /> with a specific name, 
            which will start the given <see cref="T:System.Action" /> when its <see cref="M:WPILib.Extras.ActionCommand.Initialize" /> is called.
            </summary>
      <param name="action">The <see cref="T:System.Action" /> to run.</param>
      <param name="name">The name for the command.</param>
    </member>
    <member name="M:WPILib.Extras.ActionCommand.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Extras.ActionCommand.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Extras.ActionCommand.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Extras.ActionCommand.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="M:WPILib.Extras.ActionCommand.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="T:WPILib.Extras.CallContext">
      <summary>
            The call context for the LabVIEW Robot Disabled and Teleop calls
            </summary>
    </member>
    <member name="F:WPILib.Extras.CallContext.Init">
      <summary>Called on the first time code enters the mode.</summary>
    </member>
    <member name="F:WPILib.Extras.CallContext.Execute">
      <summary>Called every time after the first time.</summary>
    </member>
    <member name="T:WPILib.Extras.LabViewRobot">
      <summary>
            The <see cref="T:WPILib.Extras.LabViewRobot" /> base class creates a robot which is structured similarly to
            a robot written in LabVIEW. 
            </summary>
    </member>
    <member name="M:WPILib.Extras.LabViewRobot.#ctor">
      <summary>
            Creates a new <see cref="T:WPILib.Extras.LabViewRobot" />.
            </summary>
    </member>
    <member name="M:WPILib.Extras.LabViewRobot.Autonomous">
      <summary>
            This method is called at the start of autonomous enabled and runs in a seperate thread.
            </summary>
    </member>
    <member name="M:WPILib.Extras.LabViewRobot.Begin">
      <summary>
            Robot-wide initialization code should go here.
            </summary>
    </member>
    <member name="M:WPILib.Extras.LabViewRobot.Disabled(WPILib.Extras.CallContext)">
      <summary>
            This method is called for every packet sent in Disabled. Use the callContext parameter
            to determine if initial call or execution calls.
            </summary>
      <param name="callContext">Init if first call, otherwise Execute</param>
    </member>
    <member name="M:WPILib.Extras.LabViewRobot.StartCompetition">
      <summary>
            This function is called by the initializer to start the main loop.
            </summary>
    </member>
    <member name="M:WPILib.Extras.LabViewRobot.Teleoperated(WPILib.Extras.CallContext)">
      <summary>
            This method is called for every packet sent in Teleoperated Enabled. Use the callContext parameter
            to determine if initial call or execution calls.
            </summary>
      <param name="callContext">Init if first call, otherwise Execute</param>
    </member>
    <member name="M:WPILib.Extras.LabViewRobot.Test">
      <summary>
            This method is called at the start of test mode and runs in a seperate thread. Note that
            this will run in both Test Disabled and Test Enabled. 
            </summary>
    </member>
    <member name="T:WPILib.Extras.XboxController">
      <summary>
            Handle input from Xbox 360 or Xbox One controllers connected to the Driver Station.
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.#ctor(System.Int32)">
      <summary>
            Initializes an instance of the <see cref="T:WPILib.Extras.XboxController" /> class
            </summary>
      <param name="port">The port the controller is in. [0..5]</param>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetA">
      <summary>
            Get A Button
            </summary>
      <returns>The A Button</returns>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetB">
      <summary>
            Get B Button
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetBack">
      <summary>
            Get Back Button
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetLeftBumper">
      <summary>
            Get Left Bumper
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetLeftStickButton">
      <summary>
            Get Left Stick Button 
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetLeftTrigger">
      <summary>
            Get Left Trigger
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetLeftXAxis">
      <summary>
            Get Left X Axis
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetLeftYAxis">
      <summary>
            Get Left Y Axis
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetRightBumper">
      <summary>
            Get Right Bumper
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetRightStickButton">
      <summary>
            Get Right Stick Button
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetRightTrigger">
      <summary>
            Get Right Trigger
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetRightXAxis">
      <summary>
            Get Right X Axis
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetRightYAxis">
      <summary>
            Get Right Y Axis
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetStart">
      <summary>
            Get Start Button
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetX">
      <summary>
            Get X Button
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetX(WPILib.Hand)">
      <summary>
            Get the X axis from one of the joysticks depending on the hand designated.
            </summary>
      <param name="hand">The side of the controller to use.</param>
      <returns>The value of the X axis from this hand.</returns>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetY">
      <summary>
            Get Y Button
            </summary>
    </member>
    <member name="M:WPILib.Extras.XboxController.GetY(WPILib.Hand)">
      <summary>
            Get the Y axis from one of the joysticks depending on the hand designated.
            </summary>
      <param name="hand">The side of the controller to use.</param>
      <returns>The value of the Y axis from this hand.</returns>
    </member>
    <member name="P:WPILib.Extras.XboxController.LeftRumble">
      <summary>
            Set Left Rumble
            </summary>
    </member>
    <member name="P:WPILib.Extras.XboxController.RightRumble">
      <summary>
            Set Right Rumble
            </summary>
    </member>
    <member name="T:WPILib.Extras.AttributedCommandModel.AttributedRobot">
      <summary>
            The AttributedRobot class.  Derive from this class to use the Attributed Command Model
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.#ctor">
      <summary>
            Constructs an <see cref="T:WPILib.Extras.AttributedCommandModel.AttributedRobot" /> that will automatically load <see cref="T:WPILib.Commands.Subsystem" />s and <see cref="T:WPILib.Commands.Command" />s.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.#ctor(System.Reflection.ReflectionContext)">
      <summary>
            Creates an <see cref="T:WPILib.Extras.AttributedCommandModel.AttributedRobot" /> with a <see cref="T:System.Reflection.ReflectionContext" /> object to find types through.
            </summary>
      <param name="reflectionContext">The context to find types through.</param>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.AutonomousInit">
      <summary>
            Override this method to add additional code that executes after <see cref="M:WPILib.Extras.AttributedCommandModel.AttributedRobot._AutonomousInit" />.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.AutonomousPeriodic">
      <summary>
            Override this method to add additional code that executes after <see cref="M:WPILib.Extras.AttributedCommandModel.AttributedRobot._AutonomousPeriodic" />.
            </summary>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.AttributedRobot.Buttons">
      <summary>
            The Button objects created when the robot was initialized.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.DisabledInit">
      <summary>
            Override this method to add additional code that executes after <see cref="M:WPILib.Extras.AttributedCommandModel.AttributedRobot._DisabledInit" />.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.DisabledPeriodic">
      <summary>
            Override this method to add additional code that executes after <see cref="M:WPILib.Extras.AttributedCommandModel.AttributedRobot._DisabledPeriodic" />.
            </summary>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.AttributedRobot.PhaseCommands">
      <summary>
            Commands sorted by the phase that they will start.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.RobotInit">
      <summary>
            Override this method to add additional code that executes after <see cref="M:WPILib.Extras.AttributedCommandModel.AttributedRobot._RobotInit" />.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.StartCompetition">
      <summary>
            Provide an alternate "main loop" via startCompetition().
            </summary>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.AttributedRobot.Subsystems">
      <summary>
            The subsystems created when the robot object was initialized.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.TeleopInit">
      <summary>
            Override this method to add additional code that executes after <see cref="M:WPILib.Extras.AttributedCommandModel.AttributedRobot._TeleopInit" />.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.TeleopPeriodic">
      <summary>
            Override this method to add additional code that executes after <see cref="M:WPILib.Extras.AttributedCommandModel.AttributedRobot._TeleopPeriodic" />.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.TestInit">
      <summary>
            Override this method to add additional code that executes after <see cref="M:WPILib.Extras.AttributedCommandModel.AttributedRobot._TestInit" />.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.AttributedRobot.TestPeriodic">
      <summary>
            Override this method to add additional code that executes after <see cref="M:WPILib.Extras.AttributedCommandModel.AttributedRobot._TestPeriodic" />.
            </summary>
    </member>
    <member name="T:WPILib.Extras.AttributedCommandModel.ButtonMethod">
      <summary>
            An enumeration that represents different methods on the <see cref="T:WPILib.Buttons.Button" /> class.
            </summary>
    </member>
    <member name="F:WPILib.Extras.AttributedCommandModel.ButtonMethod.WhenPressed">
      <summary>
            Starts when the button is pressed.
            </summary>
    </member>
    <member name="F:WPILib.Extras.AttributedCommandModel.ButtonMethod.WhenReleased">
      <summary>
            Starts when the button is released.
            </summary>
    </member>
    <member name="F:WPILib.Extras.AttributedCommandModel.ButtonMethod.WhileHeld">
      <summary>
            Runs while the button is held.
            </summary>
    </member>
    <member name="F:WPILib.Extras.AttributedCommandModel.ButtonMethod.ToggleWhenPressed">
      <summary>
            Toggles the command on or off when pressed.
            </summary>
    </member>
    <member name="F:WPILib.Extras.AttributedCommandModel.ButtonMethod.CancelWhenPressed">
      <summary>
            Cancels the command when pressed.
            </summary>
    </member>
    <member name="T:WPILib.Extras.AttributedCommandModel.ExportSubsystemAttribute">
      <summary>
            Apply this attribute to subsystems to have <see cref="T:WPILib.Extras.AttributedCommandModel.AttributedRobot" /> auto-load it.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.ExportSubsystemAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Extras.AttributedCommandModel.ExportSubsystemAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.ExportSubsystemAttribute.DefaultCommandType">
      <summary>
            The type of the default command.  The command must have a constructor that takes one <see cref="T:WPILib.Commands.Subsystem" /> object.
            </summary>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.ExportSubsystemAttribute.Name">
      <summary>
            The name of the subsystem object.  This is used to disambiguate different subsystem objects of the same type for the <see cref="T:WPILib.Extras.AttributedCommandModel.RunCommandAttribute" /> command autoloading.
            </summary>
    </member>
    <member name="T:WPILib.Extras.AttributedCommandModel.ImportSubsystemAttribute">
      <summary>
            Apply this attribute to a subsystem parameter in a <see cref="T:WPILib.Commands.Command" /> constructor to disambiguate between multiple-exported subsystems of the same type for the <see cref="T:WPILib.Extras.AttributedCommandModel.AttributedRobot" /> auto-loading.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.ImportSubsystemAttribute.#ctor(System.String)">
      <summary>
            Apply this attribute to a subsystem parameter in a <see cref="T:WPILib.Commands.Command" /> constructor to disambiguate between multiple-exported subsystems of the same type for the <see cref="T:WPILib.Extras.AttributedCommandModel.AttributedRobot" /> auto-loading.
            </summary>
      <param name="name">The name of the subsystem as specified in its <see cref="P:WPILib.Extras.AttributedCommandModel.ExportSubsystemAttribute.Name" /> value.</param>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.ImportSubsystemAttribute.Name">
      <summary>
            Gets the name of the subsystem.
            </summary>
    </member>
    <member name="T:WPILib.Extras.AttributedCommandModel.MatchPhase">
      <summary>
            The different phases of a match.
            </summary>
    </member>
    <member name="F:WPILib.Extras.AttributedCommandModel.MatchPhase.Autonomous">
      <summary>
            Starts in Autonomous.
            </summary>
    </member>
    <member name="F:WPILib.Extras.AttributedCommandModel.MatchPhase.Teleoperated">
      <summary>
            Starts in Teleoperated.
            </summary>
    </member>
    <member name="F:WPILib.Extras.AttributedCommandModel.MatchPhase.Disabled">
      <summary>
            Starts in Disabled.
            </summary>
    </member>
    <member name="F:WPILib.Extras.AttributedCommandModel.MatchPhase.Test">
      <summary>
            Starts in Test.
            </summary>
    </member>
    <member name="T:WPILib.Extras.AttributedCommandModel.RunCommandAtPhaseStartAttribute">
      <summary>
            Apply this attribute to a command to have it started when the respective match phase starts.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.RunCommandAtPhaseStartAttribute.#ctor(WPILib.Extras.AttributedCommandModel.MatchPhase)">
      <summary>
            Apply this attribute to a command to have it started when the respective match phase starts.
            </summary>
      <param name="phase">The match phase to start the command.</param>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.RunCommandAtPhaseStartAttribute.Phase">
      <summary>
            Gets the <see cref="T:WPILib.Extras.AttributedCommandModel.MatchPhase" /> to start the command.
            </summary>
    </member>
    <member name="T:WPILib.Extras.AttributedCommandModel.RunCommandAttribute">
      <summary>
            Apply subclasses of this attribute to commands to tie them to triggering conditions.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.RunCommandAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Extras.AttributedCommandModel.RunCommandAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.Extras.AttributedCommandModel.RunCommandOnJoystickAttribute">
      <summary>
            Run a command on a <see cref="T:WPILib.Buttons.JoystickButton" /> event.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.RunCommandOnJoystickAttribute.#ctor(System.Int32,System.Int32,WPILib.Extras.AttributedCommandModel.ButtonMethod)">
      <summary>
            Creates a new <see cref="T:WPILib.Extras.AttributedCommandModel.RunCommandOnJoystickAttribute" />.
            </summary>
      <param name="controllerId">The controller to run the command on.</param>
      <param name="buttonId">The button to run the command on.</param>
      <param name="buttonMethod">The <see cref="P:WPILib.Extras.AttributedCommandModel.RunCommandOnJoystickAttribute.ButtonMethod" /> to run the command on.</param>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.RunCommandOnJoystickAttribute.ButtonId">
      <summary>
            Gets the Id of the button to run the command on.
            </summary>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.RunCommandOnJoystickAttribute.ButtonMethod">
      <summary>
            Gets the <see cref="P:WPILib.Extras.AttributedCommandModel.RunCommandOnJoystickAttribute.ButtonMethod" /> to run the command on.
            </summary>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.RunCommandOnJoystickAttribute.ControllerId">
      <summary>
            Gets the Id of the controller to run the command on.
            </summary>
    </member>
    <member name="T:WPILib.Extras.AttributedCommandModel.RunCommandOnNetworkKeyAttribute">
      <summary>
            Run a command on a <see cref="T:WPILib.Buttons.NetworkButton" /> event.
            </summary>
    </member>
    <member name="M:WPILib.Extras.AttributedCommandModel.RunCommandOnNetworkKeyAttribute.#ctor(System.String,System.String,WPILib.Extras.AttributedCommandModel.ButtonMethod)">
      <summary>
            Creates a new <see cref="T:WPILib.Extras.AttributedCommandModel.RunCommandOnNetworkKeyAttribute" />.
            </summary>
      <param name="tableName">The network table to run on.</param>
      <param name="key">The network table key to run the command on.</param>
      <param name="method">The <see cref="P:WPILib.Extras.AttributedCommandModel.RunCommandOnNetworkKeyAttribute.ButtonMethod" /> to run the command on.</param>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.RunCommandOnNetworkKeyAttribute.ButtonMethod">
      <summary>
            Gets the <see cref="P:WPILib.Extras.AttributedCommandModel.RunCommandOnNetworkKeyAttribute.ButtonMethod" /> the command runs on.
            </summary>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.RunCommandOnNetworkKeyAttribute.Key">
      <summary>
            Gets the network tables key the command runs on.
            </summary>
    </member>
    <member name="P:WPILib.Extras.AttributedCommandModel.RunCommandOnNetworkKeyAttribute.TableName">
      <summary>
            Gets the table name the command runs on. 
            </summary>
    </member>
    <member name="T:WPILib.Extras.NavX.AHRS">
      <summary>
             The AHRS class provides access to a KauaiLabs NavX Robotics Navigation Sensor.
             </summary>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.#ctor(WPILib.I2C.Port,System.Byte)">
      <summary>
            Constructs the AHRS class using I2C Communication
            </summary>
      <param name="i2CPortId">The <see cref="T:WPILib.I2C.Port">I2C Port</see> to use.</param>
      <param name="updateRateHz">The Update Rate (Hz) [4..60] (Default 50)</param>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.#ctor(WPILib.SerialPort.Port,WPILib.Extras.NavX.AHRS.SerialDataType,System.Byte)">
      <summary>
            Constructs the AHRS class using serial communication.
            </summary>
      <param name="serialPortId">The <see cref="T:WPILib.SerialPort.Port">Serial Port</see> to use.</param>
      <param name="dataType">Either <see cref="F:WPILib.Extras.NavX.AHRS.SerialDataType.KProcessedData" /> (Default) or <see cref="F:WPILib.Extras.NavX.AHRS.SerialDataType.KRawData" />.</param>
      <param name="updateRateHz">The Update Rate (Hz) [4..60] (Default 50)</param>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.#ctor(WPILib.SPI.Port,System.Byte)">
      <summary>
            Constructs the AHRS class using SPI Communication
            </summary>
      <param name="spiPortId">The <see cref="T:WPILib.SPI.Port">SPI Port</see> to use.</param>
      <param name="updateRateHz">The Update Rate (Hz) [4..60] (Default 50)</param>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.#ctor(WPILib.SPI.Port,System.Int32,System.Byte)">
      <summary>
            Constructs the AHRS class using SPI Communication, overriding the SPI bitrate.
            </summary>
      <param name="spiPortId">The <see cref="T:WPILib.SPI.Port">SPI Port</see> to use.</param>
      <param name="spiBitrate">The SPI bitrate to use (bits/seconds) (Maximum: 2,000,000)</param>
      <param name="updateRateHz">The Update Rate (Hz) [4..60] (Default 50)</param>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.Calibrate">
      <summary>
            Not needed on the NavX. Calibration is Automatic.
            </summary>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetAltitude">
      <summary>
            Returns the current altitude.
            </summary>
      <returns>Current altitude in meters (if valid).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetAngle">
      <summary>
            Returns the total accumulated yaw angle (Z Axis, in degrees) reported by
            the sensor.
            </summary>
      <returns>The total accumulated yaw angle (Z axis) of the robot in degrees.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetBarometricPressure">
      <summary>
            Returns the current barometric pressure.
            </summary>
      <returns>Current barometric pressure in millibar (NavX aero only).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetBoardYawAxis">
      <summary>
            Returns information regarding which sensor board axis (X, Y or Z) and direction
            (up/down) is currently configured to report angle values.
            </summary>
      <returns>The currently-configured board yaw axis/direction.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetByteCount">
      <summary>
            Returns the count in bytes of data recieved from the sensor.
            </summary>
      <returns>The number of bytes received from the sensor.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetCompassHeading">
      <summary>
            Returns the current tilt-compensated compass heading value (in degrees,
            from 0 to 360) reported by the sensor.
            </summary>
      <returns>The current tilt-compensated compass heading, in degrees (0-360).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetDisplacementX">
      <summary>
            Returns the last displacement of the X axis since <see cref="M:WPILib.Extras.NavX.AHRS.ResetDisplacement" /> was last 
            invoked [Experimental].
            </summary>
      <returns>The Current X axis displacement since last reset (meters).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetDisplacementY">
      <summary>
            Returns the last displacement of the Y axis since <see cref="M:WPILib.Extras.NavX.AHRS.ResetDisplacement" /> was last 
            invoked [Experimental].
            </summary>
      <returns>The Current Y axis displacement since last reset (meters).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetDisplacementZ">
      <summary>
            Returns the last displacement of the Z axis since <see cref="M:WPILib.Extras.NavX.AHRS.ResetDisplacement" /> was last 
            invoked [Experimental].
            </summary>
      <returns>The Current Z axis displacement since last reset (meters).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetFirmwareVersion">
      <summary>
            Returns the version number of the firmware currently executing on the sensor.
            </summary>
      <returns>The firmware version in the format [MajorVersion].[MinorVersion]</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetFusedHeading">
      <summary>
            Returns the "fused" (9-axis) heading.
            </summary>
      <returns>Fused Heading in Degrees (range 0-360).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetPitch">
      <summary>
            Returns the current pitch value (in degrees, from -180 to 180) reported by the sensor.
            </summary>
      <returns>The current pitch value in degrees (-180 to 180).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetPressure">
      <summary>
            Returns the current barometric pressure [NavX Aero only].
            </summary>
      <returns>The current barometric pressure (millibar).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetQuaternionW">
      <summary>
            Returns the imaginary porton (W) of the Orientation Quanterion.
            </summary>
      <returns>The imaginary portion (W) of the quanterion.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetQuaternionX">
      <summary>
            Returns the real portion (X axis) of the Orientation Quanterion.
            </summary>
      <returns>The real portion (X) of the quanterion.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetQuaternionY">
      <summary>
            Returns the real portion (Y axis) of the Orientation Quanterion.
            </summary>
      <returns>The real portion (Y) of the quanterion.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetQuaternionZ">
      <summary>
            Returns the real portion (Z axis) of the Orientation Quanterion.
            </summary>
      <returns>The real portion (Z) of the quanterion.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetRate">
      <summary>
            Return the rate of rotation of the yaw (Z-axis) gyro.
            </summary>
      <returns>The current rate of change in yaw angle (degrees/second).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetRawAccelX">
      <summary>
            Returns the current raw (unprocessed) X-Axis acceleration rate (In G).
            </summary>
      <returns>The current X acceleration rate (in G)</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetRawAccelY">
      <summary>
            Returns the current raw (unprocessed) Y-Axis acceleration rate (In G).
            </summary>
      <returns>The current Y acceleration rate (in G)</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetRawAccelZ">
      <summary>
            Returns the current raw (unprocessed) Z-Axis acceleration rate (In G).
            </summary>
      <returns>The current Z acceleration rate (in G)</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetRawGyroX">
      <summary>
            Returns the current raw (unprocessed) X-axis gyro rotation rate.
            </summary>
      <returns>The current X rotation rate (degrees/sec).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetRawGyroY">
      <summary>
            Returns the current raw (unprocessed) Y-axis gyro rotation rate.
            </summary>
      <returns>The current Y rotation rate (degrees/sec).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetRawGyroZ">
      <summary>
            Returns the current raw (unprocessed) Z-axis gyro rotation rate.
            </summary>
      <returns>The current Z rotation rate (degrees/sec).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetRawMagX">
      <summary>
            Returns the current raw (unprocessed) X-axis magnetometer reading.
            </summary>
      <returns>Returns the X mag field strenth (in uTesla).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetRawMagY">
      <summary>
            Returns the current raw (unprocessed) Y-axis magnetometer reading.
            </summary>
      <returns>Returns the Y mag field strenth (in uTesla).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetRawMagZ">
      <summary>
            Returns the current raw (unprocessed) Z-axis magnetometer reading.
            </summary>
      <returns>Returns the Z mag field strenth (in uTesla).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetRoll">
      <summary>
            Returns the current roll value (in degrees, from -180 to 180) reported by the sensor.
            </summary>
      <returns>The current Roll value in degrees (-180 to 180).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetTable"></member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetTempC">
      <summary>
            Returns the current reported temperature.
            </summary>
      <returns>The current temperature (degrees centigrade).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetUpdateCount">
      <summary>
            Returns teh count of valid updates which have been received 
            from the sensor.
            </summary>
      <returns>The number of valid updates received from the sensor.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetVelocityX">
      <summary>
            Returns the velocity of the X axis [Experimental].
            </summary>
      <returns>The Current X axis velocity in meters/sec</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetVelocityY">
      <summary>
            Returns the velocity of the Y axis [Experimental].
            </summary>
      <returns>The Current Y axis velocity in meters/sec</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetVelocityZ">
      <summary>
            Returns the velocity of the Z axis [Experimental].
            </summary>
      <returns>The Current Z axis velocity in meters/sec</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetWorldLinearAccelX">
      <summary>
            Returns the current linear acceleration in the X-axis (in G).
            </summary>
      <returns>Current world linear acceleration in the X-axis (in G).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetWorldLinearAccelY">
      <summary>
            Returns the current linear acceleration in the Y-axis (in G).
            </summary>
      <returns>Current world linear acceleration in the Y-axis (in G).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetWorldLinearAccelZ">
      <summary>
            Returns the current linear acceleration in the Z-axis (in G).
            </summary>
      <returns>Current world linear acceleration in the Z-axis (in G).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.GetYaw">
      <summary>
            Returns the current yaw value (in degrees, from -180 to 180) reported by the sensor.
            </summary>
      <returns>The current yaw value in degrees (-180 to 180).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.IsAltitudeValid">
      <summary>
            Indicates whether the current altitude (and barometric pressure) data is valid.
            </summary>
      <returns>True if a working pressure seonsor is installed.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.IsCalibrating">
      <summary>
            Returns true if the sensor is currently performing automatic
            gyro/accelerometer calibration.
            </summary>
      <returns>True if the sensor is currently automatically calibrating the gyro
            and accelerometer sensors.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.IsConnected">
      <summary>
            Indicates whether the sensor is currently connected to the host system.
            </summary>
      <returns>True if a valid update has been recently received from the sensor.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.IsMagneticDisturbance">
      <summary>
            Indicates whether the current magnetic field strength diverges from the calibrated
            value for the earth's magnetic field by more than the currently-
            configured Magnetic Disturbance Ratio.
            </summary>
      <returns>True if a magnetic disturbance is detected (or the magnetometer is uncalibrated).</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.IsMagnetometerCalibrated">
      <summary>
            Indicates whether the magnetometer has been calibrated.
            </summary>
      <returns>True if the magnetometer calibration has been performed.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.IsMoving">
      <summary>
            Indicates if the sensor is currently detecting motion.
            </summary>
      <returns>True if the sensor is currently detecting motion.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.IsRotating">
      <summary>
            Indicates if the sensor is currently detecting yaw rotation.
            </summary>
      <returns>True if the sensor is currently detecting motion.</returns>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.PidGet">
      <summary>
            Returns the current value to use for PID, based on <see cref="P:WPILib.Extras.NavX.AHRS.PIDSourceType" />.
            </summary>
      <returns>The current yaw angle or rate.</returns>
    </member>
    <member name="P:WPILib.Extras.NavX.AHRS.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.Reset">
      <summary>
            Reset the Yaw gyro.
            </summary>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.ResetDisplacement">
      <summary>
            Zeros the displacement integration variables.
            </summary>
    </member>
    <member name="P:WPILib.Extras.NavX.AHRS.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.Extras.NavX.AHRS.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.ZeroYaw">
      <summary>
            Sets the user-specified yaw offset to the current
            yaw value reported by the sensor.
            </summary>
    </member>
    <member name="T:WPILib.Extras.NavX.AHRS.BoardAxis">
      <summary>
            Identifies one of the three sensing axes on the NavX sensor board.
            </summary>
    </member>
    <member name="F:WPILib.Extras.NavX.AHRS.BoardAxis.KBoardAxisX">
      <summary>
            Board X axis.
            </summary>
    </member>
    <member name="F:WPILib.Extras.NavX.AHRS.BoardAxis.KBoardAxisY">
      <summary>
            Board Y axis.
            </summary>
    </member>
    <member name="F:WPILib.Extras.NavX.AHRS.BoardAxis.KBoardAxisZ">
      <summary>
            Board Z axis.
            </summary>
    </member>
    <member name="T:WPILib.Extras.NavX.AHRS.BoardYawAxis">
      <summary>
            Indicates which sensor board axis is used as the "yaw" (gravity) axis.
            </summary>
    </member>
    <member name="M:WPILib.Extras.NavX.AHRS.BoardYawAxis.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Extras.NavX.AHRS.BoardYawAxis</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.Extras.NavX.AHRS.BoardYawAxis.BoardAxis">
      <summary>
            The <see cref="F:WPILib.Extras.NavX.AHRS.BoardYawAxis.BoardAxis" />/
            </summary>
    </member>
    <member name="F:WPILib.Extras.NavX.AHRS.BoardYawAxis.Up">
      <summary>
            True if axis is up, otherwise down.
            </summary>
    </member>
    <member name="T:WPILib.Extras.NavX.AHRS.SerialDataType">
      <summary>
            The <see cref="T:WPILib.Extras.NavX.AHRS.SerialDataType" /> enum specifies the type of data to be streamed from the sensor.
            </summary>
    </member>
    <member name="F:WPILib.Extras.NavX.AHRS.SerialDataType.KProcessedData">
      <summary>
            (Default): 6 and 9 axis processed data.
            </summary>
    </member>
    <member name="F:WPILib.Extras.NavX.AHRS.SerialDataType.KRawData">
      <summary>
            Unprocessed data from each individual sensor.
            </summary>
    </member>
  </members>
</doc>