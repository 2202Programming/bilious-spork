<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WPILib</name>
  </assembly>
  <members>
    <member name="T:WPILib.ADXL345">
      <summary>
            Base class for the ADXL345 Accelerometer
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.ADXL345</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.ADXL345.AccelerometerRange">
      <summary>
            Common interface for setting the measuring range of an accelerometer
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.DataFormatRegister">
      <summary>
            The Data Format Register
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.DataRegister">
      <summary>
            The Data Register
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.GetAcceleration(WPILib.ADXL345.Axes)">
      <summary>
            Get the acceleration of one axis in Gs.
            </summary>
      <param name="axis">The axis to read from.</param>
      <returns>Acceleration of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345.GetAccelerations">
      <summary>
            Get the acceleration of all axes in Gs.
            </summary>
      <returns>An object containing the acceleration measured on each side of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345.GetAllAxes">
      <summary>
            Common interface for getting all acceleration axes
            </summary>
      <returns>A struct containing all axes</returns>
    </member>
    <member name="M:WPILib.ADXL345.GetX">
      <summary>
            Common interface for getting the x axis acceleration
            </summary>
      <returns>The acceleration along the x axis in g-forces</returns>
    </member>
    <member name="M:WPILib.ADXL345.GetY">
      <summary>
            Common interface for getting the y axis acceleration
            </summary>
      <returns>The acceleration along the y axis in g-forces</returns>
    </member>
    <member name="M:WPILib.ADXL345.GetZ">
      <summary>
            Common interface for getting the z axis acceleration
            </summary>
      <returns>The acceleration along the z axis in g-forces</returns>
    </member>
    <member name="F:WPILib.ADXL345.GsPerLSB">
      <summary>
            The G's per LSB
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="F:WPILib.ADXL345.PowerCtlRegister">
      <summary>
            The Power Control Register
            </summary>
    </member>
    <member name="P:WPILib.ADXL345.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.ADXL345.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.WriteRange(System.Byte)">
      <summary>
            Writes the range to the specified interface.
            </summary>
      <param name="value">The Range to write.</param>
    </member>
    <member name="T:WPILib.ADXL345_I2C">
      <summary>
            ADXL345 Accelerometer interfaced over I2C.
            </summary>
    </member>
    <member name="M:WPILib.ADXL345_I2C.#ctor(WPILib.I2C.Port,WPILib.Interfaces.AccelerometerRange)">
      <summary>
            Creates a new ADXL345_I2C Accelerometer using the default address of 0x1D.
            </summary>
      <param name="port">The I2C port the accelerometer is attached to</param>
      <param name="range">The range (+ or -) that the accelerometer will measure.</param>
    </member>
    <member name="M:WPILib.ADXL345_I2C.#ctor(WPILib.I2C.Port,WPILib.Interfaces.AccelerometerRange,System.Boolean)">
      <summary>
            Creates a new ADXL345_I2C Accelerometer, specifing the address.
            </summary>
      <param name="port">The I2C port the accelerometer is attached to</param>
      <param name="range">The range (+ or -) that the accelerometer will measure.</param>
      <param name="useAlternateAddress">True to use address 0x53, which is used by the sparkfun board.
            False to use address 0x1D, which is used by the KOP board.</param>
    </member>
    <member name="M:WPILib.ADXL345_I2C.GetAcceleration(WPILib.ADXL345.Axes)">
      <summary>
            Get the acceleration of one axis in Gs.
            </summary>
      <param name="axis">The axis to read from.</param>
      <returns>Acceleration of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345_I2C.GetAccelerations">
      <summary>
            Get the acceleration of all axes in Gs.
            </summary>
      <returns>An object containing the acceleration measured on each side of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345_I2C.WriteRange(System.Byte)">
      <summary>
            Writes the range to the specified interface.
            </summary>
      <param name="value">The Range to write.</param>
    </member>
    <member name="T:WPILib.ADXL345_SPI">
      <summary>
            ADXL345 Accelerometer interfaced over I2C.
            </summary>
    </member>
    <member name="M:WPILib.ADXL345_SPI.#ctor(WPILib.SPI.Port,WPILib.Interfaces.AccelerometerRange)">
      <summary>
            Constructor
            </summary>
      <param name="port">The SPI port the accelerometer is attached to</param>
      <param name="range">The range (+ or -) that the accelerometer will measure.</param>
    </member>
    <member name="M:WPILib.ADXL345_SPI.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.ADXL345_SPI.GetAcceleration(WPILib.ADXL345.Axes)">
      <summary>
            Get the acceleration of one axis in Gs.
            </summary>
      <param name="axis">The axis to read from.</param>
      <returns>Acceleration of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345_SPI.GetAccelerations">
      <summary>
            Get the acceleration of all axes in Gs.
            </summary>
      <returns>An object containing the acceleration measured on each side of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345_SPI.WriteRange(System.Byte)">
      <summary>
            Writes the range to the specified interface.
            </summary>
      <param name="value">The Range to write.</param>
    </member>
    <member name="T:WPILib.ADXL345.Axes">
      <summary>
            Axes Index's for ADXL345
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.Axes.X">
      <summary>
            The X Axis
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.Axes.Y">
      <summary>
            The Y Axis
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.Axes.Z">
      <summary>
            The Z Axis
            </summary>
    </member>
    <member name="T:WPILib.ADXL345.DataFormat">
      <summary>
            Data Format Settings for ADXL345
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.DataFormat.SelfTest">
      <summary>
            Self Test Mode
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.DataFormat.SPI">
      <summary>
            SPI Mode
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.DataFormat.IntInvert">
      <summary>
            Invert Mode
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.DataFormat.FullRes">
      <summary>
            The Full Resolution
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.DataFormat.Justify">
      <summary>
            Justify
            </summary>
    </member>
    <member name="T:WPILib.ADXL345.PowerCtl">
      <summary>
            Power Control Settings for ADXL345
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.PowerCtl.Link">
      <summary>
            Link Mode
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.PowerCtl.AutoSleep">
      <summary>
            Auto Sleep Mode
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.PowerCtl.Measure">
      <summary>
            Measure Mode
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.PowerCtl.Sleep">
      <summary>
            Sleep Mode
            </summary>
    </member>
    <member name="T:WPILib.ADXL362">
      <summary>
            ADXL362 SPI Accelerometer
            </summary>
    </member>
    <member name="M:WPILib.ADXL362.#ctor(WPILib.SPI.Port,WPILib.Interfaces.AccelerometerRange)">
      <summary>
            Creates a new <see cref="T:WPILib.ADXL362" /> with the specified <see cref="T:WPILib.SPI.Port">Port</see> 
            and <see cref="P:WPILib.ADXL362.AccelerometerRange">Range</see>.
            </summary>
      <param name="port">The SPI Port the accelerometer is connected to.</param>
      <param name="range">The range that the accelerometer will measure.</param>
    </member>
    <member name="P:WPILib.ADXL362.AccelerometerRange">
      <summary>
            Common interface for setting the measuring range of an accelerometer
            </summary>
    </member>
    <member name="M:WPILib.ADXL362.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.ADXL362.GetAcceleration(WPILib.ADXL362.Axes)">
      <summary>
            Get the acceleration of one axis in Gs.
            </summary>
      <param name="axis">The axis to read from</param>
      <returns>Acceleration of the ADXL362 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL362.GetAccelerations">
      <summary>
            Get the acceleration of all axes in Gs.
            </summary>
      <returns>A structure containing all axes measured in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL362.GetAllAxes">
      <summary>
            Common interface for getting all acceleration axes
            </summary>
      <returns>A struct containing all axes</returns>
    </member>
    <member name="M:WPILib.ADXL362.GetX">
      <summary>
            Common interface for getting the x axis acceleration
            </summary>
      <returns>The acceleration along the x axis in g-forces</returns>
    </member>
    <member name="M:WPILib.ADXL362.GetY">
      <summary>
            Common interface for getting the y axis acceleration
            </summary>
      <returns>The acceleration along the y axis in g-forces</returns>
    </member>
    <member name="M:WPILib.ADXL362.GetZ">
      <summary>
            Common interface for getting the z axis acceleration
            </summary>
      <returns>The acceleration along the z axis in g-forces</returns>
    </member>
    <member name="M:WPILib.ADXL362.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.ADXL362.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.ADXL362.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.ADXL362.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.ADXL362.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.ADXL362.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.ADXL362.Axes">
      <summary>
            The Axes for ADXL362 Gyros
            </summary>
    </member>
    <member name="F:WPILib.ADXL362.Axes.X">
      <summary>
            The X Axis
            </summary>
    </member>
    <member name="F:WPILib.ADXL362.Axes.Y">
      <summary>
            The Y Axis
            </summary>
    </member>
    <member name="F:WPILib.ADXL362.Axes.Z">
      <summary>
            The Z Axis
            </summary>
    </member>
    <member name="T:WPILib.ADXRS450_Gyro">
      <summary>
            This class is for the digital ADXRS450 gyro sensor that connects via SPI
            </summary>
    </member>
    <member name="M:WPILib.ADXRS450_Gyro.#ctor">
      <summary>
            Constructor. Uses the onboard CS0
            </summary>
    </member>
    <member name="M:WPILib.ADXRS450_Gyro.#ctor(WPILib.SPI.Port)">
      <summary>
            Constructor
            </summary>
      <param name="port">The <see cref="T:WPILib.SPI.Port" /> that the gyro is connected to.</param>
    </member>
    <member name="M:WPILib.ADXRS450_Gyro.Calibrate">
      <summary>
            Initialize the gyro.
            </summary>
    </member>
    <member name="M:WPILib.ADXRS450_Gyro.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.ADXRS450_Gyro.GetAngle">
      <summary>
            Return the actual angle in degrees that the robot is currently facing.
            </summary>
      <returns>The current heading of the robot in degrees. This heading is
            based on integration of the returned rate of the gyro.</returns>
    </member>
    <member name="M:WPILib.ADXRS450_Gyro.GetRate">
      <summary>
            Returns the rate of rotation of the gyro.
            </summary>
      <returns>The current rate in degrees per second.</returns>
    </member>
    <member name="M:WPILib.ADXRS450_Gyro.Reset">
      <summary>
            Reset the gyro.
            </summary>
    </member>
    <member name="T:WPILib.AnalogAccelerometer">
      <summary>
            Handle operation of an analog accelerometer
            </summary>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.#ctor(System.Int32)">
      <summary>
            Create a new instance of an accelerometer, declaring a new analog channel.
            </summary>
      <param name="channel">The channel the accelerometer is connected to. [0..3] on RIO, [4..7] on MXP</param>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.#ctor(WPILib.AnalogInput)">
      <summary>
            Creates a new instance of the Accelerometer from an existing <see cref="T:WPILib.AnalogInput" /></summary>
      <param name="channel">The existing <see cref="T:WPILib.AnalogInput" /> the accelerometer is connected to.</param>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.Dispose">
      <summary>
            Delete the analog components used for the accelerometer.
            </summary>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.GetAcceleration">
      <summary>
            Returns the acceleration in Gs.
            </summary>
      <returns>The acceleration in Gs.</returns>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.PidGet">
      <summary>
            Get the result to use in PIDController
            </summary>
      <returns>The result to use in PIDController</returns>
    </member>
    <member name="P:WPILib.AnalogAccelerometer.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="P:WPILib.AnalogAccelerometer.Sensitivity">
      <summary>
            Sets the accelerometer sensitivity.
            </summary>
    </member>
    <member name="P:WPILib.AnalogAccelerometer.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.AnalogAccelerometer.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="P:WPILib.AnalogAccelerometer.Zero">
      <summary>
            Sets the voltage that corresponds to 0G.
            </summary>
    </member>
    <member name="T:WPILib.AnalogGyro">
      <summary>
            Class for interfacing with an analog gyro to get robot heading.
            </summary>
    </member>
    <member name="M:WPILib.AnalogGyro.#ctor(System.Int32)">
      <summary>
            Creates a new Analog Gyro on the specified channel.
            </summary>
      <param name="channel">The channel the gyro is on (Must be an accumulator channel). [0..1] on RIO.</param>
    </member>
    <member name="M:WPILib.AnalogGyro.#ctor(WPILib.AnalogInput)">
      <summary>
            Creates a new Analog Gyro with an existing <see cref="T:WPILib.AnalogInput" />.
            </summary>
      <param name="channel">The analog input this gyro is attached to.</param>
    </member>
    <member name="F:WPILib.AnalogGyro.AnalogInput">
      <summary>
            The <see cref="T:WPILib.AnalogInput" /> that this gyro uses.
            </summary>
    </member>
    <member name="M:WPILib.AnalogGyro.Calibrate">
      <summary>
            Initialize the gyro.
            </summary>
    </member>
    <member name="M:WPILib.AnalogGyro.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.AnalogGyro.GetAngle">
      <summary>
            Return the actual angle in degrees that the robot is currently facing.
            </summary>
      <returns>The current heading of the robot in degrees. This heading is
            based on integration of the returned rate of the gyro.</returns>
    </member>
    <member name="M:WPILib.AnalogGyro.GetRate">
      <summary>
            Returns the rate of rotation of the gyro.
            </summary>
      <returns>The current rate in degrees per second.</returns>
    </member>
    <member name="M:WPILib.AnalogGyro.Reset">
      <summary>
            Reset the gyro.
            </summary>
    </member>
    <member name="P:WPILib.AnalogGyro.Sensitivity">
      <summary>
            Gets or sets the sensitivity of the gyroscope.
            </summary>
    </member>
    <member name="T:WPILib.AnalogInput">
      <summary>
            Analog Channel class. Each channel is read from hardware as a 12-bit number representing 0v to 5v.
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.#ctor(System.Int32)">
      <summary>
            Construct an analog channel
            </summary>
      <param name="channel">The channel number to represent. 0-3 are on-board 4-7 are on the MXP port.</param>
    </member>
    <member name="P:WPILib.AnalogInput.AccumulatorCenter">
      <summary>
            Set the center value of the accumulator.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.AccumulatorDeadband">
      <summary>
            Set the accumulators deadband in 12 bit format.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.AccumulatorInitialValue">
      <summary>
            Set an initial value for the accumulator. This will be added to all values returned to the user.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.AverageBits">
      <summary>
            Gets or sets the averaging bits of this analog input.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.Channel">
      <summary>
            Gets the channel of this Analog Input.
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.AnalogInput.GetAccumulatorCount">
      <summary>
            Read the number of accumulated values
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.GetAccumulatorOutput(System.Int64@,System.UInt32@)">
      <summary>
            Read the accumulated value and the number of accumulated values atomically
            </summary>
      <param name="value">The 64 bit accumulated output</param>
      <param name="count">The number of accumulation cycles</param>
    </member>
    <member name="M:WPILib.AnalogInput.GetAccumulatorValue">
      <summary>
            Read the accumulated value
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.GetAverageValue">
      <summary>
            Get a sample from the output of the oversample and average engine for this channel.
            </summary>
      <returns> A sample from the oversample and average engine for this channel.</returns>
    </member>
    <member name="M:WPILib.AnalogInput.GetAverageVoltage">
      <summary>
            Get a scaled sample from the output of the oversample and average engine
            for this channel.
            </summary>
      <returns>A scaled sample from the output of the oversample and average engine for this channel.</returns>
    </member>
    <member name="M:WPILib.AnalogInput.GetValue">
      <summary>
            Get a sample straight from this channel. 
            </summary>
      <returns>A straight sample from this channel in 12 bit form.</returns>
    </member>
    <member name="M:WPILib.AnalogInput.GetVoltage">
      <summary>
            Get a scaled sample straight from this channel.
            </summary>
      <returns>The voltage on the Analog Input</returns>
    </member>
    <member name="P:WPILib.AnalogInput.GlobalSampleRate">
      <summary>
            Gets or Sets the current global sample rage.
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.InitAccumulator">
      <summary>
            Initialize the accumulator.
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.AnalogInput.IsAccumulatorChannel">
      <summary>
            Is the channel attached to an accumulator.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.LSBWeight">
      <summary>
            Gets the factory scaling least significant bit weight constant that was calibrated
            at manufacturing.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.Offset">
      <summary>
            Gets the factory scaling offset constant that was calibrated at manufacturing.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.OversampleBits">
      <summary>
            Gets or Sets the number of oversample bits
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.PidGet">
      <summary>
            Get the result to use in PIDController
            </summary>
      <returns>The result to use in PIDController</returns>
    </member>
    <member name="P:WPILib.AnalogInput.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.ResetAccumulator">
      <summary>
            Reset the accumulator to its initial value.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.AnalogOutput">
      <summary>
            Analog Output class
            </summary>
    </member>
    <member name="M:WPILib.AnalogOutput.#ctor(System.Int32)">
      <summary>
            Construct an analog output on a specified MXP channel.
            </summary>
      <param name="channel">The channel number to represent. [0..1] on MXP.</param>
    </member>
    <member name="M:WPILib.AnalogOutput.Dispose">
      <summary>
            Channel Destructor.
            </summary>
    </member>
    <member name="M:WPILib.AnalogOutput.GetVoltage">
      <summary>
            Get the voltage being output
            </summary>
      <returns>The voltage being output</returns>
    </member>
    <member name="M:WPILib.AnalogOutput.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.AnalogOutput.SetVoltage(System.Double)">
      <summary>
            Set the voltage being output.
            </summary>
      <param name="voltage">The voltage to output</param>
    </member>
    <member name="P:WPILib.AnalogOutput.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogOutput.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.AnalogOutput.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.AnalogOutput.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogOutput.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.AnalogPotentiometer">
      <summary>
            Class for reading analog potentiometers
            </summary>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.#ctor(System.Int32,System.Double,System.Double)">
      <summary>
            Creates a new Analog Potentiometer on the specified channel. [0..3] on RIO, [4..7] on MXP.
            </summary>
      <param name="channel">The channel this potentiometer is plugged into.</param>
      <param name="fullRange">The scaling to multiply the fraction by to get a 
            meaningful unit.</param>
      <param name="offset">The offset to add to the scaled value for controlling the
            zero value.</param>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.#ctor(WPILib.AnalogInput,System.Double,System.Double)">
      <summary>
            Creates a new Analog Potentiometer with the precreated input.
            </summary>
      <param name="input">The <see cref="T:WPILib.AnalogInput" /> this potentiometer is plugged into.</param>
      <param name="fullRange">The scaling to multiply the fraction by to get a 
            meaningful unit.</param>
      <param name="offset">The offset to add to the scaled value for controlling the
            zero value.</param>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.Dispose">
      <summary>
            Frees the potentiometer.
            </summary>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.Get">
      <summary>
            Get the current reading of the potentiometer
            </summary>
      <returns>The current position of the potentiometer</returns>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.PidGet">
      <summary>
            Get the result to use in PIDController
            </summary>
      <returns>The result to use in PIDController</returns>
    </member>
    <member name="P:WPILib.AnalogPotentiometer.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="P:WPILib.AnalogPotentiometer.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.AnalogPotentiometer.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.AnalogTrigger">
      <summary>
            Class for creating and configuring Analog Triggers.
            </summary>
    </member>
    <member name="M:WPILib.AnalogTrigger.#ctor(System.Int32)">
      <summary>
            Constructor for an analog trigger given a channel number.
            </summary>
      <param name="channel">The port to use for the analog trigger 0-3 are on-board, 4-7 are on the MXP port</param>
    </member>
    <member name="M:WPILib.AnalogTrigger.#ctor(WPILib.AnalogInput)">
      <summary>
            Construct an analog trigger given an analog channel.
            </summary>
      <param name="channel">The <see cref="T:WPILib.AnalogInput" /> to use for the analog trigger</param>
    </member>
    <member name="P:WPILib.AnalogTrigger.Averaged">
      <summary>
            Configure the analog trigger to use averaged vs. raw values.
            </summary>
    </member>
    <member name="M:WPILib.AnalogTrigger.CreateOutput(HAL.Base.AnalogTriggerType)">
      <summary>
            Creates an <see cref="T:WPILib.AnalogTriggerOutput">analog trigger output</see>. 
            </summary>
      <param name="type">The type of object to create.</param>
      <returns>A pointer to a new <see cref="T:WPILib.AnalogTriggerOutput" /></returns>
    </member>
    <member name="M:WPILib.AnalogTrigger.Dispose">
      <summary>
            Release the resources used by this object.
            </summary>
    </member>
    <member name="P:WPILib.AnalogTrigger.Filtered">
      <summary>
            Configure the analog trigger to use a filtered value. True if filtered.
            </summary>
    </member>
    <member name="M:WPILib.AnalogTrigger.GetInWindow">
      <summary>
            Return the InWindow output of the analog trigger. True if the analog input
            is between the upper and lower limits
            </summary>
      <returns>The InWindow output of the analog trigger</returns>
    </member>
    <member name="M:WPILib.AnalogTrigger.GetTriggerState">
      <summary>
            Return the trigger state. True if above upper limit, False if below lower limit.
            Maintains previous value if in between limits.
            </summary>
      <returns>The TriggerState output of the analog trigger</returns>
    </member>
    <member name="P:WPILib.AnalogTrigger.Index">
      <summary>
            Gets the index of the analog trigger
            </summary>
    </member>
    <member name="M:WPILib.AnalogTrigger.InitTrigger(System.Int32)">
      <summary>
            Initialize an analog trigger from a channel
            </summary>
      <param name="channel">The port to use for the analog trigger. [0..3] on RIO, [4..7] on MXP.</param>
    </member>
    <member name="M:WPILib.AnalogTrigger.SetLimitsRaw(System.Int32,System.Int32)">
      <summary>
            Set the upper and lower limits of the analog trigger. The limits are
            given in ADC codes.If oversampling is used, the units must be scaled
            appropriately.
            </summary>
      <param name="lower">The lower raw limit</param>
      <param name="upper">The upper raw limit</param>
    </member>
    <member name="M:WPILib.AnalogTrigger.SetLimitsVoltage(System.Double,System.Double)">
      <summary>
            Set the upper and lower limits of the analog trigger. The limits are
            given as floating point voltage values.
            </summary>
      <param name="lower">The lower voltage limit</param>
      <param name="upper">The upper voltage limit</param>
    </member>
    <member name="T:WPILib.AnalogTriggerOutput">
      <summary>
            Class to represent a specific output from an analog trigger.
            </summary>
    </member>
    <member name="M:WPILib.AnalogTriggerOutput.#ctor(WPILib.AnalogTrigger,HAL.Base.AnalogTriggerType)">
      <summary>
            Create an object that represents one of the four outputs from an analog trigger.
            </summary>
      <param name="trigger">The trigger for which this is an output.</param>
      <param name="outputType">An enum that specifies the output on the trigger to represent.</param>
    </member>
    <member name="P:WPILib.AnalogTriggerOutput.AnalogTriggerForRouting">
      <summary>
            Is this an analog trigger?
            </summary>
    </member>
    <member name="P:WPILib.AnalogTriggerOutput.ChannelForRouting">
      <summary>
            Get the channel routing number.
            </summary>
    </member>
    <member name="M:WPILib.AnalogTriggerOutput.Dispose">
      <summary>
            Destructor
            </summary>
    </member>
    <member name="M:WPILib.AnalogTriggerOutput.Get">
      <summary>
            Get the state of the analog trigger output
            </summary>
      <returns></returns>
    </member>
    <member name="P:WPILib.AnalogTriggerOutput.ModuleForRouting">
      <summary>
            Get the module routing number.
            </summary>
    </member>
    <member name="T:WPILib.BuiltInAccelerometer">
      <summary>
            Class for accessing the RoboRIO's internal accelerometer.
            </summary>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.#ctor(WPILib.Interfaces.AccelerometerRange)">
      <summary>
            Creates a new <see cref="T:WPILib.BuiltInAccelerometer" />.
            </summary>
      <param name="range">The range for the accelerometer to measure</param>
    </member>
    <member name="P:WPILib.BuiltInAccelerometer.AccelerometerRange">
      <summary>
            Common interface for setting the measuring range of an accelerometer
            </summary>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.GetAllAxes">
      <summary>
            Common interface for getting all acceleration axes
            </summary>
      <returns>A struct containing all axes</returns>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.GetX">
      <summary>
            Common interface for getting the x axis acceleration
            </summary>
      <returns>The acceleration along the x axis in g-forces</returns>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.GetY">
      <summary>
            Common interface for getting the y axis acceleration
            </summary>
      <returns>The acceleration along the y axis in g-forces</returns>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.GetZ">
      <summary>
            Common interface for getting the z axis acceleration
            </summary>
      <returns>The acceleration along the z axis in g-forces</returns>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.BuiltInAccelerometer.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.BuiltInAccelerometer.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.CANJaguar">
      <summary>
            This class represents a CAN Jaguar Motor Controller.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.#ctor(System.Int32)">
      <summary>
            Creates a new <see cref="T:WPILib.CANJaguar" /> with a specific device number.
            </summary>
      <param name="deviceNumber">The CAN Id of the Jaguar.</param>
    </member>
    <member name="P:WPILib.CANJaguar.Alive">
      <summary>
            Gets whether the motor is alive.
            </summary>
    </member>
    <member name="F:WPILib.CANJaguar.ApproxBusVoltage">
      <summary>
            The approximate bus voltage of the power system.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.ConfigSoftPositionLimits(System.Double,System.Double)">
      <summary>
            Configure soft position limits when in position controller mode.
            </summary>
      <param name="forwardLimitPosition">The position that if exceeded will disabled the forward direction.</param>
      <param name="reverseLimitPosition">The position that if exceeded will disabled the reverse direction.</param>
    </member>
    <member name="F:WPILib.CANJaguar.ControllerRate">
      <summary>
            The internal control rate (in Hz)
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.D">
      <summary>
            Gets or sets the derivative PID constant.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.Description">
      <summary>
            Gets a description for the Safe Motor Object.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.DeviceNumber">
      <summary>
            Gets the current device number.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.Disable">
      <summary>
            Disable the speed controller.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.DisableControl">
      <summary>
            Disables the closed loop controller.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.DisableSoftPositionLimits">
      <summary>
            Disables soft position limits if previously enabled (disabled by default).
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.CANJaguar.Enable">
      <summary>
            Allows the control loop to run
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.EnableControl">
      <summary>
            Enableds the closed loop controller.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.EnableControl(System.Double)">
      <summary>
            Enables the closed loop controller.
            </summary>
      <param name="encoderInitialPosition">Encoder position to set if position is an encoder reference. 
            Otherwise ignored.</param>
    </member>
    <member name="P:WPILib.CANJaguar.Enabled">
      <summary>
            Gets whether the control loop is enabled.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.EncoderCodesPerRev">
      <summary>
            Sets how many codes per revolution are generated by your encoder.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.Expiration">
      <summary>
            Gets or Sets the expiration time of the motor in seconds.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.F">
      <summary>
            Not implemented on CANJaguar.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.FaultTime">
      <summary>
            Set how long the speed controller waits in the case of a fault before
            resuming operation.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.FirmwareVersion">
      <summary>
            Gets the firmware version of the speed controller.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.ForwardLimit">
      <summary>
            Sets the position that if exceeded will disable the forward direction.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.FXP16_EQ(System.Double,System.Double)">
      <summary>
            Compare floats for equality as fixed point numbers
            </summary>
      <param name="a">A to check</param>
      <param name="b">B to check</param>
      <returns>True if they are equal</returns>
    </member>
    <member name="M:WPILib.CANJaguar.FXP8_EQ(System.Double,System.Double)">
      <summary>
            Compare floats for equality as fixed point numbers
            </summary>
      <param name="a">A to check</param>
      <param name="b">B to check</param>
      <returns>True if they are equal</returns>
    </member>
    <member name="M:WPILib.CANJaguar.Get">
      <summary>
            Returns the last value set to this speed controller.
            </summary>
      <returns>The output value between -1.0 and 1.0</returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetBusVoltage">
      <summary>
            Gets the current input (battery) voltage.
            </summary>
      <returns>The input voltage to the controller (in Volts).</returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetError">
      <summary>
            Gets the difference between the <see cref="P:WPILib.Interfaces.IPIDInterface.Setpoint" /> and the actual position.
            </summary>
      <returns></returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetFaults">
      <summary>
            Gets the status of any faults the speed controller has detected.
            </summary>
      <returns>Any faults returned by the controller.</returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetForwardLimitOk">
      <summary>
            Gets the status of the forward limit switch.
            </summary>
      <returns>The motor is allowed to turn in the forward direction when true.</returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetHardwareVersion">
      <summary>
            Get the version of the Jaguar hardware.
            </summary>
      <returns>1 for the grey jaguar, 2 for the black jaguar.</returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetMessage(System.Int32,System.Int32,System.Byte[])">
      <summary>
            Get a previously requested message.
            </summary>
      <param name="messageId">The messageId to read from the CAN bus (device number is added internally).</param>
      <param name="messageMask">The mask of data to receive.</param>
      <param name="data">The up to 8 bytes of data that was received with the message.</param>
    </member>
    <member name="M:WPILib.CANJaguar.GetOutputCurrent">
      <summary>
            Gets the current being applied to the motor.
            </summary>
      <returns>The current motor current (in Amperes).</returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetOutputVoltage">
      <summary>
            Gets the current output voltage.
            </summary>
      <returns>The output voltage of the controller (in Volts).</returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetPosition">
      <summary>
            Return the current position of whatever the current selected sensor is.
            </summary>
      <returns>The current sensor position.</returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetReverseLimitOk">
      <summary>
            Gets the status of the reverse limit switch.
            </summary>
      <returns>The motor is allowed to turn in the reverse direction when true.</returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetSpeed">
      <summary>
            Return the current velocity of whatever the current selected sensor is.
            </summary>
      <returns>The current sensor velocity.</returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetTemperature">
      <summary>
            Gets the current temperature of the controller.
            </summary>
      <returns>The current temperature of the controller, in degrees Celsius.</returns>
    </member>
    <member name="P:WPILib.CANJaguar.I">
      <summary>
            Gets or sets the integral PID constant.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.CANJaguar.Inverted">
      <summary>
            Inverts the direction of the motors rotation.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.LimitMode">
      <summary>
            Sets the limit mode for position control mode.
            </summary>
    </member>
    <member name="F:WPILib.CANJaguar.MaxMessageDataSize">
      <summary>
            The Max Message send size allowed.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.MaxOutputVoltage">
      <summary>
            Sets the maximum voltage that the speed controller will ever output.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.MotorControlMode">
      <summary>
            Gets or Sets the <see cref="T:WPILib.Interfaces.ControlMode" /> of the speed controller.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.NeutralMode">
      <summary>
            Sets what the controller does to the H-Bridge when neutral (not driving the output).
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.P">
      <summary>
            Gets or sets the proportional PID constant.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.PidWrite(System.Double)">
      <summary>
            Set the output to the value calculated by <see cref="T:WPILib.PIDController" /></summary>
      <param name="value">Output the value calculated by <see cref="T:WPILib.PIDController" /></param>
    </member>
    <member name="P:WPILib.CANJaguar.PotentiometerTurns">
      <summary>
            Sets the number of turns on the potentiometer.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.RequestMessage(System.Int32)">
      <summary>
            Request a message from the Jaguar once, without waiting for it to arrive.
            </summary>
      <param name="messageId">The message to request.</param>
    </member>
    <member name="M:WPILib.CANJaguar.RequestMessage(System.Int32,System.Int32)">
      <summary>
            Request a message from the Jaguar periodically, without waiting for it to arrive.
            </summary>
      <param name="messageId">The message to request</param>
      <param name="period">The period to automatically request data at.</param>
    </member>
    <member name="M:WPILib.CANJaguar.Reset">
      <summary>
            Resets the PID controller.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.ReverseLimit">
      <summary>
            Sets the position that if exceeded will disable the reverese direction.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.SafetyEnabled">
      <summary>
            Gets or Sets whether safety is enabled.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Send a message to the Jaguar non periodically.
            </summary>
      <param name="messageId">The messageId to be used on the CAN bus (device number is added internally).</param>
      <param name="data">The up to 8 bytes of data to be sent with the message.</param>
      <param name="dataSize">Specify how much of the data in the data buffer to send.</param>
    </member>
    <member name="M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Send a message to the Jaguar periodically.
            </summary>
      <param name="messageId">The messageId to be used on the CAN bus (device number is added internally).</param>
      <param name="data">The up to 8 bytes of data to be sent with the message.</param>
      <param name="dataSize">Specify how much of the data in the data buffer to send.</param>
      <param name="period">The period in ms to send the message.</param>
    </member>
    <member name="M:WPILib.CANJaguar.Set(System.Double)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
    </member>
    <member name="M:WPILib.CANJaguar.Set(System.Double,System.Byte)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
      <param name="syncGroup">The update group to add this Set() to, pending UpdateSyncGroup().  If 0, update immediately.</param>
    </member>
    <member name="M:WPILib.CANJaguar.SetCurrentMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)">
      <summary>
            Enable controlling the motor current with a PID loop based on the specifed source.
            </summary>
      <param name="p">The proportional gain of the Jaguar's PID controller</param>
      <param name="i">The integral gain of the Jaguar's PID controller</param>
      <param name="d">The derivative gain of the Jaguar's PID controller</param>
      <param name="mode">The <see cref="T:WPILib.CANJaguar.SourceMode" /> to set the controller to.</param>
      <param name="codesPerRev">The number of codes per revolution on the encoder or potentiometer.</param>
    </member>
    <member name="M:WPILib.CANJaguar.SetPercentMode(WPILib.CANJaguar.SourceMode,System.Int32)">
      <summary>
            Enable control of the motor voltage with the specified <see cref="T:WPILib.CANJaguar.SourceMode" /> and number of 
            codes per revolution.
            </summary>
      <param name="mode">The <see cref="T:WPILib.CANJaguar.SourceMode" /> to set the controller to.</param>
      <param name="codesPerRev">The number of codes per revolution on the encoder or potentiometer.</param>
    </member>
    <member name="M:WPILib.CANJaguar.SetPID(System.Double,System.Double,System.Double)">
      <summary>
            Sets the P, I and D constants for the loop.
            </summary>
      <param name="p">The proportional gain constant.</param>
      <param name="i">The integral gain constant.</param>
      <param name="d">The derivative gain constant.</param>
    </member>
    <member name="P:WPILib.CANJaguar.Setpoint">
      <summary>
            Gets or Sets the loop setpoint.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.SetSpeedMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)">
      <summary>
            Enable controlling the motor speed with a PID loop based on the specifed source.
            </summary>
      <param name="p">The proportional gain of the Jaguar's PID controller</param>
      <param name="i">The integral gain of the Jaguar's PID controller</param>
      <param name="d">The derivative gain of the Jaguar's PID controller</param>
      <param name="mode">The <see cref="T:WPILib.CANJaguar.SourceMode" /> to set the controller to.</param>
      <param name="codesPerRev">The number of codes per revolution on the encoder or potentiometer.</param>
    </member>
    <member name="M:WPILib.CANJaguar.SetupPeriodicStatus">
      <summary>
            Enables periodic status updates from the Jaguar.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.SetVoltageMode(WPILib.CANJaguar.SourceMode,System.Int32)">
      <summary>
            Enable controlling the motor voltage with feedback from the specifed mode.
            </summary>
      <param name="mode">The <see cref="T:WPILib.CANJaguar.SourceMode" /> to set the controller to.</param>
      <param name="codesPerRev">The number of codes per revolution on the encoder or potentiometer.</param>
    </member>
    <member name="P:WPILib.CANJaguar.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.StopMotor">
      <summary>
            Stop the motor associated with this PWM object.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.UpdatePeriodicStatus">
      <summary>
            Check for new periodic status updates and unpack them into local variables.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.UpdateSyncGroup(System.Byte)">
      <summary>
            Update all the motors that have pending sets in the syncGroup.
            </summary>
      <param name="syncGroup">A bitmask of groups to generate synchronous output.</param>
    </member>
    <member name="M:WPILib.CANJaguar.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="M:WPILib.CANJaguar.Verify">
      <summary>
            Check all unverified params an make sure they are equal to their local
            cached versions.
            </summary>
    </member>
    <member name="P:WPILib.CANJaguar.VoltageRampRate">
      <summary>
            Sets the maximum voltage change rate in Volts/s.
            </summary>
    </member>
    <member name="T:WPILib.CANJaguar.SourceMode">
      <summary>
            The source mode for the CAN Jaguar
            </summary>
    </member>
    <member name="F:WPILib.CANJaguar.SourceMode.Encoder">
      <summary>
            Use an encoder as the source.
            </summary>
    </member>
    <member name="F:WPILib.CANJaguar.SourceMode.QuadEncoder">
      <summary>
            Use a quadrature encoder as the source.
            </summary>
    </member>
    <member name="F:WPILib.CANJaguar.SourceMode.Potentiometer">
      <summary>
            Use a potentiometer as the source.
            </summary>
    </member>
    <member name="F:WPILib.CANJaguar.SourceMode.None">
      <summary>
            Use no source.
            </summary>
    </member>
    <member name="T:WPILib.CANTalon">
      <summary>
            This Class represents a CAN Talon SRX Motor Controller.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.#ctor(System.Int32)">
      <summary>
            Constructs an new CANTalon object with default timing.
            </summary>
      <param name="deviceNumber">The id of the Talon SRX this object will communicate with.</param>
    </member>
    <member name="M:WPILib.CANTalon.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructs a CANTalon object.
            </summary>
      <param name="deviceNumber">The id of the Talon SRX this object will communicate with.</param>
      <param name="controlPeriodMs">The update period to the Talon SRX.  Defaults to 10ms.</param>
      <param name="enablePeriodMs">The period in ms to send the enable control frame.</param>
    </member>
    <member name="P:WPILib.CANTalon.Alive">
      <summary>
            Gets whether the motor is alive.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.ChangeMotionControlFramePeriod(System.Int32)">
      <summary>
            Sets the period for motion control frames to be sent at.
            </summary>
      <param name="periodMs">The motion control frame period in seconds</param>
    </member>
    <member name="M:WPILib.CANTalon.ClearIAccum">
      <summary>
            Clears the integral accumulator value.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.ClearMotionProfileHasUnderrun">
      <summary>
            Clears the motion profile has underrun flag.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.ClearMotionProfileTrajectories">
      <summary>
            Clears the Motion Profile Trajectories on this Talon SRX.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.ClearStickyFaults">
      <summary>
            Clears all of the sticky faults for this CAN Talon.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.CloseLoopRampRate">
      <summary>
            Gets or sets the closed loop ramp rate for the current profile. In Volts/Sec
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.ConfigNominalOutputVoltage(System.Double,System.Double)">
      <summary>
            Configures the nominal output voltage of the Talon.
            </summary>
      <param name="forwardVoltage">The nominal forward voltage.</param>
      <param name="reverseVoltage">The nominal reverse voltage.</param>
    </member>
    <member name="M:WPILib.CANTalon.ConfigPeakOutputVoltage(System.Double,System.Double)">
      <summary>
            Configures the output voltage peaks of the Talon.
            </summary>
      <param name="forwardVoltage">The maximum forward voltage to output.</param>
      <param name="reverseVoltage">The maximum reverse voltage to output.</param>
    </member>
    <member name="M:WPILib.CANTalon.ConfigSoftPositionLimits(System.Double,System.Double)">
      <summary>
            Configure soft position limits when in position controller mode.
            </summary>
      <param name="forwardLimitPosition">The position that if exceeded will disabled the forward direction.</param>
      <param name="reverseLimitPosition">The position that if exceeded will disabled the reverse direction.</param>
    </member>
    <member name="P:WPILib.CANTalon.ControlEnabled">
      <summary>
            Gets or Sets whether closed loop control is enabled on the talon.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.D">
      <summary>
            Gets or sets the derivative PID constant.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.Description">
      <summary>
            Gets a description for the Safe Motor Object.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.DeviceId">
      <summary>
            Gets the current DeviceId of the CANTalon
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.Disable">
      <summary>
            Disable the speed controller.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.DisableSoftPositionLimits">
      <summary>
            Disables soft position limits if previously enabled (disabled by default).
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.CANTalon.Enable">
      <summary>
            Allows the control loop to run
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.Enabled">
      <summary>
            Gets whether the control loop is enabled.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.EnableLimitSwitches(System.Boolean,System.Boolean)">
      <summary>
            Sets the enabled state of both the forward and reverse soft limit.
            </summary>
      <param name="forward">True if the forward limit switch is enabled.</param>
      <param name="reverse">True if the reverse limit switch is enabled.</param>
    </member>
    <member name="M:WPILib.CANTalon.EnableZeroSensorPositionOnIndex(System.Boolean,System.Boolean)">
      <summary>
            Enables Talon SRX to automatically zero the Sensor Position whenever an edge is detected
            on the index signal.
            </summary>
      <param name="enable">Enable or Disable the feature.</param>
      <param name="risingEdge">True to clear on rising edge, false for walling edge.</param>
    </member>
    <member name="P:WPILib.CANTalon.EncoderCodesPerRev">
      <summary>
            Sets how many codes per revolution are generated by your encoder.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.Expiration">
      <summary>
            Gets or Sets the expiration time of the motor in seconds.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.F">
      <summary>
            Gets or sets the feed-forward PID constant.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultForwardLimit">
      <summary>
            Gets if there is currently a fault on the Forward Limit. (Non-Sticky)
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultForwardSoftLimit">
      <summary>
            Gets if there is currently a fault on the Forward Soft Limit. (Non-Sticky)
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultHardwareFailure">
      <summary>
            Gets if there is currently a  general hardware failure fault. (Non-Sticky)
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultOverTemp">
      <summary>
            Gets if there is currently an Over Temperature fault. (Non-Sticky)
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultReverseLimit">
      <summary>
            Gets if there is currently a fault on the Reverse Limit. (Non-Sticky)
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultReverseSoftLimit">
      <summary>
            Gets if there is currently a fault on the Reverse Soft Limit. (Non-Sticky)
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultTime">
      <summary>
            Set how long the speed controller waits in the case of a fault before
            resuming operation.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultUnderVoltage">
      <summary>
            Gets if there is currently an UnderVoltage fault. (Non-Sticky)
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.FeedBackDevice">
      <summary>
            Gets or sets the feedback device to be used by the talon.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.FirmwareVersion">
      <summary>
            Gets the firmware version of the speed controller.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.ForwardLimit">
      <summary>
            Sets the position that if exceeded will disable the forward direction.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.ForwardLimitSwitchNormallyOpen">
      <summary>
            Gets or Sets whether the forward limit switch is normally open.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.ForwardSoftLimit">
      <summary>
            Gets or Sets the Forward Soft limit of the CAN Talon
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.ForwardSoftLimitEnabled">
      <summary>
            Gets or sets whether the forward soft limit is enabled or not.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.Get">
      <summary>
            Returns the last value set to this speed controller.
            </summary>
      <returns>The output value between -1.0 and 1.0</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetAnalogInPosition">
      <summary>
            Gets the analog input position, regardless of whether it is in the current feedback device.
            </summary>
      <returns>The 24 bit analog position. The bottom 10 bits are the ADC value, 
            the upper 14 bits track the overflows and underflows.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetAnalogInRaw">
      <summary>
            Gets the analog input raw position, regardless of whether it is in the current feedback device.
            </summary>
      <returns>The ADC (0-1023) value on the analog pin.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetAnalogInVelocity">
      <summary>
            Gets the analog input velocity, regardless of whether it is in the current feedback device.
            </summary>
      <returns>The analog input velocity.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetBusVoltage">
      <summary>
            Gets the current input (battery) voltage.
            </summary>
      <returns>The input voltage to the controller (in Volts).</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetClosedLoopError">
      <summary>
            Gets the current difference between the setpoint and the sensor value.
            </summary>
      <returns>The error in the PID Controller.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetEncoderPosition">
      <summary>
            Gets the current encoder position.
            </summary>
      <returns>The current encoder position.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetEncoderVelocity">
      <summary>
            Gets the current encoder velocity.
            </summary>
      <returns>The current encoder velocity</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetError">
      <summary>
            Gets the difference between the <see cref="P:WPILib.Interfaces.IPIDInterface.Setpoint" /> and the actual position.
            </summary>
      <returns></returns>
    </member>
    <member name="M:WPILib.CANTalon.GetFaults">
      <summary>
            Gets the status of any faults the speed controller has detected.
            </summary>
      <returns>Any faults returned by the controller.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetForwardLimitOk">
      <summary>
            Gets the status of the forward limit switch.
            </summary>
      <returns>The motor is allowed to turn in the forward direction when true.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetIaccum">
      <summary>
            Gets the integral accumulator value.
            </summary>
      <returns>The value of the accumulated PID integral.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetMotionProfileStatus">
      <summary>
            Gets the status of the currently running the motion profile.
            </summary>
      <returns>The status of the motion profile.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetMotionProfileTopLevelBufferCount">
      <summary>
            Gets the Top Level Buffer Count of the Motion Profile.
            </summary>
      <returns>The number of Items in the top level buffer.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetNumberOfQuadIdxRises">
      <summary>
            Gets the number of quadrature index rises
            </summary>
      <returns>The number of rises on the index pin.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetOutputCurrent">
      <summary>
            Gets the current being applied to the motor.
            </summary>
      <returns>The current motor current (in Amperes).</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetOutputVoltage">
      <summary>
            Gets the current output voltage.
            </summary>
      <returns>The output voltage of the controller (in Volts).</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPinStateQuadA">
      <summary>
            Gets the state of the quadrature A pin.
            </summary>
      <returns>The state of the A pin</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPinStateQuadB">
      <summary>
            Gets the state of the quadrature B pin.
            </summary>
      <returns>The state of the B pin</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPinStateQuadIdx">
      <summary>
            Gets the state of the quadrature index pin.
            </summary>
      <returns>The state of the index pin</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPosition">
      <summary>
            Return the current position of whatever the current selected sensor is.
            </summary>
      <returns>The current sensor position.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPulseWidthPosition">
      <summary>
            Gets the pulse width postion.
            </summary>
      <returns>The pulse width position</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPulseWidthRiseToFallUs">
      <summary>
            Gets the pulse width rise to fall time.
            </summary>
      <returns>The pulse width time in microseconds.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPulseWidthRiseToRiseUs">
      <summary>
            Gets the pulse width rise to rise time.
            </summary>
      <returns>The pulse width time in microseconds.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPulseWidthVelocity">
      <summary>
            Gets the pulse width velocity.
            </summary>
      <returns>The pulse width velocity.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetReverseLimitOk">
      <summary>
            Gets the status of the reverse limit switch.
            </summary>
      <returns>The motor is allowed to turn in the reverse direction when true.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetSpeed">
      <summary>
            Return the current velocity of whatever the current selected sensor is.
            </summary>
      <returns>The current sensor velocity.</returns>
    </member>
    <member name="M:WPILib.CANTalon.GetTemperature">
      <summary>
            Gets the current temperature of the controller.
            </summary>
      <returns>The current temperature of the controller, in degrees Celsius.</returns>
    </member>
    <member name="P:WPILib.CANTalon.I">
      <summary>
            Gets or sets the integral PID constant.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.CANTalon.Inverted">
      <summary>
            Inverts the direction of the motors rotation.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.IsBrakeEnabledDuringNeutral">
      <summary>
            Returns whether the brake is enabled during neutral.
            </summary>
      <returns>True if brake mode, false if coast mode.</returns>
    </member>
    <member name="M:WPILib.CANTalon.IsForwardLimitSwitchClosed">
      <summary>
            Gets the value of the forward limit switch.
            </summary>
      <returns>True if the limit switch is closed, otherwise false.</returns>
    </member>
    <member name="M:WPILib.CANTalon.IsMotionProfileTopLevelBufferFull">
      <summary>
            Gets if the top level buffer for motion profiling is full.
            </summary>
      <returns>True if the top level buffer is full.</returns>
    </member>
    <member name="M:WPILib.CANTalon.IsReverseLimitSwitchClosed">
      <summary>
            Gets the value of the reverse limit switch.
            </summary>
      <returns>True if the limit switch is closed, otherwise false.</returns>
    </member>
    <member name="M:WPILib.CANTalon.IsSensorPresent(WPILib.CANTalon.FeedbackDevice)">
      <summary>
            Gets whether the sensor is present.
            </summary>
      <param name="feedbackDevice">The sensor to check for.</param>
      <returns>The status of the feedback device.</returns>
    </member>
    <member name="P:WPILib.CANTalon.IZone">
      <summary>
            Gets or sets the IZone of the CANTalon.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.LimitMode">
      <summary>
            Sets the limit mode for position control mode.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.MaxOutputVoltage">
      <summary>
            Sets the maximum voltage that the speed controller will ever output.
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.MaxTalonId">
      <summary>
            The max Id allowed for a CAN Talon
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.MotorControlMode">
      <summary>
            Gets or Sets the <see cref="T:WPILib.Interfaces.ControlMode" /> of the speed controller.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.NeutralMode">
      <summary>
            Sets what the controller does to the H-Bridge when neutral (not driving the output).
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.P">
      <summary>
            Gets or sets the proportional PID constant.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.PidGet">
      <summary>
            Get the result to use in <see cref="T:WPILib.PIDController" /></summary>
      <returns>The result to use in <see cref="T:WPILib.PIDController" /></returns>
    </member>
    <member name="P:WPILib.CANTalon.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.PidWrite(System.Double)">
      <summary>
            Set the output to the value calculated by <see cref="T:WPILib.PIDController" /></summary>
      <param name="value">Output the value calculated by <see cref="T:WPILib.PIDController" /></param>
    </member>
    <member name="P:WPILib.CANTalon.PotentiometerTurns">
      <summary>
            Sets the number of turns on the potentiometer.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.ProcessMotionProfileBuffer">
      <summary>
            Processes the Motion Profile Buffer.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.Profile">
      <summary>
            Gets or sets which closed loop profile to use.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.PushMotionProfileTrajectory(WPILib.CANTalon.TrajectoryPoint)">
      <summary>
            Pushes a new <see cref="T:WPILib.CANTalon.TrajectoryPoint" /> to the Talon for Motion Profiling.
            </summary>
      <param name="trajPt">The TrajectoryPoint to send.</param>
      <returns>True if successful, otherwise false.</returns>
    </member>
    <member name="M:WPILib.CANTalon.Reset">
      <summary>
            Resets the PID controller.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.ReverseLimit">
      <summary>
            Sets the position that if exceeded will disable the reverese direction.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.ReverseLimitSwitchNormallyOpen">
      <summary>
            Gets or sets whether the reverse limit switch is normally open.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.ReverseOutput(System.Boolean)">
      <summary>
            Sets whether to reverse the output.
            </summary>
      <param name="flip">True to reverse, false to not.</param>
    </member>
    <member name="M:WPILib.CANTalon.ReverseSensor(System.Boolean)">
      <summary>
            Sets whether to reverse the input sensor.
            </summary>
      <param name="flip">True to reverse, false to not</param>
    </member>
    <member name="P:WPILib.CANTalon.ReverseSoftLimit">
      <summary>
            Gets or Sets the Reverse Soft limit of the CAN Talon
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.ReverseSoftLimitEnabled">
      <summary>
            Gets or sets whether the reverse soft limit is enabled or not.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.SafetyEnabled">
      <summary>
            Gets or Sets whether safety is enabled.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.SelectProfileSlot(System.Int32)">
      <summary>
            Selects the profile slot on the Talon. 
            </summary>
      <param name="slotIdx">The profile to set (0 or 1).</param>
    </member>
    <member name="M:WPILib.CANTalon.Set(System.Double)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
    </member>
    <member name="M:WPILib.CANTalon.Set(System.Double,System.Byte)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
      <param name="syncGroup">The update group to add this Set() to, pending UpdateSyncGroup().  If 0, update immediately.</param>
    </member>
    <member name="M:WPILib.CANTalon.SetAllowableClosedLoopErr(System.Int32)">
      <summary>
            Sets the max allowable closed loop error.
            </summary>
      <param name="allowableCloseLoopError">The max allowable close looped error for the selected profile.</param>
    </member>
    <member name="M:WPILib.CANTalon.SetAnalogPosition(System.Int32)">
      <summary>
            Resets the analog position to a new position.
            </summary>
      <param name="newPosition">The new position to reset to.</param>
    </member>
    <member name="M:WPILib.CANTalon.SetEncoderPostition(System.Int32)">
      <summary>
            Resets the encoder position to a specified point.
            </summary>
      <param name="newPosition">The new position to reset to.</param>
    </member>
    <member name="M:WPILib.CANTalon.SetParameter(HAL.Base.HALCanTalonSRX.ParamID,System.Double)">
      <summary>
            General set frame.
            </summary>
      <param name="paramEnum">The parameter to set.</param>
      <param name="value">The value to set the parameter to.</param>
    </member>
    <member name="M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double)">
      <summary>
            Sets the P, I and D constants for the loop.
            </summary>
      <param name="p">The proportional gain constant.</param>
      <param name="i">The integral gain constant.</param>
      <param name="d">The derivative gain constant.</param>
    </member>
    <member name="M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Sets the PID and extra constants of the controler.
            </summary>
      <param name="p"></param>
      <param name="i"></param>
      <param name="d"></param>
      <param name="f"></param>
      <param name="izone"></param>
      <param name="closeLoopRampRate"></param>
      <param name="profile"></param>
    </member>
    <member name="P:WPILib.CANTalon.Setpoint">
      <summary>
            Gets or Sets the loop setpoint.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.SetPosition(System.Double)">
      <summary>
            Sets the position of the encoder or potentiometer
            </summary>
      <param name="pos">The new position of the sensor providing feedback.</param>
    </member>
    <member name="M:WPILib.CANTalon.SetPulseWidthPosition(System.Int32)">
      <summary>
            Resets the pulse width position to a specified point.
            </summary>
      <param name="newPosition">The new position to reset to.</param>
    </member>
    <member name="P:WPILib.CANTalon.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultForwardLimit">
      <summary>
            Gets the number of forward limit sticky faults.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultForwardSoftLimit">
      <summary>
            Gets the number of forward soft limit sticky faults.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultOverTemp">
      <summary>
            Gets the number of over temperature sticky faults.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultReverseLimit">
      <summary>
            Gets the number of reverse limit sticky faults.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultReverseSoftLimit">
      <summary>
            Gets the number of reverse soft limit sticky faults.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultUnderVoltage">
      <summary>
            Gets the number of under voltage sticky faults.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.StopMotor">
      <summary>
            Stop the motor associated with this PWM object.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.TalonIds">
      <summary>
            Resource list of all the talons that the program knows of and has control of.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="P:WPILib.CANTalon.VoltageCompensationRampRate">
      <summary>
            Gets or Sets the voltage compensation ramp rate.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.VoltageRampRate">
      <summary>
            Sets the maximum voltage change rate in Volts/s.
            </summary>
    </member>
    <member name="T:WPILib.CANTalon.FeedbackDevice">
      <summary>
            Feedback type for CAN Talon
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.QuadEncoder">
      <summary>
            A quadrature encoder.
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.AnalogPotentiometer">
      <summary>
            An analog potentiometer.
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.AnalogEncoder">
      <summary>
            An analog encoder.
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.EncoderRising">
      <summary>
            An encoder that only reports when it hits a rising edge.
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.EncoderFalling">
      <summary>
            An encoder that only reports when it hits a falling edge.
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.CtreMagEncoderRelative">
      <summary>
            Relative magnetic encoder.
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.CtreMagEncoderAbsolute">
      <summary>
            Absolute magnetic encoder
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.PulseWidth">
      <summary>
            Encoder is a pulse width sensor.
            </summary>
    </member>
    <member name="T:WPILib.CANTalon.FeedbackDeviceStatus">
      <summary>
            The Feedback device status.
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDeviceStatus.FeedbackStatusUnknown">
      <summary>
            Status unknown
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDeviceStatus.FeedbackStatusPresent">
      <summary>
            Status present
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDeviceStatus.FeedbackStatusNotPresent">
      <summary>
            Status not present
            </summary>
    </member>
    <member name="T:WPILib.CANTalon.MotionProfileStatus"></member>
    <member name="M:WPILib.CANTalon.MotionProfileStatus.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,WPILib.CANTalon.TrajectoryPoint,WPILib.CANTalon.SetValueMotionProfile)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.CANTalon.MotionProfileStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.MotionProfileStatus.ActivePoint"></member>
    <member name="P:WPILib.CANTalon.MotionProfileStatus.ActivePointValid"></member>
    <member name="P:WPILib.CANTalon.MotionProfileStatus.BtmBufferCnt"></member>
    <member name="P:WPILib.CANTalon.MotionProfileStatus.HasUnderrun"></member>
    <member name="P:WPILib.CANTalon.MotionProfileStatus.IsUnderrun">
      <summary></summary>
    </member>
    <member name="P:WPILib.CANTalon.MotionProfileStatus.OutputEnable"></member>
    <member name="P:WPILib.CANTalon.MotionProfileStatus.TopBufferCnt"></member>
    <member name="P:WPILib.CANTalon.MotionProfileStatus.TopBufferRem"></member>
    <member name="T:WPILib.CANTalon.SetValueMotionProfile">
      <summary>
            Enumerated types for Motion Control Set Values
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.SetValueMotionProfile.Disable">
      <summary>
            Disable the motion profile controller
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.SetValueMotionProfile.Enable">
      <summary>
            Enable the motion profile controller
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.SetValueMotionProfile.Hold">
      <summary>
            Hold the motion profile controller in the last valid state.
            </summary>
    </member>
    <member name="T:WPILib.CANTalon.StatusFrameRate">
      <summary>
            Status Rate for CAN Talon
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.StatusFrameRate.General">
      <summary>
            Requests a general status frame
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.StatusFrameRate.Feedback">
      <summary>
            Requests a feedback status frame
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.StatusFrameRate.QuadEncoder">
      <summary>
            Quad encoder status frame
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.StatusFrameRate.AnalogTempVbat">
      <summary>
            Analog temp vbat status frame.
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.StatusFrameRate.PulseWidth">
      <summary>
            Pulse width status frame.
            </summary>
    </member>
    <member name="T:WPILib.CANTalon.TrajectoryPoint"></member>
    <member name="P:WPILib.CANTalon.TrajectoryPoint.IsLastPoint"></member>
    <member name="P:WPILib.CANTalon.TrajectoryPoint.Position"></member>
    <member name="P:WPILib.CANTalon.TrajectoryPoint.ProfileSlotSelect"></member>
    <member name="P:WPILib.CANTalon.TrajectoryPoint.TimeDurMs"></member>
    <member name="P:WPILib.CANTalon.TrajectoryPoint.Velocity"></member>
    <member name="P:WPILib.CANTalon.TrajectoryPoint.VelocityOnly"></member>
    <member name="P:WPILib.CANTalon.TrajectoryPoint.ZeroPos"></member>
    <member name="T:WPILib.CircularBuffer`1">
      <summary>
            This is a simple circular buffer so we don't need to "bucket brigade"
            copy old values. 
            </summary>
    </member>
    <member name="M:WPILib.CircularBuffer`1.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.CircularBuffer`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CircularBuffer`1.Get(System.Int32)">
      <summary>
            Gets the element at index starting from front of buffer.
            </summary>
      <param name="index">The index to get</param>
      <returns>The value at index.</returns>
    </member>
    <member name="P:WPILib.CircularBuffer`1.Item(System.Int32)">
      <summary>
            Gets the element at index starting from front of buffer.
            </summary>
      <param name="i">The index to get</param>
      <returns>The value at index.</returns>
    </member>
    <member name="M:WPILib.CircularBuffer`1.PopBack">
      <summary>
            Pop value at back of buffer.
            </summary>
      <returns>The value at back of buffer.</returns>
    </member>
    <member name="M:WPILib.CircularBuffer`1.PopFront">
      <summary>
            Pop value at front of buffer.
            </summary>
      <returns>Value at front of buffer</returns>
    </member>
    <member name="M:WPILib.CircularBuffer`1.PushBack(`0)">
      <summary>
            Push new value onto the back of the buffer. The value at the front is
            overriden if the buffer is full.
            </summary>
      <param name="value"></param>
    </member>
    <member name="M:WPILib.CircularBuffer`1.PushFront(`0)">
      <summary>
            Push new value onto front of the buffer. The value at the back
            is overriden if the buffer is full.
            </summary>
      <param name="value">The value to push to the front.</param>
    </member>
    <member name="M:WPILib.CircularBuffer`1.Reset">
      <summary>
            Resets the buffer back to default values.
            </summary>
    </member>
    <member name="T:WPILib.Compressor">
      <summary>
            Class for operating the PCM Compressor. The PWM will automatically run in close-loop mode
            by default whenever a <see cref="T:WPILib.Solenoid" /> object is created.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.#ctor">
      <summary>
            Create an instance of the <see cref="T:WPILib.Compressor" /> class using the default module.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.#ctor(System.Int32)">
      <summary>
            Create an instance of the <see cref="T:WPILib.Compressor" /> class
            </summary>
      <param name="pcmId">The PCM CAN device ID.</param>
    </member>
    <member name="M:WPILib.Compressor.ClearAllPCMStickyFaults">
      <summary>
            Clears ALL sticky faults inside the PCM that the compressor is wired to.
            </summary>
    </member>
    <member name="P:WPILib.Compressor.ClosedLoopControl">
      <summary>
            Gets or sets whether closed loop control is enabled on the compressor.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.Enabled">
      <summary>
            Gets whether the compressor is enabled.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorCurrent">
      <summary>
            Gets the Current being drawed by the compressor.
            </summary>
      <returns></returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorCurrentTooHighFault">
      <summary>
            Gets if the compressor is disabled due to the current draw being too high.
            </summary>
      <returns>True if the compressor is disabled due to current being too high.</returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorCurrentTooHighStickyFault">
      <summary>
            Gets if PCM has a sticky fault for the compressor current draw being too high.
            </summary>
      <returns>True if sticky fault is set for the current draw being too high.</returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorNotConnectedFault">
      <summary>
            Gets if the compressor is disabled due to the compressor output not being connected.
            </summary>
      <returns>True if the compressor is not connected.</returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorNotConnectedStickyFault">
      <summary>
            Gets if PCM has a sticky fault for the compressor output not being connected.
            </summary>
      <returns>True if sticky fault is set for the compressor output not being connected.</returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorShortedFault">
      <summary>
            Gets if the compressor is disabled due to an apparent short in the compressor output.
            </summary>
      <returns>True if the compressor is shorted.</returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorShortedStickyFault">
      <summary>
            Gets if PCM has a sticky fault for the compressor output being shorted.
            </summary>
      <returns>True if sticky fault is set for the compressor output being shorted.</returns>
    </member>
    <member name="M:WPILib.Compressor.GetPressureSwitchValue">
      <summary>
            Gets the value of the pressure switch.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Compressor.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Compressor.Start">
      <summary>
            Start the compressor running in closed loop control mode.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.Stop">
      <summary>
            Stop the compressor from running in closed loop control mode.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.Compressor.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Compressor.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.ControllerPower">
      <summary>
            This Class is used to get the voltages and currents from the power rails
            on the RoboRIO. See <see cref="T:WPILib.PowerDistributionPanel" /> for PDP rails.
            </summary>
    </member>
    <member name="M:WPILib.ControllerPower.GetCurrent3V3">
      <summary>
            Gets the current of the 3.3V rail.
            </summary>
      <returns>The 3.3v rail current in Amps.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetCurrent5V">
      <summary>
            Gets the current of the 5V rail.
            </summary>
      <returns>The 5v rail current in Amps.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetCurrent6V">
      <summary>
            Gets the current of the 6V rail.
            </summary>
      <returns>The 6v rail current in Amps.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetEnabled3V3">
      <summary>
            Gets if the 3.3v rail is enabled.
            </summary>
      <returns>True if the 3.3v rail is enabled.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetEnabled5V">
      <summary>
            Gets if the 5v rail is enabled.
            </summary>
      <returns>True if the 5v rail is enabled.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetEnabled6V">
      <summary>
            Gets if the 5v rail is enabled.
            </summary>
      <returns>True if the 5v rail is enabled.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetFaultCount3V3">
      <summary>
            Gets the count of current faults on the 3.3V rail since the controller has booted.
            </summary>
      <returns>The number of faults.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetFaultCount5V">
      <summary>
            Gets the count of current faults on the 5V rail since the controller has booted.
            </summary>
      <returns>The number of faults.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetFaultCount6V">
      <summary>
            Gets the count of current faults on the 6V rail since the controller has booted.
            </summary>
      <returns>The number of faults.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetInputCurrrent">
      <summary>
            Gets the input current of the RoboRIO.
            </summary>
      <returns>The input current in Amps.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetInputVoltage">
      <summary>
            Gets the input voltage of the RoboRIO.
            </summary>
      <returns>The input voltage in Volts.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetVoltage3V3">
      <summary>
            Gets the voltage of the 3.3V rail.
            </summary>
      <returns>The 3.3v rail voltage in Volts.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetVoltage5V">
      <summary>
            Gets the voltage of the 5V rail.
            </summary>
      <returns>The 5v rail voltage in Volts.</returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetVoltage6V">
      <summary>
            Gets the voltage of the 6V rail.
            </summary>
      <returns>The 6v rail voltage in Volts.</returns>
    </member>
    <member name="T:WPILib.Counter">
      <summary>
            Class for counting the number of ticks on a digital input channel.
            </summary>
    </member>
    <member name="M:WPILib.Counter.#ctor">
      <summary>
            Creates an instance of a counter where no sources are selected.
            </summary>
    </member>
    <member name="M:WPILib.Counter.#ctor(System.Int32)">
      <summary>
            Create an instance of a Counter on the specified digital input, as an up counter.
            </summary>
      <param name="channel">The DIO channel to use as the up source. [0..9] on RIO, [10..25] on MXP.</param>
    </member>
    <member name="M:WPILib.Counter.#ctor(WPILib.AnalogTrigger)">
      <summary>
            Create an instance of a Counter object, using an AnalogTrigger.
            </summary>
      <param name="trigger">The <see cref="T:WPILib.AnalogTrigger" /> to count.</param>
    </member>
    <member name="M:WPILib.Counter.#ctor(WPILib.DigitalSource)">
      <summary>
            Creates an instacne of a counter from a <see cref="T:WPILib.DigitalSource" />. 
            </summary>
      <param name="source">The <see cref="T:WPILib.DigitalSource" /> to count.</param>
    </member>
    <member name="M:WPILib.Counter.#ctor(WPILib.Interfaces.EncodingType,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)">
      <summary>
            Creates an instance of a Counter object from specified <see cref="T:WPILib.DigitalSource">
            Digital Sources</see> for up and down counts.
            </summary>
      <param name="encodingType">The EncodingType for the counter. <see cref="F:WPILib.Interfaces.EncodingType.K4X" /> is not supported.</param>
      <param name="upSource">The <see cref="T:WPILib.DigitalSource" /> to use for up counting.</param>
      <param name="downSource">The <see cref="T:WPILib.DigitalSource" /> to use for down counting.</param>
      <param name="inverted">True to invert the direction of counting.</param>
    </member>
    <member name="M:WPILib.Counter.ClearDownSource">
      <summary>
            Disable the down counting source of the counter.
            </summary>
    </member>
    <member name="M:WPILib.Counter.ClearUpSource">
      <summary>
            Disable the up counting source of the counter.
            </summary>
    </member>
    <member name="M:WPILib.Counter.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="P:WPILib.Counter.DistancePerPulse">
      <summary>
            Sets the distance per pulse for this encoder.
            </summary>
    </member>
    <member name="P:WPILib.Counter.FPGAIndex">
      <summary>
            Gets the counters FPGA Index.
            </summary>
    </member>
    <member name="M:WPILib.Counter.Get">
      <summary>
            Gets the current count from the encoder.
            </summary>
      <returns>The current count from the encoder.</returns>
    </member>
    <member name="M:WPILib.Counter.GetDirection">
      <summary>
            The last direction the encoder value changed.
            </summary>
      <returns>True if forward, otherwise false.</returns>
    </member>
    <member name="M:WPILib.Counter.GetDistance">
      <summary>
            Gets the distance the robot has driven since the last reset.
            </summary>
      <returns>Distance driven since the last reset scaled by the <see cref="P:WPILib.Counter.DistancePerPulse" /></returns>
    </member>
    <member name="M:WPILib.Counter.GetPeriod">
      <summary>
            Returns the period of the most recent pulse in seconds.
            </summary>
      <returns>Period in seconds of the most recent pulse.</returns>
    </member>
    <member name="M:WPILib.Counter.GetRate">
      <summary>
            Gets the current rate of the encoder in distance per second.
            </summary>
      <returns>The current rate of the encoder scaled by the <see cref="P:WPILib.Counter.DistancePerPulse" /></returns>
    </member>
    <member name="M:WPILib.Counter.GetStopped">
      <summary>
            Gets if the encoder is stopped.
            </summary>
      <returns>True if the encoder is stopped, otherwise false.</returns>
    </member>
    <member name="M:WPILib.Counter.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Counter.MaxPeriod">
      <summary>
            Sets the maximum period for stopped detection, in seconds.
            </summary>
    </member>
    <member name="M:WPILib.Counter.PidGet">
      <summary>
            Get the result to use in <see cref="T:WPILib.PIDController" /></summary>
      <returns>The result to use in <see cref="T:WPILib.PIDController" /></returns>
    </member>
    <member name="P:WPILib.Counter.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="M:WPILib.Counter.Reset">
      <summary>
            Resets the encoder count to 0.
            </summary>
    </member>
    <member name="P:WPILib.Counter.SamplesToAverage">
      <summary>
            Gets or Sets the number of samples to average when caluclating the period.
            </summary>
    </member>
    <member name="M:WPILib.Counter.SetDownSource(System.Int32)">
      <summary>
            Sets the down source for the counter as a digital input.
            </summary>
      <param name="channel">The DIO channel to count down. [0..9] on RIO, [10..25] are on the MXP.</param>
    </member>
    <member name="M:WPILib.Counter.SetDownSource(WPILib.AnalogTrigger,HAL.Base.AnalogTriggerType)">
      <summary>
            Sets the down source for the counter as a <see cref="T:WPILib.AnalogTrigger" />.
            </summary>
      <param name="analogTrigger">The AnalogTrigger object that is used for the down source.</param>
      <param name="triggerType">The anlog trigger output that will trigger the counter.</param>
    </member>
    <member name="M:WPILib.Counter.SetDownSource(WPILib.DigitalSource)">
      <summary>
            Sets the down source object for the counter.
            </summary>
      <param name="source">The DigitalSource to use for counting down.</param>
    </member>
    <member name="M:WPILib.Counter.SetDownSourceEdge(System.Boolean,System.Boolean)">
      <summary>
            Set the edge sensitivity on a down counting source.
            </summary>
      <param name="risingEdge">True to count on rising edge.</param>
      <param name="fallingEdge">True to count on falling edge.</param>
    </member>
    <member name="M:WPILib.Counter.SetExternalDirectionMode">
      <summary>
            Set external direction mode on this counter.
            </summary>
    </member>
    <member name="M:WPILib.Counter.SetPulseLengthMode(System.Double)">
      <summary>
            Configure the counter to count in up or down based on the length of the input pulse.
            </summary>
      <param name="threshold">The pulse length beyond which the counter counts in the opposite direction (seconds).</param>
    </member>
    <member name="M:WPILib.Counter.SetReverseDirection(System.Boolean)">
      <summary>
            Sets the direction sensing for this encoder.
            </summary>
      <param name="direction">True if direction should be reversed, otherwise false.</param>
    </member>
    <member name="M:WPILib.Counter.SetSemiPeriodMode(System.Boolean)">
      <summary>
            Set Semi-period mode on this counter.
            </summary>
      <param name="highSemiPeriod">True to count up on both rising and falling.</param>
    </member>
    <member name="M:WPILib.Counter.SetUpDownCounterMode">
      <summary>
            Set standard up/down counting mode on this counter.
            </summary>
    </member>
    <member name="M:WPILib.Counter.SetUpSource(System.Int32)">
      <summary>
            Sets the up source for the counter as a digital input.
            </summary>
      <param name="channel">The DIO channel to count up. [0..9] on RIO, [10..25] are on the MXP.</param>
    </member>
    <member name="M:WPILib.Counter.SetUpSource(WPILib.AnalogTrigger,HAL.Base.AnalogTriggerType)">
      <summary>
            Sets the up source for the counter as a <see cref="T:WPILib.AnalogTrigger" />.
            </summary>
      <param name="analogTrigger">The AnalogTrigger object that is used for the up source.</param>
      <param name="triggerType">The anlog trigger output that will trigger the counter.</param>
    </member>
    <member name="M:WPILib.Counter.SetUpSource(WPILib.DigitalSource)">
      <summary>
            Sets the up source object for the counter.
            </summary>
      <param name="source">The DigitalSource to use for counting up.</param>
    </member>
    <member name="M:WPILib.Counter.SetUpSourceEdge(System.Boolean,System.Boolean)">
      <summary>
            Set the edge sensitivity on an up counting source.
            </summary>
      <param name="risingEdge">True to count on rising edge.</param>
      <param name="fallingEdge">True to count on falling edge.</param>
    </member>
    <member name="P:WPILib.Counter.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Counter.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Counter.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.Counter.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Counter.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="P:WPILib.Counter.UpdateWhenEmpty">
      <summary>
            Sets whether you want to continue updating the event timer output
            when there are no samples captured.
            </summary>
    </member>
    <member name="T:WPILib.DigitalGlitchFilter">
      <summary>
            Class to enable glitch filtering on a set of digital inputs.
            </summary>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.#ctor">
      <summary>
            Creates a new <see cref="T:WPILib.DigitalGlitchFilter" /></summary>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.Add(WPILib.Counter)">
      <summary>
            Assigns the <see cref="T:WPILib.Counter" /> to this glitch filter
            </summary>
      <param name="counter">The <see cref="T:WPILib.Counter" /> to add.</param>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.Add(WPILib.DigitalSource)">
      <summary>
            Assigns the <see cref="T:WPILib.DigitalSource" /> to this glitch filter
            </summary>
      <param name="input">The <see cref="T:WPILib.DigitalSource" /> to add.</param>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.Add(WPILib.Encoder)">
      <summary>
            Assigns the <see cref="T:WPILib.Encoder" /> to this glitch filter
            </summary>
      <param name="encoder">The <see cref="T:WPILib.Encoder" /> to add.</param>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.GetPeriodCycles">
      <summary>
            Gets the number of FPGA cycles that the input must hold stead to pass
            through this glitch filter.
            </summary>
      <returns>The number of FPGA cycles.</returns>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.GetPeriodNanoSeconds">
      <summary>
            Gets the number of nanoseconds that the input must hold steady to pass
            through this glitch filter
            </summary>
      <returns>The number of nanoseconds.</returns>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.Remove(WPILib.Counter)">
      <summary>
            Removes the <see cref="T:WPILib.Counter" /> from this glitch filter
            </summary>
      <param name="counter">The <see cref="T:WPILib.Counter" /> to remove.</param>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.Remove(WPILib.DigitalSource)">
      <summary>
            Removes this filter from the given digital input.
            </summary>
      <param name="input">The <see cref="T:WPILib.DigitalSource" /> to stop filtering.</param>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.Remove(WPILib.Encoder)">
      <summary>
            Removes the <see cref="T:WPILib.Encoder" /> from this glitch filter
            </summary>
      <param name="encoder">The <see cref="T:WPILib.Encoder" /> to remove.</param>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.SetPeriodCycles(System.UInt32)">
      <summary>
            Sets the number of FPGA cycles that the input must hold steady to pass
            through this glitch filter
            </summary>
      <param name="fpgaCycles">The number of FPGA cycles.</param>
    </member>
    <member name="M:WPILib.DigitalGlitchFilter.SetPeriodNanoSeconds(System.UInt64)">
      <summary>
            Sets the number of nanoseconds that the input must hold steady to pass
            through this glitch filter.
            </summary>
      <param name="nanoSeconds"></param>
    </member>
    <member name="T:WPILib.DigitalInput">
      <summary>
            Class to read a digital input
            </summary>
    </member>
    <member name="M:WPILib.DigitalInput.#ctor(System.Int32)">
      <summary>
            Create an instance of a Digital Input
            </summary>
      <param name="channel">The DIO channel for the digital input 0-9 are on-board, 10-25 are on the MXP</param>
    </member>
    <member name="P:WPILib.DigitalInput.Channel">
      <summary>
            Get the channel of the digital input.
            </summary>
    </member>
    <member name="M:WPILib.DigitalInput.Get">
      <summary>
            Get the value from the Digital Input Channel
            </summary>
      <returns>The status of the digital input</returns>
    </member>
    <member name="M:WPILib.DigitalInput.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.DigitalInput.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.DigitalInput.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.DigitalInput.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.DigitalInput.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.DigitalInput.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.DigitalOutput">
      <summary>
            Class to write digital outputs.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.#ctor(System.Int32)">
      <summary>
            Create an instance of a digital output.
            </summary>
      <param name="channel">The DIO channel to use for the digital output. 0-9 are on-board, 10-25 are on the MXP</param>
    </member>
    <member name="P:WPILib.DigitalOutput.Channel">
      <summary>
            Get the GPIO channel number that this object represents.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.DisablePWM">
      <summary>
            Change this line from a PWM output back to a static Digital Output line.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.Dispose">
      <summary>
            Free the resources associated with a digital output
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.EnablePWM(System.Double)">
      <summary>
            Enable a PWM output on the line.
            </summary>
      <param name="initialDutyCycle">The duty cycle to start generating. [0..1]</param>
    </member>
    <member name="M:WPILib.DigitalOutput.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.DigitalOutput.Pulse(System.Int32)">
      <summary>
            Write a pulse to the digital output.
            There can only be a single pulse going at any time.
            </summary>
      <param name="pulseLength">The length of the pulse</param>
    </member>
    <member name="M:WPILib.DigitalOutput.Pulse(System.Single)">
      <summary>
            Write a pulse to the digital output.
            There can only be a single pulse going at any time.
            </summary>
      <param name="pulseLength">The length of the pulse</param>
    </member>
    <member name="P:WPILib.DigitalOutput.Pulsing">
      <summary>
            Returns if the pulse is still going.
            </summary>
    </member>
    <member name="P:WPILib.DigitalOutput.PwmGeneratorChannel">
      <summary>
            Gets the PWM Generator index for the PWM generator.
            </summary>
    </member>
    <member name="P:WPILib.DigitalOutput.PWMRate">
      <summary>
            Set the PWM frequency of the PWM output. The valid range is from 0.6Hz to 19kHz.
            <para />There is only 1 frequency for all channels.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.Set(System.Boolean)">
      <summary>
            Set the value of the digital output.
            </summary>
      <param name="value">True if on, false if off.</param>
    </member>
    <member name="P:WPILib.DigitalOutput.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.DigitalOutput.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.UpdateDutyCycle(System.Double)">
      <summary>
            Change the duty cycle that is being generated on the line.
            The resolution of the duty cycle is 8-bit for low frequencies,
            but is reduced the higher the frequency of the PWM signal.
            </summary>
      <param name="value">The duty-cycle to change to. [0..1]</param>
    </member>
    <member name="M:WPILib.DigitalOutput.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="T:WPILib.DigitalSource">
      <summary>
            DigitalSource interface
            </summary>
    </member>
    <member name="M:WPILib.DigitalSource.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.DigitalSource</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.DigitalSource.AnalogTriggerForRouting">
      <summary>
            Is this an analog trigger.
            </summary>
    </member>
    <member name="F:WPILib.DigitalSource.Channel">
      <summary>
            The channel this source is connected to
            </summary>
    </member>
    <member name="P:WPILib.DigitalSource.ChannelForRouting">
      <summary>
            Get the channel routing number.
            </summary>
    </member>
    <member name="F:WPILib.DigitalSource.Channels">
      <summary>
            A collection of the Digital Sources.
            </summary>
    </member>
    <member name="M:WPILib.DigitalSource.Dispose">
      <summary>
            Destructor
            </summary>
    </member>
    <member name="M:WPILib.DigitalSource.InitDigitalPort(System.Int32,System.Boolean)">
      <summary>
            Base Initialization function for all Ports.
            </summary>
      <param name="channel">The channel the port is connected too</param>
      <param name="input">True if port is input, false if output</param>
    </member>
    <member name="P:WPILib.DigitalSource.ModuleForRouting">
      <summary>
            Get the module routing number.
            </summary>
    </member>
    <member name="F:WPILib.DigitalSource.Port">
      <summary>
            The Port this source is attached to.
            </summary>
    </member>
    <member name="T:WPILib.DoubleSolenoid">
      <summary>
            Class for running 2 channels of High Voltage Digital Output from the PCM.
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates a new <see cref="T:WPILib.DoubleSolenoid" /> using the default PCM Id of 0.
            </summary>
      <param name="forwardChannel">The forward channel number on the PCM [0..7]</param>
      <param name="reverseChannel">The reverse channel number on the PCM [0..7]</param>
    </member>
    <member name="M:WPILib.DoubleSolenoid.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new <see cref="T:WPILib.DoubleSolenoid" /> with the specified module number.
            </summary>
      <param name="moduleNumber">The module number of the PCM to use.</param>
      <param name="forwardChannel">The forward channel number on the PCM [0..7]</param>
      <param name="reverseChannel">The reverse channel number on the PCM [0..7]</param>
    </member>
    <member name="M:WPILib.DoubleSolenoid.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="P:WPILib.DoubleSolenoid.FwdSolenoidBlackListed">
      <summary>
            Gets if the forward solenoid is black listed.
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.Get">
      <summary>
            Gets the current value of the solenoid.
            </summary>
      <returns></returns>
    </member>
    <member name="M:WPILib.DoubleSolenoid.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.DoubleSolenoid.RevSolenoidBlackListed">
      <summary>
            Gets if the reverse solenoid is black listed.
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.Set(WPILib.DoubleSolenoid.Value)">
      <summary>
            Sets the value of the solenoid.
            </summary>
      <param name="value">The value to set (Off, Forward, Reverse).</param>
    </member>
    <member name="P:WPILib.DoubleSolenoid.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.DoubleSolenoid.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="T:WPILib.DoubleSolenoid.Value">
      <summary>
            Values allowed for <see cref="T:WPILib.DoubleSolenoid">Double Solenoids</see>.
            </summary>
    </member>
    <member name="F:WPILib.DoubleSolenoid.Value.Off">
      <summary>
            Sets the solenoid to not be set.
            </summary>
    </member>
    <member name="F:WPILib.DoubleSolenoid.Value.Forward">
      <summary>
            Sets the solenoid to the forward position.
            </summary>
    </member>
    <member name="F:WPILib.DoubleSolenoid.Value.Reverse">
      <summary>
            Sets the solenoid to the reverse position.
            </summary>
    </member>
    <member name="T:WPILib.DriverStation">
      <summary>
            Provides access to the network communication data to/from the Driver Station.
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.#ctor">
      <summary>
            Driver Station constructor
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.Autonomous">
      <summary>
            Gets a value indicating whether the Driver Station requires the robot to be
            running in autonomous mode.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.BrownedOut">
      <summary>
            Gets if the system is browned out.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.Disabled">
      <summary>
            Gets a value indicating whether the Driver Station requires the robot to be disabled.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.DSAtached">
      <summary>
            Gets if the DS is attached.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.Enabled">
      <summary>
            Gets a value indicating whether the Driver Station requires the robot to be enabled.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.FMSAttached">
      <summary>
            Gets if the FMS is attached.
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.GetAlliance">
      <summary>
            Gets the current alliance and station from the FMS.
            </summary>
      <returns>The current alliance</returns>
    </member>
    <member name="M:WPILib.DriverStation.GetBatteryVoltage">
      <summary>
            Reads the battery voltage
            </summary>
      <returns>The battery voltage in Volts.</returns>
    </member>
    <member name="M:WPILib.DriverStation.GetData">
      <summary>
            Grabs the newest Joystick data and stores it
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.GetJoystickIsXbox(System.Int32)">
      <summary>
            Gets if the joystick is an xbox controller.
            </summary>
      <param name="stick">The joystick port number</param>
      <returns>True if the joystick is an xbox controller.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetJoystickName(System.Int32)">
      <summary>
            Gets the name of the joystick.
            </summary>
      <param name="stick">The joystick port number</param>
      <returns>The joystick name</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetJoystickType(System.Int32)">
      <summary>
            Gets the type of joystick
            </summary>
      <param name="stick">The joystick port number</param>
      <returns>The joystick type</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetLocation">
      <summary>
            Gets the driver station number.
            </summary>
      <returns>The driver station number (1, 2 or 3)</returns>
    </member>
    <member name="M:WPILib.DriverStation.GetMatchTime">
      <summary>
            Get the approximate match time.
            </summary>
      <returns>The time remaining in the current match period in seconds.</returns>
    </member>
    <member name="M:WPILib.DriverStation.GetStickAxis(System.Int32,System.Int32)">
      <summary>
            Gets the value of an axis on the joystick.
            </summary>
      <param name="stick">The joystick to read</param>
      <param name="axis">The axis to read.</param>
      <returns>The value of the axis from -1.0 to 1.0</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick or axis are out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickAxisCount(System.Int32)">
      <summary>
            Returns the number of axes on a given joystick port.
            </summary>
      <param name="stick">The joystick to check</param>
      <returns>The number of axes on the joystick.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickButton(System.Int32,System.Byte)">
      <summary>
            Gets the state of one joystick button. Button indexes begin at 1.
            </summary>
      <param name="stick">The joystick to read</param>
      <param name="button">The button index</param>
      <returns>The state of the joystick button.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickButtonCount(System.Int32)">
      <summary>
            Gets the number of buttons on a joystick.
            </summary>
      <param name="stick">The joystick port number</param>
      <returns>The number of buttons on the joystick.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickButtons(System.Int32)">
      <summary>
            The state of the buttons on the joystick.
            </summary>
      <param name="stick">The joystick to read</param>
      <returns>The state of the buttons</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickPOV(System.Int32,System.Int32)">
      <summary>
            Returns the state of a POV on the joystick.
            </summary>
      <param name="stick">The joystick to read</param>
      <param name="pov">The POV to read</param>
      <returns>The angle of the POV in degrees, or -1 if the POV is not pressed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick or povs are out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickPOVCount(System.Int32)">
      <summary>
            Returns the number of POVs on a given joystick port
            </summary>
      <param name="stick">The joystick port number</param>
      <returns>The number of POVs on the indicated joystick.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.InAutonomous(System.Boolean)">
      <summary>
            Only to be used to tell the Driver Station what code you claim to be executing
            for diagnostic purposes only.
            </summary>
      <param name="entering">If true, starting autonomous code; if false, leaving autonomous code.</param>
    </member>
    <member name="M:WPILib.DriverStation.InDisabled(System.Boolean)">
      <summary>
            Only to be used to tell the Driver Station what code you claim to be executing
            for diagnostic purposes only.
            </summary>
      <param name="entering">If true, starting disabled code; if false, leaving disabled code.</param>
    </member>
    <member name="M:WPILib.DriverStation.InOperatorControl(System.Boolean)">
      <summary>
            Only to be used to tell the Driver Station what code you claim to be executing
            for diagnostic purposes only.
            </summary>
      <param name="entering">If true, starting teleop code; if false, leaving teleop code.</param>
    </member>
    <member name="P:WPILib.DriverStation.Instance">
      <summary>
            Gets the instance of the driver station.
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.InTest(System.Boolean)">
      <summary>
            Only to be used to tell the Driver Station what code you claim to be executing
            for diagnostic purposes only.
            </summary>
      <param name="entering">If true, starting test code; if false, leaving test code.</param>
    </member>
    <member name="P:WPILib.DriverStation.NewControlData">
      <summary>
            Gets whether a new control packet from the driver station has arrived since
            the last time this was called.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.OperatorControl">
      <summary>
            Gets a value indicating whether the Driver Station requires the robot to be
            running in operator-controlled mode.
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.Release">
      <summary>
            Stops the driver station thread
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.ReportError(System.String,System.Boolean,System.String,System.String,System.Int32)">
      <summary>
            Report an error to the driver station.
            </summary>
      <param name="error">The error to send</param>
      <param name="printTrace">If true, append stack trace to error string</param>
      <param name="filePath">The file path</param>
      <param name="lineNumber">The line number</param>
      <param name="memberName">The member name</param>
    </member>
    <member name="P:WPILib.DriverStation.SysActive">
      <summary>
            Gets a value indicating whether the FPGA outputs are enabled.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.Test">
      <summary>
            Gets a value indicating whether the Driver Station requires the robot to be
            running in test mode.
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.WaitForData(System.Int32)">
      <summary>
            Wait for new data from the driver station.
            </summary>
      <param name="timeout">The timeout in ms</param>
    </member>
    <member name="T:WPILib.DriverStation.Alliance">
      <summary>
            Alliance value enum.
            </summary>
    </member>
    <member name="F:WPILib.DriverStation.Alliance.Red">
      <summary>
            The red alliance
            </summary>
    </member>
    <member name="F:WPILib.DriverStation.Alliance.Blue">
      <summary>
            The blue alliance
            </summary>
    </member>
    <member name="F:WPILib.DriverStation.Alliance.Invalid">
      <summary>
            The alliance is unknown.
            </summary>
    </member>
    <member name="T:WPILib.Encoder">
      <summary>
            Class to read quadrature encoders.
            </summary>
    </member>
    <member name="M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Construct an Encoder given A and B Channels.
            </summary>
      <param name="aChannel">The A channel DIO channel. 0-9 are on-board, 10-25 are on the MXP port.</param>
      <param name="bChannel">The B channel DIO channel. 0-9 are on-board, 10-25 are on the MXP port.</param>
      <param name="reverseDirection">True if to reverse the output, otherwise false</param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Boolean,WPILib.Interfaces.EncodingType)">
      <summary>
            Construct an Encoder given A and B Channels.
            </summary>
      <param name="aChannel">The A channel DIO channel. 0-9 are on-board, 10-25 are on the MXP port.</param>
      <param name="bChannel">The B channel DIO channel. 0-9 are on-board, 10-25 are on the MXP port.</param>
      <param name="reverseDirection">True if to reverse the output, otherwise false</param>
      <param name="encodingType">Either 1X, 2X or 4X to indicate decoding scale.</param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Construct an Encoder given A and B Channels, and an Index pulse channel.
            </summary>
      <param name="aChannel">The A channel DIO channel. 0-9 are on-board, 10-25 are on the MXP port.</param>
      <param name="bChannel">The B channel DIO channel. 0-9 are on-board, 10-25 are on the MXP port.</param>
      <param name="indexChannel">The Index channel DIO channel. 0-9 are on-board, 10-25 are on the MXP port.</param>
      <param name="reverseDirection">True if to reverse the output, otherwise false</param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)">
      <summary>
            Construct an Encoder given precreated A and B Channels as <see cref="T:WPILib.DigitalSource">DigitalSources</see>.
            </summary>
      <param name="aSource">The A channel <see cref="T:WPILib.DigitalSource" /></param>
      <param name="bSource">The B channel <see cref="T:WPILib.DigitalSource" /></param>
      <param name="reverseDirection">True if to reverse the output, otherwise false</param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean,WPILib.Interfaces.EncodingType)">
      <summary>
            Construct an Encoder given precreated A and B Channels as <see cref="T:WPILib.DigitalSource">DigitalSources</see>.
            </summary>
      <param name="aSource">The A channel <see cref="T:WPILib.DigitalSource" /></param>
      <param name="bSource">The B channel <see cref="T:WPILib.DigitalSource" /></param>
      <param name="reverseDirection">True if to reverse the output, otherwise false</param>
      <param name="encodingType">Either 1X, 2X or 4X to indicate decoding scale.</param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)">
      <summary>
            Construct an Encoder given precreated A, B, and Index Channels as <see cref="T:WPILib.DigitalSource">DigitalSources</see>.
            </summary>
      <param name="aSource">The A channel <see cref="T:WPILib.DigitalSource" /></param>
      <param name="bSource">The B channel <see cref="T:WPILib.DigitalSource" /></param>
      <param name="indexSource">The Index channel <see cref="T:WPILib.DigitalSource" /></param>
      <param name="reverseDirection">True if to reverse the output, otherwise false</param>
    </member>
    <member name="M:WPILib.Encoder.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="P:WPILib.Encoder.DistancePerPulse">
      <summary>
            Sets the distance per pulse for this encoder.
            </summary>
    </member>
    <member name="P:WPILib.Encoder.EncodingScale">
      <summary>
            Gets the encoder's Encoding Scale, which is used to divide raw edge counts to spec'd counts.
            </summary>
    </member>
    <member name="P:WPILib.Encoder.FPGAIndex">
      <summary>
            Gets the encoder's FPGA Index.
            </summary>
    </member>
    <member name="M:WPILib.Encoder.Get">
      <summary>
            Gets the current count from the encoder.
            </summary>
      <returns>The current count from the encoder.</returns>
    </member>
    <member name="M:WPILib.Encoder.GetDirection">
      <summary>
            The last direction the encoder value changed.
            </summary>
      <returns>True if forward, otherwise false.</returns>
    </member>
    <member name="M:WPILib.Encoder.GetDistance">
      <summary>
            Gets the distance the robot has driven since the last reset.
            </summary>
      <returns>Distance driven since the last reset scaled by the <see cref="P:WPILib.Encoder.DistancePerPulse" /></returns>
    </member>
    <member name="M:WPILib.Encoder.GetPeriod">
      <summary>
            Returns the period of the most recent pulse in seconds.
            </summary>
      <returns>Period in seconds of the most recent pulse.</returns>
    </member>
    <member name="M:WPILib.Encoder.GetRate">
      <summary>
            Gets the current rate of the encoder in distance per second.
            </summary>
      <returns>The current rate of the encoder scaled by the <see cref="P:WPILib.Encoder.DistancePerPulse" /></returns>
    </member>
    <member name="M:WPILib.Encoder.GetRaw">
      <summary>
            Gets the raw value from the encoder.
            </summary>
      <returns>The raw count from the encoder</returns>
    </member>
    <member name="M:WPILib.Encoder.GetStopped">
      <summary>
            Gets if the encoder is stopped.
            </summary>
      <returns>True if the encoder is stopped, otherwise false.</returns>
    </member>
    <member name="M:WPILib.Encoder.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="F:WPILib.Encoder.m_aSource">
      <summary>
            The A Source
            </summary>
    </member>
    <member name="F:WPILib.Encoder.m_bSource">
      <summary>
            The B Source
            </summary>
    </member>
    <member name="F:WPILib.Encoder.m_indexSource">
      <summary>
            The Index Source
            </summary>
    </member>
    <member name="P:WPILib.Encoder.MaxPeriod">
      <summary>
            Sets the maximum period for stopped detection, in seconds.
            </summary>
    </member>
    <member name="P:WPILib.Encoder.MinRate">
      <summary>
            Sets the minimum rate of the device before the hardware reports it stopped.
            </summary>
    </member>
    <member name="M:WPILib.Encoder.PidGet">
      <summary>
            Get the result to use in <see cref="T:WPILib.PIDController" /></summary>
      <returns>The result to use in <see cref="T:WPILib.PIDController" /></returns>
    </member>
    <member name="P:WPILib.Encoder.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="M:WPILib.Encoder.Reset">
      <summary>
            Resets the encoder count to 0.
            </summary>
    </member>
    <member name="P:WPILib.Encoder.SamplesToAverage">
      <summary>
            Gets or Sets the number of samples to average when caluclating the period.
            </summary>
    </member>
    <member name="M:WPILib.Encoder.SetIndexSource(System.Int32,WPILib.Encoder.IndexingType)">
      <summary>
            Sets the index source for the encoder. Resets based on the <see cref="T:WPILib.Encoder.IndexingType" /> passed.
            </summary>
      <param name="channel">The DIO channel to set as the encoder index.</param>
      <param name="type">The state that will cause the encoder to reset.</param>
    </member>
    <member name="M:WPILib.Encoder.SetIndexSource(WPILib.DigitalSource,WPILib.Encoder.IndexingType)">
      <summary>
            Sets the index source for the encoder. Resets based on the <see cref="T:WPILib.Encoder.IndexingType" /> passed.
            </summary>
      <param name="source">The <see cref="T:WPILib.DigitalSource" /> to set as the encoder index.</param>
      <param name="type">The state that will cause the encoder to reset.</param>
    </member>
    <member name="M:WPILib.Encoder.SetReverseDirection(System.Boolean)">
      <summary>
            Sets the direction sensing for this encoder.
            </summary>
      <param name="direction">True if direction should be reversed, otherwise false.</param>
    </member>
    <member name="P:WPILib.Encoder.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Encoder.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Encoder.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.Encoder.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Encoder.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.Encoder.IndexingType">
      <summary>
            Encoder Indexing Type Enum
            </summary>
    </member>
    <member name="F:WPILib.Encoder.IndexingType.ResetWhileHigh">
      <summary>
            Reset indexing while the index pin is High
            </summary>
    </member>
    <member name="F:WPILib.Encoder.IndexingType.ResetWhileLow">
      <summary>
            Reset indexing while the index pin is low.
            </summary>
    </member>
    <member name="F:WPILib.Encoder.IndexingType.ResetOnFallingEdge">
      <summary>
            Reset indexing on the falling edge of the index pin.
            </summary>
    </member>
    <member name="F:WPILib.Encoder.IndexingType.ResetOnRisingEdge">
      <summary>
            Reset indexing on the rising edge of the index pin.
            </summary>
    </member>
    <member name="T:WPILib.GearTooth">
      <summary>
            Alias for counter class.
            </summary>
    </member>
    <member name="M:WPILib.GearTooth.#ctor(System.Int32)">
      <summary>
            Construct a <see cref="T:WPILib.GearTooth" /> sensor given a channel.
            </summary>
      <param name="channel">The GPIO channel that the sensor is
            connected to.</param>
    </member>
    <member name="M:WPILib.GearTooth.#ctor(System.Int32,System.Boolean)">
      <summary>
            Construct a <see cref="T:WPILib.GearTooth" /> sensor given a channel.
            </summary>
      <param name="channel">The GPIO channel that the sensor is
            connected to.</param>
      <param name="directionSensitive">True to enable direction sensing.</param>
    </member>
    <member name="M:WPILib.GearTooth.#ctor(WPILib.DigitalSource)">
      <summary>
            Construct a <see cref="T:WPILib.GearTooth" /> sensor given a <see cref="T:WPILib.DigitalSource" />.
            </summary>
      <param name="source">An existing <see cref="T:WPILib.DigitalSource" /> object 
            (such as a <see cref="T:WPILib.DigitalInput" /></param>
    </member>
    <member name="M:WPILib.GearTooth.#ctor(WPILib.DigitalSource,System.Boolean)">
      <summary>
            Construct a <see cref="T:WPILib.GearTooth" /> sensor given a <see cref="T:WPILib.DigitalSource" />.
            </summary>
      <param name="source">An existing <see cref="T:WPILib.DigitalSource" /> object 
            (such as a <see cref="T:WPILib.DigitalInput" /></param>
      <param name="directionSensitive">True to enable direction sensing.</param>
    </member>
    <member name="P:WPILib.GearTooth.DirectionSensing">
      <summary>
            Sets whether the GearTooth sensor is direction sensing.
            </summary>
    </member>
    <member name="T:WPILib.GenericHID">
      <summary>
            GenericHID Interface
            </summary>
    </member>
    <member name="M:WPILib.GenericHID.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.GenericHID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.GenericHID.GetBumper">
      <summary>
            Is the bumper pressed
            </summary>
      <returns>True if pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetBumper(WPILib.Hand)">
      <summary>
            Is the bumper pressed
            </summary>
      <param name="hand">Which hand</param>
      <returns>True if the bumper for the given hand is pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetPOV">
      <summary>
            Is POV 0 pressed
            </summary>
      <returns>the POV value</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetPOV(System.Int32)">
      <summary>
            Is the given POV pressed
            </summary>
      <param name="pov">Which POV number</param>
      <returns>the POV value</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetRawAxis(System.Int32)">
      <summary>
            Get the raw axis
            </summary>
      <param name="which">Index of the axis</param>
      <returns>The raw value of the selected axis</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetRawButton(System.Int32)">
      <summary>
            Is the given button pressed
            </summary>
      <param name="button">Which button number</param>
      <returns>True if the button is pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetThrottle">
      <summary>
            Get the Throttle Value
            </summary>
    </member>
    <member name="M:WPILib.GenericHID.GetTop">
      <summary>
            Is the top button pressed
            </summary>
      <returns>True if pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetTop(WPILib.Hand)">
      <summary>
            Is the top button pressed
            </summary>
      <param name="hand">Which hand</param>
      <returns>True if the top button for the given hand is pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetTrigger">
      <summary>
            Is the trigger pressed
            </summary>
      <returns>True if pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetTrigger(WPILib.Hand)">
      <summary>
            Is the trigger pressed
            </summary>
      <param name="hand">Which hand</param>
      <returns>True if the trigger for the given hand is pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetTwist">
      <summary>
            Get the twist value
            </summary>
    </member>
    <member name="M:WPILib.GenericHID.GetX">
      <summary>
            Get the x position of the HID
            </summary>
      <returns>The x position of the HID</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetX(WPILib.Hand)">
      <summary>
            Get the x position of the HID
            </summary>
      <param name="hand">Which hand, left or right</param>
      <returns>The x position</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetY">
      <summary>
            Get the y position of the HID
            </summary>
      <returns>The y position of the HID</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetY(WPILib.Hand)">
      <summary>
            Get the y position of the HID
            </summary>
      <param name="hand">Which hand, left or right</param>
      <returns>The y position</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetZ">
      <summary>
            Get the z position of the HID
            </summary>
      <returns>The z position of the HID</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetZ(WPILib.Hand)">
      <summary>
            Get the z position of the HID
            </summary>
      <param name="hand">Which hand, left or right</param>
      <returns>The z position</returns>
    </member>
    <member name="T:WPILib.GyroBase">
      <summary>
            Gyro base is the common base class for Gyro implementations such as
            <see cref="T:WPILib.AnalogGyro" />.
            </summary>
    </member>
    <member name="M:WPILib.GyroBase.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.GyroBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.GyroBase.Calibrate">
      <summary>
            Initialize the gyro.
            </summary>
    </member>
    <member name="M:WPILib.GyroBase.GetAngle">
      <summary>
            Return the actual angle in degrees that the robot is currently facing.
            </summary>
      <returns>The current heading of the robot in degrees. This heading is
            based on integration of the returned rate of the gyro.</returns>
    </member>
    <member name="M:WPILib.GyroBase.GetRate">
      <summary>
            Returns the rate of rotation of the gyro.
            </summary>
      <returns>The current rate in degrees per second.</returns>
    </member>
    <member name="M:WPILib.GyroBase.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.GyroBase.PidGet">
      <summary>
            Get the output of the gyro for use with <see cref="T:WPILib.PIDController">PIDControllers.</see>
            May be the angle or rate depending on the set <see cref="P:WPILib.GyroBase.PIDSourceType" />.
            </summary>
      <returns>The output of the gyro.</returns>
    </member>
    <member name="P:WPILib.GyroBase.PIDSourceType">
      <summary>
            Gets or Sets which parameter of the gyro you are using as process control.
            </summary>
    </member>
    <member name="M:WPILib.GyroBase.Reset">
      <summary>
            Reset the gyro.
            </summary>
    </member>
    <member name="P:WPILib.GyroBase.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.GyroBase.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.GyroBase.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.GyroBase.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.GyroBase.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.Hand">
      <summary>
            Which hand the Human Interface Device is associated with.
            </summary>
    </member>
    <member name="F:WPILib.Hand.Left"></member>
    <member name="F:WPILib.Hand.Right"></member>
    <member name="T:WPILib.HLUsageReporting">
      <summary>
            Support for High Level Usage Reporting.
            </summary>
    </member>
    <member name="M:WPILib.HLUsageReporting.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.HLUsageReporting</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.HLUsageReporting.Implementation">
      <summary>
            Gets or Sets the HLUsageReporting interface.
            </summary>
    </member>
    <member name="M:WPILib.HLUsageReporting.ReportPIDController(System.Int32)">
      <summary>
            Reports usages of a PID Controller
            </summary>
      <param name="num"></param>
    </member>
    <member name="M:WPILib.HLUsageReporting.ReportScheduler">
      <summary>
            Reports usage of the scheduler
            </summary>
    </member>
    <member name="M:WPILib.HLUsageReporting.ReportSmartDashboard">
      <summary>
            Reports usage of the Smart Dashboard.
            </summary>
    </member>
    <member name="T:WPILib.HLUsageReporting.Interface">
      <summary>
            The interface to use for High Level usage reporting.
            </summary>
    </member>
    <member name="M:WPILib.HLUsageReporting.Interface.ReportPIDController(System.Int32)">
      <summary>
            Reports the PID Controller
            </summary>
      <param name="num"></param>
    </member>
    <member name="M:WPILib.HLUsageReporting.Interface.ReportScheduler">
      <summary>
            Reports the scheduler
            </summary>
    </member>
    <member name="M:WPILib.HLUsageReporting.Interface.ReportSmartDashboard">
      <summary>
            Reports the SmartDashboard.
            </summary>
    </member>
    <member name="T:WPILib.I2C">
      <summary>
            I2C bus interface class.
            </summary>
    </member>
    <member name="M:WPILib.I2C.#ctor(WPILib.I2C.Port,System.Int32)">
      <summary>
            Creates a new I2C interface class
            </summary>
      <param name="port">The I2C port on the RoboRIO the device is connected to.</param>
      <param name="deviceAddress">The address of the device on the bud</param>
    </member>
    <member name="M:WPILib.I2C.AddressOnly">
      <summary>
            Attempts to address a device on the I2C bus.
            </summary>
      <returns>True if transfer was aborted, otherwise false.</returns>
    </member>
    <member name="M:WPILib.I2C.Broadcast(System.Int32,System.Int32)">
      <summary>
            Sends a broadcast write to all devices on the I2C bus.
            </summary>
      <param name="registerAddress">The register to write on all devices on the bus.</param>
      <param name="data">The value to write to the devices.</param>
      <returns>True if transfer was aborted, otherwise false.</returns>
    </member>
    <member name="M:WPILib.I2C.LvRead(System.Byte[],System.Byte,System.Byte[]@)">
      <summary>
            Executes a read transaction with the device using the LabVIEW style API.
            </summary>
      <param name="register">The register to start reading from.</param>
      <param name="bytesToRead">The number of bytes to read from the register.</param>
      <param name="returnData">A buffer for the data returned from the device.</param>
      <returns>True if transfer was aborted, otherwise false.</returns>
    </member>
    <member name="M:WPILib.I2C.LvWrite(System.Byte,System.Byte[])">
      <summary>
            Executes a write transaction with the device using the LabVIEW style API.
            </summary>
      <param name="register">The register to write to.</param>
      <param name="message">The message to send to the register.</param>
      <returns>True if transfer was aborted, otherwise false.</returns>
    </member>
    <member name="M:WPILib.I2C.Read(System.Int32,System.Int32,System.Byte[])">
      <summary>
            Executes a read transaction with the device
            </summary>
      <param name="registerAddress">The register to read first in the transaction.</param>
      <param name="count">The number of bytes to read in the transaction.</param>
      <param name="buffer">A buffer to read the data to. </param>
      <returns>True if transfer was aborted, otherwise false.</returns>
    </member>
    <member name="M:WPILib.I2C.ReadOnly(System.Byte[],System.Int32)">
      <summary>
            Execute a read only transaction with the device.
            </summary>
      <param name="buffer">A buffer to read the data to.</param>
      <param name="count">The number of bytes to read from the device.</param>
      <returns>True if transfer was aborted, otherwise false.</returns>
    </member>
    <member name="M:WPILib.I2C.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32)">
      <summary>
            Starts a generic I2C transaction.
            </summary>
      <param name="dataToSend">Buffer of data to send as part of the transaction.</param>
      <param name="sendSize">Number of bytes to send as part of the transactions.</param>
      <param name="dataRecieved">Buffer to read data into.</param>
      <param name="receiveSize">Number of bytes to read from the device.</param>
      <returns>True if transfer was aborted, otherwise false.</returns>
    </member>
    <member name="M:WPILib.I2C.VerifySensor(System.Int32,System.Int32,System.Byte[])">
      <summary>
            Verify that a device's registers contain expected values.
            </summary>
      <param name="registerAddress">The base register to start reading from the device.</param>
      <param name="count">The size of the field to be verified.</param>
      <param name="expected">A buffer containing the values expected from the device.</param>
      <returns>True if transfer was aborted, otherwise false.</returns>
    </member>
    <member name="M:WPILib.I2C.Write(System.Int32,System.Int32)">
      <summary>
            Execute a write transaction with the device.
            </summary>
      <param name="registerAddress">The address of the register on the device
            to be written</param>
      <param name="data">The byte to write to the register on the device</param>
      <returns>True if transfer was aborted, otherwise false.</returns>
    </member>
    <member name="M:WPILib.I2C.WriteBulk(System.Byte[])">
      <summary>
            Executes a multiple byte write with the device.
            </summary>
      <param name="data">The data to write to the device.</param>
      <returns>True if transfer was aborted, otherwise false.</returns>
    </member>
    <member name="T:WPILib.I2C.Port">
      <summary>
            Enumeration of all the avalible I2C ports.
            </summary>
    </member>
    <member name="F:WPILib.I2C.Port.Onboard">
      <summary>Onboard Port</summary>
    </member>
    <member name="F:WPILib.I2C.Port.MXP">
      <summary>MXP Port</summary>
    </member>
    <member name="T:WPILib.InterruptableSensorBase">
      <summary>
            Base for sensors to be used with interrupts.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.#ctor">
      <summary>
            Creates a new <see cref="T:WPILib.InterruptableSensorBase" />.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.AllocateInterrupts(System.Boolean)">
      <summary>
            Allocate the interrupt.
            </summary>
      <param name="watcher">True if the interrupt should be called in synchronous mode
            where the user program will have to explicitly wait for the interrupt
            to occur.</param>
    </member>
    <member name="P:WPILib.InterruptableSensorBase.AnalogTriggerForRouting">
      <summary>
            Is this an analog trigger.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.CancelInterrupts">
      <summary>
            Cancel interrupts on this device.
            </summary>
    </member>
    <member name="P:WPILib.InterruptableSensorBase.ChannelForRouting">
      <summary>
            Get the channel routing number.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.DisableInterrupts">
      <summary>
            Disable Interrupts without deallocating structures.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.EnableInterrupts">
      <summary>
            Enable interrupts to occur on this input.
            </summary>
    </member>
    <member name="F:WPILib.InterruptableSensorBase.Interrupt">
      <summary>
            The interrupt resource.
            </summary>
    </member>
    <member name="P:WPILib.InterruptableSensorBase.InterruptIndex">
      <summary>
            Gets the index of the Interrupt
            </summary>
    </member>
    <member name="F:WPILib.InterruptableSensorBase.Interrupts">
      <summary>
            Resource manager
            </summary>
    </member>
    <member name="F:WPILib.InterruptableSensorBase.IsSynchronousInterrupt">
      <summary>
            Flags if the interrupt being allocated is synchronous.
            </summary>
    </member>
    <member name="P:WPILib.InterruptableSensorBase.ModuleForRouting">
      <summary>
            Get the module routing number.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.ReadFallingTimestanp">
      <summary>
            Return the timestamp for the falling interrupt that occurred most recently.
            </summary>
      <returns>Timestamp in seconds since boot.</returns>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.ReadRisingTimestanp">
      <summary>
            Return the timestamp for the rising interrupt that occurred most recently.
            </summary>
      <returns>Timestamp in seconds since boot.</returns>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.RequestInterrupts">
      <summary>
            Requests one of the 8 interrupts synchronously on this input.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.RequestInterrupts(System.Action)">
      <summary>
            Requests one of the 8 interrupts asynchronously on this input.
            </summary>
      <param name="handler">The callback that will be called whenever 
            there is an interrupt on this device.</param>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.RequestInterrupts(System.Action{System.UInt32,System.Object},System.Object)">
      <summary>
            Requests one of the 8 interrupts asynchronously on this input.
            </summary>
      <param name="handler">The callback that will be called whenever 
            there is an interrupt on this device.</param>
      <param name="param">The object returned when the interrupt occurs.</param>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.SetUpSourceEdge(System.Boolean,System.Boolean)">
      <summary>
            Set which edge to trigger interrupts on.
            </summary>
      <param name="risingEdge">True to interrupt on the rising edge</param>
      <param name="fallingEdge">True to interrupt on the falling edge</param>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.WaitForInterrupt(System.Double)">
      <summary>
            In synchronous mode, wait for the defined interrupt to occur.
            </summary>
      <param name="timeout">Timeout in seconds</param>
      <returns>The <see cref="T:WPILib.WaitResult" /> of the interrupt</returns>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.WaitForInterrupt(System.Double,System.Boolean)">
      <summary>
            In synchronous mode, wait for the defined interrupt to occur.
            </summary>
      <param name="timeout">Timeout in seconds</param>
      <param name="ignorePrevious">If true, ignore previous interrupts that 
            happened before this was called.</param>
      <returns>The <see cref="T:WPILib.WaitResult" /> of the interrupt</returns>
    </member>
    <member name="T:WPILib.IterativeRobot">
      <summary>
             Implements a iterative robot framework, extending from <see cref="T:WPILib.RobotBase" />.
             </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.#ctor">
      <summary>
            Constructor for IterativeRobot.
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.AutonomousInit">
      <summary>
            Initialization code for autonomous mode should go here.
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.AutonomousPeriodic">
      <summary>
            Periodic code for autonomous mode should go here.
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.DisabledInit">
      <summary>
            Initialization code for disabled mode should go here.
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.DisabledPeriodic">
      <summary>
            Periodic code for disabled mode should go here.
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.RobotInit">
      <summary>
            Robot-wide initialization code should go here.
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.StartCompetition">
      <summary>
            Provide an alternate "main loop" via startCompetition().
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.TeleopInit">
      <summary>
            Initialization for teleop mode should go here.
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.TeleopPeriodic">
      <summary>
            Periodic code for teleop mode should go here.
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.TestInit">
      <summary>
            Initialization code for test mode should go here.
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.TestPeriodic">
      <summary>
            Periodic code for test mose should go here.
            </summary>
    </member>
    <member name="T:WPILib.Jaguar">
      <summary>
            Texas Instruments / Vex Robotics Jaguar Speed Controller as a PWM Device.
            </summary>
    </member>
    <member name="M:WPILib.Jaguar.#ctor(System.Int32)">
      <summary>
            Creates a new Jaguar Motor Controller in PWM Mode.
            </summary>
      <param name="channel">The PWM channel that the Jaguar is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.Jaguar.InitJaguar">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.Joystick">
      <summary>
            Handles inputs from joysticks connected to the driver station.
            </summary>
    </member>
    <member name="M:WPILib.Joystick.#ctor(System.Int32)">
      <summary>
            Constructs an instance of a joystick with the specified index.
            </summary>
      <param name="port">The port on the Driver Station the joystick is connected to [0..5]</param>
    </member>
    <member name="M:WPILib.Joystick.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Protected version of the constructor to be called by sub-classes.
            </summary>
      <param name="port">The port on the Driver Station the joystick is connected to [0..5]</param>
      <param name="numAxisTypes">The number of axis types in the enum</param>
      <param name="numButtonTypes">The number of button types in the enum</param>
    </member>
    <member name="P:WPILib.Joystick.AxisCount">
      <summary>
            Return the number of axis on the current joystick.
            </summary>
    </member>
    <member name="P:WPILib.Joystick.ButtonCount">
      <summary>
            Gets the number of buttons on this joystick.
            </summary>
    </member>
    <member name="M:WPILib.Joystick.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:WPILib.Joystick.Equals(WPILib.Joystick)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:WPILib.Joystick.GetAxis(WPILib.Joystick.AxisType)">
      <summary>
            Return the axis determined by the argument.
            </summary>
      <param name="axis">The axis to read</param>
      <returns>The value of the axis</returns>
    </member>
    <member name="M:WPILib.Joystick.GetAxisChannel(WPILib.Joystick.AxisType)">
      <summary>
            Gets the channel currently associated with the specified axis.
            </summary>
      <param name="axis">The axis to look up the channel for.</param>
      <returns>The channel for the axis.</returns>
    </member>
    <member name="M:WPILib.Joystick.GetBumper(WPILib.Hand)">
      <summary>
            Is the bumper pressed
            </summary>
      <param name="hand">Which hand</param>
      <returns>True if the bumper for the given hand is pressed</returns>
    </member>
    <member name="M:WPILib.Joystick.GetButton(WPILib.Joystick.ButtonType)">
      <summary>
            Get buttons based on an enumberated type.
            </summary>
      <param name="button">The type of the button to read</param>
      <returns>The state of the button.</returns>
    </member>
    <member name="M:WPILib.Joystick.GetDirectionDegrees">
      <summary>
            Gets the direction of the vector formed by the joystick and its orign in degrees.
            </summary>
      <returns>The direction of the vector in degrees.</returns>
    </member>
    <member name="M:WPILib.Joystick.GetDirectionRadians">
      <summary>
            Gets the direction of the vector formed by the joystick and its origin in radians.
            </summary>
      <returns>The direction of the vector in radians</returns>
    </member>
    <member name="M:WPILib.Joystick.GetHashCode">
      <summary>Serves as the default hash function. </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:WPILib.Joystick.GetMagnitude">
      <summary>
            Gets the magnitude of the direction vector formed by the joystick's
            current position relative to it's origin.
            </summary>
      <returns>The magnitude of the direction vector.</returns>
    </member>
    <member name="M:WPILib.Joystick.GetPOV(System.Int32)">
      <summary>
            Get the state of a POV on the joystick.
            </summary>
      <param name="pov">The index of the POV to read (starting at 0).</param>
      <returns>The angle of the POV in degrees, or -1 if not pressed.</returns>
    </member>
    <member name="M:WPILib.Joystick.GetRawAxis(System.Int32)">
      <summary>
            Get the value of the axis
            </summary>
      <param name="axis">The axis to read, starting at 0.</param>
      <returns>The value of the axis [-1.0..1.0]</returns>
    </member>
    <member name="M:WPILib.Joystick.GetRawButton(System.Int32)">
      <summary>
            Get the button value (starting at 1).
            </summary>
      <param name="button">The button number to be read (starting at 1).</param>
      <returns>The state of the button.</returns>
    </member>
    <member name="M:WPILib.Joystick.GetThrottle">
      <summary>
            Get the Throttle Value
            </summary>
    </member>
    <member name="M:WPILib.Joystick.GetTop(WPILib.Hand)">
      <summary>
            Is the top button pressed
            </summary>
      <param name="hand">Which hand</param>
      <returns>True if the top button for the given hand is pressed</returns>
    </member>
    <member name="M:WPILib.Joystick.GetTrigger(WPILib.Hand)">
      <summary>
            Is the trigger pressed
            </summary>
      <param name="hand">Which hand</param>
      <returns>True if the trigger for the given hand is pressed</returns>
    </member>
    <member name="M:WPILib.Joystick.GetTwist">
      <summary>
            Get the twist value
            </summary>
    </member>
    <member name="M:WPILib.Joystick.GetX(WPILib.Hand)">
      <summary>
            Get the x position of the HID
            </summary>
      <param name="hand">Which hand, left or right</param>
      <returns>The x position</returns>
    </member>
    <member name="M:WPILib.Joystick.GetY(WPILib.Hand)">
      <summary>
            Get the y position of the HID
            </summary>
      <param name="hand">Which hand, left or right</param>
      <returns>The y position</returns>
    </member>
    <member name="M:WPILib.Joystick.GetZ(WPILib.Hand)">
      <summary>
            Get the z position of the HID
            </summary>
      <param name="hand">Which hand, left or right</param>
      <returns>The z position</returns>
    </member>
    <member name="P:WPILib.Joystick.IsXbox">
      <summary>
            Gets if the joystick is an Xbox controller.
            </summary>
      <returns></returns>
    </member>
    <member name="P:WPILib.Joystick.JoystickType">
      <summary>
            Gets the HID type of the current joystick.
            </summary>
    </member>
    <member name="P:WPILib.Joystick.Name">
      <summary>
            Gets the name of the current joystick.
            </summary>
    </member>
    <member name="P:WPILib.Joystick.Port">
      <summary>
            Gets the port the joystick is attached to on the Driver Station.
            </summary>
    </member>
    <member name="P:WPILib.Joystick.POVCount">
      <summary>
            Gets the number of POVs on this joystick.
            </summary>
    </member>
    <member name="M:WPILib.Joystick.SetAxisChannel(WPILib.Joystick.AxisType,System.Int32)">
      <summary>
            Set the channel associated with the specified axis.
            </summary>
      <param name="axis">The axis to set the channel for.</param>
      <param name="channel">The channel to set the axis to.</param>
    </member>
    <member name="M:WPILib.Joystick.SetOutput(System.Int32,System.Boolean)">
      <summary>
            Sets a single HID output value for the joystick.
            </summary>
      <param name="outputNumber">The index of the output to set [1..32]</param>
      <param name="value">The value to set the output to.</param>
    </member>
    <member name="M:WPILib.Joystick.SetOutputs(System.Int32)">
      <summary>
            Sets all HID output values for the joystick.
            </summary>
      <param name="value">The 32 bit output value (1 bit for each output)</param>
    </member>
    <member name="M:WPILib.Joystick.SetRumble(WPILib.Joystick.RumbleType,System.Single)">
      <summary>
            Sets the rumble output for the joystick. 
            </summary>
      <param name="type">Which rumble value to set.</param>
      <param name="value">The normalized value (0 to 1) to set the rumbble to.</param>
    </member>
    <member name="T:WPILib.Joystick.AxisType">
      <summary>
            Axes enum for Joysticks
            </summary>
    </member>
    <member name="F:WPILib.Joystick.AxisType.X">
      <summary>
            X Axis
            </summary>
    </member>
    <member name="F:WPILib.Joystick.AxisType.Y">
      <summary>
            Y Axis
            </summary>
    </member>
    <member name="F:WPILib.Joystick.AxisType.Z">
      <summary>
            Z Axis
            </summary>
    </member>
    <member name="F:WPILib.Joystick.AxisType.Twist">
      <summary>
            Twist
            </summary>
    </member>
    <member name="F:WPILib.Joystick.AxisType.Throttle">
      <summary>
            Throttle
            </summary>
    </member>
    <member name="F:WPILib.Joystick.AxisType.NumAxis">
      <summary>
            Number of axis
            </summary>
    </member>
    <member name="T:WPILib.Joystick.ButtonType">
      <summary>
            Button enum for Joysticks
            </summary>
    </member>
    <member name="F:WPILib.Joystick.ButtonType.Trigger">
      <summary>
            Trigger button
            </summary>
    </member>
    <member name="F:WPILib.Joystick.ButtonType.Top">
      <summary>
            Top button
            </summary>
    </member>
    <member name="F:WPILib.Joystick.ButtonType.NumButton">
      <summary>
            Number of buttons
            </summary>
    </member>
    <member name="T:WPILib.Joystick.RumbleType">
      <summary>
            Rumble Type enum for Joysticks
            </summary>
    </member>
    <member name="F:WPILib.Joystick.RumbleType.LeftRumble">
      <summary>
            Left Rumble
            </summary>
    </member>
    <member name="F:WPILib.Joystick.RumbleType.RightRumble">
      <summary>
            Right Rumble
            </summary>
    </member>
    <member name="T:WPILib.MotorSafetyHelper">
      <summary>
            The <see cref="T:WPILib.MotorSafetyHelper" /> object is constructed for every object that wants to implement the Motor
            Safety protocol. </summary>
    </member>
    <member name="M:WPILib.MotorSafetyHelper.#ctor(WPILib.Interfaces.IMotorSafety)">
      <summary>
            The constructor for a <see cref="T:WPILib.MotorSafetyHelper" /> object
            </summary>
      <param name="safeObject">A pointer to the motor object implementing <see cref="T:WPILib.Interfaces.IMotorSafety" />. This is used
            to call the Stop() method on the motor</param>
    </member>
    <member name="P:WPILib.MotorSafetyHelper.Alive">
      <summary>
            Determine if the motor is still operating or has timed out.
            </summary>
    </member>
    <member name="M:WPILib.MotorSafetyHelper.Check">
      <summary>
            Check if this motor has exceeded its timeout. </summary>
    </member>
    <member name="M:WPILib.MotorSafetyHelper.CheckMotors">
      <summary>
            Check the motors to see if any have timed out. </summary>
    </member>
    <member name="F:WPILib.MotorSafetyHelper.DefaultSafetyExpiration">
      <summary>
            The default safety expiration time.
            </summary>
    </member>
    <member name="P:WPILib.MotorSafetyHelper.Expiration">
      <summary>
            Set the expiration time for the corresponding motor safety object.
            </summary>
    </member>
    <member name="M:WPILib.MotorSafetyHelper.Feed">
      <summary>
            Feed the motor safety object. </summary>
    </member>
    <member name="P:WPILib.MotorSafetyHelper.SafetyEnabled">
      <summary>
            Enable/disable motor safety for this device. </summary>
    </member>
    <member name="T:WPILib.MotorType"></member>
    <member name="F:WPILib.MotorType.FrontLeft">
      <summary>
            The front left motor
            </summary>
    </member>
    <member name="F:WPILib.MotorType.FrontRight">
      <summary>
            The front right motor
            </summary>
    </member>
    <member name="F:WPILib.MotorType.RearLeft">
      <summary>
            The rear left motor
            </summary>
    </member>
    <member name="F:WPILib.MotorType.RearRight">
      <summary>
            The rear right motor.
            </summary>
    </member>
    <member name="T:WPILib.Notifier">
      <summary>
            The Notifier class is used to create alarms from the FPGA.
            </summary>
    </member>
    <member name="M:WPILib.Notifier.#ctor(System.Action)">
      <summary>
            Create a notifier for the timer event notification.
            </summary>
      <param name="handler">The callback that is called at the notification time
            which is set using <see cref="M:WPILib.Notifier.StartSingle(System.Double)" /> or <see cref="M:WPILib.Notifier.StartPeriodic(System.Double)" /></param>
    </member>
    <member name="M:WPILib.Notifier.#ctor(System.Action{System.Object},System.Object)">
      <summary>
            Create a notifier for the timer event notification.
            </summary>
      <param name="handler">The callback that is called at the notification time
            which is set using <see cref="M:WPILib.Notifier.StartSingle(System.Double)" /> or <see cref="M:WPILib.Notifier.StartPeriodic(System.Double)" /></param>
      <param name="param">The object to pass to the callback.</param>
    </member>
    <member name="M:WPILib.Notifier.Dispose">
      <summary>
            Disposes of the Notifier
            </summary>
    </member>
    <member name="M:WPILib.Notifier.StartPeriodic(System.Double)">
      <summary>
            Register for periodic event notification..
            </summary>
      <param name="period">Period in seconds to call the handler starting one
            period after  the call to this method.</param>
    </member>
    <member name="M:WPILib.Notifier.StartSingle(System.Double)">
      <summary>
            Register for a single event notification
            </summary>
      <param name="delay">Seconds to wait before the handler is called.</param>
    </member>
    <member name="M:WPILib.Notifier.Stop">
      <summary>
            Stop timer events from occurring.
            </summary>
    </member>
    <member name="T:WPILib.PeriodMultiplier">
      <summary>
            Represents the amount to multiply the minimum servo-pulse pwm period by.
            </summary>
    </member>
    <member name="F:WPILib.PeriodMultiplier.K1X"></member>
    <member name="F:WPILib.PeriodMultiplier.K2X"></member>
    <member name="F:WPILib.PeriodMultiplier.K4X"></member>
    <member name="T:WPILib.PIDController">
      <summary>
            Implements a PID loop to be used with mechanisms.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)">
      <summary>
            Creates a new PID object with the given contants for P, I, D and F using a 50ms period
            </summary>
      <param name="kp">The proportional coefficient.</param>
      <param name="ki">The integral coefficient</param>
      <param name="kd">The derivative coefficient</param>
      <param name="kf">The feed forward term.</param>
      <param name="source">The PIDSource object that is used to get values.</param>
      <param name="output">The PIDOutput object that is set to the output percentage.</param>
    </member>
    <member name="M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)">
      <summary>
            Creates a new PID object with the given contants for P, I, D and F.
            </summary>
      <param name="kp">The proportional coefficient.</param>
      <param name="ki">The integral coefficient</param>
      <param name="kd">The derivative coefficient</param>
      <param name="kf">The feed forward term.</param>
      <param name="source">The PIDSource object that is used to get values.</param>
      <param name="output">The PIDOutput object that is set to the output percentage.</param>
      <param name="period">The loop time for doing calculations.</param>
    </member>
    <member name="M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)">
      <summary>
            Creates a new PID object with the given contants for P, I and D using a 50ms period.
            </summary>
      <param name="kp">The proportional coefficient.</param>
      <param name="ki">The integral coefficient</param>
      <param name="kd">The derivative coefficient</param>
      <param name="source">The PIDSource object that is used to get values.</param>
      <param name="output">The PIDOutput object that is set to the output percentage.</param>
    </member>
    <member name="M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)">
      <summary>
            Creates a new PID object with the given contants for P, I and D.
            </summary>
      <param name="kp">The proportional coefficient.</param>
      <param name="ki">The integral coefficient</param>
      <param name="kd">The derivative coefficient</param>
      <param name="source">The PIDSource object that is used to get values.</param>
      <param name="output">The PIDOutput object that is set to the output percentage.</param>
      <param name="period">The loop time for doing calculations.</param>
    </member>
    <member name="M:WPILib.PIDController.Calculate">
      <summary>
            Read the inpout, calculate the output accordinglyu, and write to the input.
            This should only be called by the Notifier timer and is created during initialization.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.CalculateFeedForward">
      <summary>
             Calculate the feed forward term.
             </summary>
      <returns>The calculated Feed Forward Value</returns>
    </member>
    <member name="P:WPILib.PIDController.Continuous">
      <summary>
            Gets or Sets whether the PID controller input is continouous.
            </summary>
    </member>
    <member name="P:WPILib.PIDController.D">
      <summary>
            Gets the derivative gain constant.
            </summary>
    </member>
    <member name="F:WPILib.PIDController.DefaultPeriod">
      <summary>
            The default period to run the controller at.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.Disable">
      <summary>
            Stops the control loop from running until explicitly re-enabled by calling
            <see cref="M:WPILib.Interfaces.IController.Enable" /></summary>
    </member>
    <member name="M:WPILib.PIDController.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.PIDController.Enable">
      <summary>
            Allows the control loop to run
            </summary>
    </member>
    <member name="P:WPILib.PIDController.Enabled">
      <summary>
            Gets whether the control loop is enabled.
            </summary>
    </member>
    <member name="P:WPILib.PIDController.F"></member>
    <member name="M:WPILib.PIDController.Get">
      <summary>
            Gets teh current PID result.
            </summary>
      <returns>The latest calculated output.</returns>
    </member>
    <member name="M:WPILib.PIDController.GetAvgError">
      <summary>
            Returns the current difference of the error over the past few iterations.
            </summary>
      <returns>The current average of the error.</returns>
    </member>
    <member name="M:WPILib.PIDController.GetDeltaSetpoint">
      <summary>
            Retunrs the change in setpoing over time of the PIDController.
            </summary>
      <returns>The change in setpoint over time.</returns>
    </member>
    <member name="M:WPILib.PIDController.GetError">
      <summary>
            Returns the current difference of the input from the setpoint.
            </summary>
      <returns>The current error.</returns>
    </member>
    <member name="P:WPILib.PIDController.I">
      <summary>
            Gets the integral gain constant.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.PIDController.IsAvgErrorValid">
      <summary>
            Returns whether or not any values have been collected.
            </summary>
      <returns>True if <see cref="M:WPILib.PIDController.GetAvgError" /> is currently valid.</returns>
    </member>
    <member name="M:WPILib.PIDController.OnTarget">
      <summary>
            Gets if the PID system is on target.
            </summary>
      <returns>True if the error is less then the tolerance.</returns>
    </member>
    <member name="P:WPILib.PIDController.P">
      <summary>
            Gets the proportaional gain constant.
            </summary>
    </member>
    <member name="F:WPILib.PIDController.PIDInput">
      <summary>
            The PIDInput for this controller.
            </summary>
    </member>
    <member name="F:WPILib.PIDController.PIDOutput">
      <summary>
            The PIDOutput for this controller.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.Reset">
      <summary>
            Resets the PID controller.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.SetAbsoluteTolerance(System.Double)">
      <summary>
            Sets the absolute error which is considered tolerable for use with <see cref="M:WPILib.PIDController.OnTarget" />.
            </summary>
      <param name="absTolerance">The absolute tolerance.</param>
    </member>
    <member name="M:WPILib.PIDController.SetInputRange(System.Double,System.Double)">
      <summary>
            Sets the minimum and maximum values expected from the input and setpoint.
            </summary>
      <param name="minimumInput">The minimum value expected from the input and setpoint.</param>
      <param name="maximumInput">The maximum value expected from the input and setpoint.</param>
    </member>
    <member name="M:WPILib.PIDController.SetOutputRange(System.Double,System.Double)">
      <summary>
            Sets the maximum and minimum values to write.
            </summary>
      <param name="minimumOutput">The minimum value to write to the output.</param>
      <param name="maximumOutput">The maximum value to write to the output.</param>
    </member>
    <member name="M:WPILib.PIDController.SetPercentTolerance(System.Double)">
      <summary>
            Set the percentage error which is considered tolerable for use with <see cref="M:WPILib.PIDController.OnTarget" />.
            </summary>
      <param name="percent">The percent tolerance.</param>
    </member>
    <member name="M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double)">
      <summary>
            Sets the P, I and D constants for the loop.
            </summary>
      <param name="p">The proportional gain constant.</param>
      <param name="i">The integral gain constant.</param>
      <param name="d">The derivative gain constant.</param>
    </member>
    <member name="M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Sets the PID Controller Gain Parameters.
            </summary>
      <param name="p">The proportional coefficient</param>
      <param name="i">The integral coefficient</param>
      <param name="d">The derivative coefficient</param>
      <param name="f">The feed forward coefficient</param>
    </member>
    <member name="P:WPILib.PIDController.Setpoint">
      <summary>
            Gets or sets the setpoint for the PID Controller.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.SetTolerance(System.Double)">
      <summary>
            Sets the percentage error which is considered tolerable for use
            with <see cref="M:WPILib.PIDController.OnTarget" />.
            </summary>
      <param name="percent">The percent error which is tolerable.</param>
    </member>
    <member name="M:WPILib.PIDController.SetToleranceBuffer(System.Int32)">
      <summary>
            Sets the number of previous error samples to average for tolerancing.
            </summary>
      <param name="bufLength">The number of previous cycles to average.</param>
    </member>
    <member name="P:WPILib.PIDController.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.PIDController.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.PIDController.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.PIDController.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="T:WPILib.PIDController.ToleranceType">
      <summary>
            Tolerance Types allowed for this PIDController.
            </summary>
    </member>
    <member name="F:WPILib.PIDController.ToleranceType.AbsoluteTolerance">
      <summary>
            Absolute Tolerance
            </summary>
    </member>
    <member name="F:WPILib.PIDController.ToleranceType.PercentTolerance">
      <summary>
            Percent Tolerance
            </summary>
    </member>
    <member name="F:WPILib.PIDController.ToleranceType.NoTolerance">
      <summary>
            No Tolerance
            </summary>
    </member>
    <member name="T:WPILib.PowerDistributionPanel">
      <summary>
            Class for getting voltage, current, temperature, and energy from the CAN PDP.
            </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.#ctor">
      <summary>
            Creates a new <see cref="T:WPILib.PowerDistributionPanel" /> with the default module of 0.
            </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.#ctor(System.Int32)">
      <summary>
            Creates a new <see cref="T:WPILib.PowerDistributionPanel" /> class using the specified module.
            </summary>
      <param name="module">The module number of the PDP.</param>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.ClearStickyFaults">
      <summary>
            Clears all PDP Sticky Faults.
            </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetCurrent(System.Int32)">
      <summary>
            Query the current of a single channel of the PDP.
            </summary>
      <param name="channel">The channel to read from. [0..15]</param>
      <returns>The current of the PDP channel in Amperes.</returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetTemperature">
      <summary>
            Query the temperature of the PDP.
            </summary>
      <returns>The temperature of the PDP in degrees Celsius.</returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetTotalCurrent">
      <summary>
            Query the current of all monitored PDP channels (0-15).
            </summary>
      <returns>The current of all channels in Amperes.</returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetTotalEnergy">
      <summary>
            Query the total energy drawn from the monitored PDP channels.
            </summary>
      <returns>The total enegery in Joules.</returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetTotalPower">
      <summary>
            Query the total power drawn from the monitored PDP channels.
            </summary>
      <returns>The total power in Watts.</returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetVoltage">
      <summary>
            Query the input voltage of the PDP
            </summary>
      <returns>The voltage of the PDP in volts.</returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.ResetTotalEnergy">
      <summary>
            Resets the total energy to 0.
            </summary>
    </member>
    <member name="P:WPILib.PowerDistributionPanel.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.PowerDistributionPanel.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.Preferences">
      <summary>
            The preferences class provides a relatively simple way to save important
            values to the RoboRIO to access the next time the RoboRIO is booted.
            </summary>
    </member>
    <member name="M:WPILib.Preferences.ContainsKey(System.String)">
      <summary>
            Gets whether or not there is a key with the given name.
            </summary>
      <param name="key">The key</param>
      <returns>True if there is a value at the given key.</returns>
    </member>
    <member name="M:WPILib.Preferences.GetBoolean(System.String,System.Boolean)">
      <summary>
            Returns the boolean at the given key. 
            </summary>
      <param name="key">The key.</param>
      <param name="backup">The value to return if non exists in the table.</param>
      <returns>The value in the table, or the backup if value does not exist in table.</returns>
    </member>
    <member name="M:WPILib.Preferences.GetDouble(System.String,System.Double)">
      <summary>
            Returns the double at the given key. 
            </summary>
      <param name="key">The key.</param>
      <param name="backup">The value to return if non exists in the table.</param>
      <returns>The value in the table, or the backup if value does not exist in table.</returns>
    </member>
    <member name="M:WPILib.Preferences.GetFloat(System.String,System.Single)">
      <summary>
            Returns the float at the given key. 
            </summary>
      <param name="key">The key.</param>
      <param name="backup">The value to return if non exists in the table.</param>
      <returns>The value in the table, or the backup if value does not exist in table.</returns>
    </member>
    <member name="M:WPILib.Preferences.GetInt(System.String,System.Int32)">
      <summary>
            Returns the int at the given key. 
            </summary>
      <param name="key">The key.</param>
      <param name="backup">The value to return if non exists in the table.</param>
      <returns>The value in the table, or the backup if value does not exist in table.</returns>
    </member>
    <member name="P:WPILib.Preferences.GetKeys">
      <summary>
            Gets a  list of the keys.
            </summary>
    </member>
    <member name="M:WPILib.Preferences.GetLong(System.String,System.Int64)">
      <summary>
            Returns the long at the given key. 
            </summary>
      <param name="key">The key.</param>
      <param name="backup">The value to return if non exists in the table.</param>
      <returns>The value in the table, or the backup if value does not exist in table.</returns>
    </member>
    <member name="M:WPILib.Preferences.GetString(System.String,System.String)">
      <summary>
            Returns the string at the given key. 
            </summary>
      <param name="key">The key.</param>
      <param name="backup">The value to return if non exists in the table.</param>
      <returns>The value in the table, or the backup if value does not exist in table.</returns>
    </member>
    <member name="P:WPILib.Preferences.Instance">
      <summary>
            Returns the preferences instance
            </summary>
    </member>
    <member name="M:WPILib.Preferences.PutBoolean(System.String,System.Boolean)">
      <summary>
            Puts the given boolean into the preferences table.
            </summary>
      <param name="key">The key</param>
      <param name="value">The value</param>
    </member>
    <member name="M:WPILib.Preferences.PutDouble(System.String,System.Double)">
      <summary>
            Puts the given double into the preferences table.
            </summary>
      <param name="key">The key</param>
      <param name="value">The value</param>
    </member>
    <member name="M:WPILib.Preferences.PutFloat(System.String,System.Single)">
      <summary>
            Puts the given float into the preferences table.
            </summary>
      <param name="key">The key</param>
      <param name="value">The value</param>
    </member>
    <member name="M:WPILib.Preferences.PutInt(System.String,System.Int32)">
      <summary>
            Puts the given int into the preferences table.
            </summary>
      <param name="key">The key</param>
      <param name="value">The value</param>
    </member>
    <member name="M:WPILib.Preferences.PutLong(System.String,System.Int64)">
      <summary>
            Puts the given long into the preferences table.
            </summary>
      <param name="key">The key</param>
      <param name="value">The value</param>
    </member>
    <member name="M:WPILib.Preferences.PutString(System.String,System.String)">
      <summary>
            Puts the given string into the preferences table.
            </summary>
      <param name="key">The key</param>
      <param name="value">The value</param>
      <exception cref="T:System.ArgumentNullException">Thrown if value is null.</exception>
    </member>
    <member name="M:WPILib.Preferences.Remove(System.String)">
      <summary>
            Removes a preference.
            </summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:WPILib.Preferences.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="T:WPILib.PWM">
      <summary>
            Class implements the PWM generation in the FPGA.
            </summary>
    </member>
    <member name="M:WPILib.PWM.#ctor(System.Int32)">
      <summary>
            Allocate a PWM given a channel
            </summary>
      <param name="channel">The PWM Channel.</param>
    </member>
    <member name="P:WPILib.PWM.CenterPwm">
      <summary>
            Gets the Center PWM value.
            </summary>
    </member>
    <member name="P:WPILib.PWM.Channel">
      <summary>
            Gets the channel number associated with the PWM Object.
            </summary>
    </member>
    <member name="P:WPILib.PWM.DeadbandElimination">
      <summary>
            Get or set whether or not to eliminate deadband from the speed contruller.
            </summary>
    </member>
    <member name="F:WPILib.PWM.DefaultPwmCenter">
      <summary>
            DefaultPWMCenter is the PWM range center in ms
            </summary>
    </member>
    <member name="F:WPILib.PWM.DefaultPwmPeriod">
      <summary>
             DefaultPWMPeriod is in milliseconds.
             </summary>
    </member>
    <member name="F:WPILib.PWM.DefaultPwmStepsDown">
      <summary>
            DefaultPWMStepsDown is the number of PWM steps below the centerpoint
            </summary>
    </member>
    <member name="M:WPILib.PWM.Dispose">
      <summary>
            Free the PWM Channel
            </summary>
    </member>
    <member name="P:WPILib.PWM.FullRangeScaleFactor">
      <summary>
            Gets the scale factor for all values
            </summary>
    </member>
    <member name="M:WPILib.PWM.GetPosition">
      <summary>
            Get the PWM value in terms of a position
            </summary>
      <returns>The position the server is set to between 0.0 and 1.0</returns>
    </member>
    <member name="M:WPILib.PWM.GetRaw">
      <summary>
            Gets the latest PWM value directly from the FPGA.
            </summary>
      <returns>Raw PWM value between 0 and 2000</returns>
    </member>
    <member name="M:WPILib.PWM.GetSpeed">
      <summary>
            Gets the latest PWM value in terms of speed
            </summary>
      <returns>The most recently set speed between -1.0 and 1.0</returns>
    </member>
    <member name="M:WPILib.PWM.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.PWM.MaxNegativePwm">
      <summary>
            Gets the Max Negative PWM allowed. This is the low end of the deadband.
            </summary>
    </member>
    <member name="P:WPILib.PWM.MaxPositivePwm">
      <summary>
            Get the Max Positive PWM allowed.
            </summary>
    </member>
    <member name="P:WPILib.PWM.MinNegativePwm">
      <summary>
            Gets the Min Negative PWM allowed.
            </summary>
    </member>
    <member name="P:WPILib.PWM.MinPositivePwm">
      <summary>
            Gets the Min Positive PWM allowed. This is the high end of the deadzone.
            </summary>
    </member>
    <member name="P:WPILib.PWM.NegativeScaleFactor">
      <summary>
            Gets the scale factor for negative values
            </summary>
    </member>
    <member name="P:WPILib.PWM.PeriodMultiplier">
      <summary>
            Sets the Period Multiplier. This is used to slow down the signal for
            old PWM devices.
            </summary>
    </member>
    <member name="P:WPILib.PWM.PositiveScaleFactor">
      <summary>
            Gets the scale factor for positive values
            </summary>
    </member>
    <member name="F:WPILib.PWM.PwmDisabled"></member>
    <member name="M:WPILib.PWM.SetBounds(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Set the bounds on the PWM pulse widths.
            </summary>
      <param name="max">The minimum PWM value</param>
      <param name="deadbandMax">The high end of the deadband range</param>
      <param name="center">The center speed (off)</param>
      <param name="deadbandMin">The low end of the deadband range</param>
      <param name="min">The minimum PWM value</param>
    </member>
    <member name="M:WPILib.PWM.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Set the bounds on the PWM values.
            </summary>
      <param name="max">The minimum PWM value</param>
      <param name="deadbandMax">The high end of the deadband range</param>
      <param name="center">The center speed (off)</param>
      <param name="deadbandMin">The low end of the deadband range</param>
      <param name="min">The minimum PWM value</param>
    </member>
    <member name="M:WPILib.PWM.SetPosition(System.Double)">
      <summary>
            Set the PWM value based on a position
            </summary>
      <param name="pos">The position to set the servo between 0.0 and 1.0</param>
    </member>
    <member name="M:WPILib.PWM.SetRaw(System.Int32)">
      <summary>
            Sets the PWM value directly to the FPGA.
            </summary>
      <param name="value">Raw PWM value between 0 and 2000</param>
    </member>
    <member name="M:WPILib.PWM.SetSpeed(System.Double)">
      <summary>
            Set the PWM value based on speed
            </summary>
      <param name="value">The speed to set the speed controller between -1.0 and 1.0</param>
    </member>
    <member name="M:WPILib.PWM.SetZeroLatch">
      <summary>
            Latch Zero on the PWM Port.
            </summary>
    </member>
    <member name="P:WPILib.PWM.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.PWM.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.PWM.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.PWM.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.PWM.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.PWM.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="T:WPILib.PWMSpeedController">
      <summary>
            This is the base class for all PWM Speed Controllers.
            </summary>
    </member>
    <member name="M:WPILib.PWMSpeedController.#ctor(System.Int32)">
      <summary>
            Constructor for a PWM Speed Controller.
            </summary>
      <param name="channel">The PWM Channel that the Speed Controller is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.PWMSpeedController.Get">
      <summary>
            Returns the last value set to this speed controller.
            </summary>
      <returns>The output value between -1.0 and 1.0</returns>
    </member>
    <member name="P:WPILib.PWMSpeedController.Inverted">
      <summary>
            Inverts the direction of the motors rotation.
            </summary>
    </member>
    <member name="M:WPILib.PWMSpeedController.PidWrite(System.Double)">
      <summary>
            Set the output to the value calculated by <see cref="T:WPILib.PIDController" /></summary>
      <param name="value">Output the value calculated by <see cref="T:WPILib.PIDController" /></param>
    </member>
    <member name="M:WPILib.PWMSpeedController.Set(System.Double)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
    </member>
    <member name="M:WPILib.PWMSpeedController.Set(System.Double,System.Byte)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
      <param name="syncGroup">The update group to add this Set() to, pending UpdateSyncGroup().  If 0, update immediately.</param>
    </member>
    <member name="T:WPILib.Relay">
      <summary>
            The Relay class is used to interface with the Relay ports on the RoboRIO. 
            These are usually used with Spike Relays.
            </summary>
    </member>
    <member name="M:WPILib.Relay.#ctor(System.Int32)">
      <summary>
            Creates a new relay, allowing both directions.
            </summary>
      <param name="channel"></param>
    </member>
    <member name="M:WPILib.Relay.#ctor(System.Int32,WPILib.Relay.Direction)">
      <summary>
            Creates a new relay, specifying the directions allowed.
            </summary>
      <param name="channel">The relay channel</param>
      <param name="direction">The directions allowed.</param>
    </member>
    <member name="P:WPILib.Relay.Alive">
      <summary>
            Gets whether the motor is alive.
            </summary>
    </member>
    <member name="P:WPILib.Relay.Channel">
      <summary>
            Gets the channel of the relay.
            </summary>
    </member>
    <member name="P:WPILib.Relay.Description">
      <summary>
            Gets a description for the Safe Motor Object.
            </summary>
    </member>
    <member name="M:WPILib.Relay.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="P:WPILib.Relay.Expiration">
      <summary>
            Gets or Sets the expiration time of the motor in seconds.
            </summary>
    </member>
    <member name="M:WPILib.Relay.Get">
      <summary>
            Gets the latest relay value sent.
            </summary>
      <returns>The latest relay value.</returns>
    </member>
    <member name="M:WPILib.Relay.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Relay.SafetyEnabled">
      <summary>
            Gets or Sets whether safety is enabled.
            </summary>
    </member>
    <member name="M:WPILib.Relay.Set(WPILib.Relay.Value)">
      <summary>
            Sets the relay output.
            </summary>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:WPILib.Relay.SetDirection(WPILib.Relay.Direction)">
      <summary>
            Sets the direction allowed by the relay.
            </summary>
      <param name="direction">The directions to allow.</param>
    </member>
    <member name="P:WPILib.Relay.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Relay.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Relay.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="M:WPILib.Relay.StopMotor">
      <summary>
            Stop the motor associated with this PWM object.
            </summary>
    </member>
    <member name="P:WPILib.Relay.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Relay.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.Relay.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="T:WPILib.Relay.Direction">
      <summary>
            The directions the relay is allowed to output.
            </summary>
    </member>
    <member name="F:WPILib.Relay.Direction.Both">
      <summary>
            Relay allowed in both directions.
            </summary>
    </member>
    <member name="F:WPILib.Relay.Direction.Forward">
      <summary>
            Relay allowed only in forward direction.
            </summary>
    </member>
    <member name="F:WPILib.Relay.Direction.Reverse">
      <summary>
            Relay allowed only in reverse direction.
            </summary>
    </member>
    <member name="T:WPILib.Relay.Value">
      <summary>
            The value to set the relay to.
            </summary>
    </member>
    <member name="F:WPILib.Relay.Value.Off"></member>
    <member name="F:WPILib.Relay.Value.On"></member>
    <member name="F:WPILib.Relay.Value.Forward"></member>
    <member name="F:WPILib.Relay.Value.Reverse"></member>
    <member name="T:WPILib.Resource">
      <summary>
            Track resources in the program.
            </summary>
    </member>
    <member name="M:WPILib.Resource.#ctor(System.Int32)">
      <summary>
            Allocate storage for a new instance of <see cref="T:WPILib.Resource" /></summary>
      <param name="size">The number of blocks to allocate.</param>
    </member>
    <member name="M:WPILib.Resource.Allocate(System.Int32,System.String)">
      <summary>
            Allocate a specific resource value.
            </summary>
      <param name="index">The resource to allocate.</param>
      <param name="error">The string to throw when there is an error.</param>
      <returns>The index of the allocated block.</returns>
      <exception cref="T:WPILib.Exceptions.AllocationException"> If there are no resources
            available to be allocated.</exception>
    </member>
    <member name="M:WPILib.Resource.Allocate(System.String)">
      <summary>
            Allocate a resource.
            </summary>
      <param name="error">The string to throw when there is an error.</param>
      <returns>The index of the allocated block.</returns>
      <exception cref="T:WPILib.Exceptions.AllocationException"> If there are no resources
            available to be allocated.</exception>
    </member>
    <member name="M:WPILib.Resource.Deallocate(System.Int32)">
      <summary>
            Dispose of an allocated resource.
            </summary>
      <param name="index">The index of the resource to free</param>
    </member>
    <member name="M:WPILib.Resource.RestartProgram">
      <summary>
            Clears all allocated resources.
            </summary>
    </member>
    <member name="T:WPILib.RobotBase">
      <summary>
            This is the base for all FRC Robots.
            </summary>
    </member>
    <member name="M:WPILib.RobotBase.#ctor">
      <summary>
            Creates a new RobotBase. When this is called, it initializes NetworkTables and the
            <see cref="T:WPILib.DriverStation" /></summary>
    </member>
    <member name="M:WPILib.RobotBase.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.RobotBase.InitializeHardwareConfiguration">
      <summary>
            Common initialization for all robot programs.
            </summary>
    </member>
    <member name="P:WPILib.RobotBase.IsAutonomous"></member>
    <member name="P:WPILib.RobotBase.IsDisabled"></member>
    <member name="P:WPILib.RobotBase.IsEnabled"></member>
    <member name="P:WPILib.RobotBase.IsNewDataAvailable"></member>
    <member name="P:WPILib.RobotBase.IsOperatorControl"></member>
    <member name="P:WPILib.RobotBase.IsReal"></member>
    <member name="P:WPILib.RobotBase.IsSimulation"></member>
    <member name="P:WPILib.RobotBase.IsTest"></member>
    <member name="F:WPILib.RobotBase.m_ds">
      <summary>
            This holds the <see cref="T:WPILib.DriverStation" /> object for this robot.
            </summary>
    </member>
    <member name="M:WPILib.RobotBase.Main(System.Reflection.Assembly,System.Type)">
      <summary>
            Starting point for robot applications. You can provide either an assembly, or a type. 
            If passed a type, it takes priority.
            </summary>
      <param name="robotAssembly">The assembly the main robot class is located in.</param>
      <param name="robotType">The main robot class type</param>
    </member>
    <member name="M:WPILib.RobotBase.StartCompetition">
      <summary>
            This function is called by the initializer to start the main loop.
            </summary>
    </member>
    <member name="T:WPILib.RobotDrive">
      <summary>
            Utility class for handling robot drive based on a defined motor configuration.
            </summary>
    </member>
    <member name="M:WPILib.RobotDrive.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor for RobotDrive with 2 motors specified with channel numbers.
            </summary>
      <param name="leftMotorChannel">The PWM channel number that drives the left motor</param>
      <param name="rightMotorChannel">The PWM channel number that drives the right motor</param>
    </member>
    <member name="M:WPILib.RobotDrive.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructor for RobotDrive with 4 motors specified with channel numbers.
            </summary>
      <param name="frontLeftMotor">The PWM Channel that drives the Front Left Motor</param>
      <param name="rearLeftMotor">The PWM Channel that drives the Rear Left Motor</param>
      <param name="frontRightMotor">The PWM Channel that drives the Front Right Motor</param>
      <param name="rearRightMotor">The PWM Channel that drives the Rear Right Motor</param>
    </member>
    <member name="M:WPILib.RobotDrive.#ctor(WPILib.Interfaces.ISpeedController,WPILib.Interfaces.ISpeedController)">
      <summary>
            Constructor for RobotDrive with 2 motors specified as <see cref="T:WPILib.Interfaces.ISpeedController" /> objects.
            </summary>
      <param name="leftMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Left Motor</param>
      <param name="rightMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Right Motor</param>
    </member>
    <member name="M:WPILib.RobotDrive.#ctor(WPILib.Interfaces.ISpeedController,WPILib.Interfaces.ISpeedController,WPILib.Interfaces.ISpeedController,WPILib.Interfaces.ISpeedController)">
      <summary>
            Constructor for RobotDrive with 4 motors specified as <see cref="T:WPILib.Interfaces.ISpeedController" /> objects.
            </summary>
      <param name="frontLeftMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Front Left Motor</param>
      <param name="rearLeftMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Rear Left Motor</param>
      <param name="frontRightMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Front Right Motor</param>
      <param name="rearRightMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Rear Right Motor</param>
    </member>
    <member name="P:WPILib.RobotDrive.Alive">
      <summary>
            Gets whether the motor is alive.
            </summary>
    </member>
    <member name="F:WPILib.RobotDrive.AllocatedSpeedControllers"></member>
    <member name="M:WPILib.RobotDrive.ArcadeDrive(System.Double,System.Double,System.Boolean)">
      <summary>
            Provides arcade style driving for the robot.
            </summary>
      <param name="moveValue">The value to use for forward/backwards</param>
      <param name="rotateValue">The value to use to rotate left/right</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="M:WPILib.RobotDrive.ArcadeDrive(WPILib.GenericHID,System.Boolean)">
      <summary>
            Provides arcade style driving for the robot.
            </summary>
      <param name="stick">The joystick to use for drving. Y-axis will be forward/backwards, and X-axis
            will be rotation.</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="M:WPILib.RobotDrive.ArcadeDrive(WPILib.GenericHID,System.Int32,WPILib.GenericHID,System.Int32,System.Boolean)">
      <summary>
            Provides arcade style driving for the robot.
            </summary>
      <param name="moveStick">The Joystick object that represents the forward/backward direction</param>
      <param name="moveAxis">The axis on the moveStick to use.</param>
      <param name="rotateStick">The Joystick object that represents the rotation value</param>
      <param name="rotateAxis">The axis on the rotationStick to use.</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="F:WPILib.RobotDrive.ArcadeRatioCurveReported"></member>
    <member name="F:WPILib.RobotDrive.ArcadeStandardReported"></member>
    <member name="P:WPILib.RobotDrive.CANJaguarSyncGroup">
      <summary>
            Sets the sync group for the motor controllers if they are <see cref="T:WPILib.CANJaguar">CANJaguars</see></summary>
    </member>
    <member name="F:WPILib.RobotDrive.DefaultExpirationTime"></member>
    <member name="F:WPILib.RobotDrive.DefaultMaxOutput"></member>
    <member name="F:WPILib.RobotDrive.DefaultSensitivity"></member>
    <member name="P:WPILib.RobotDrive.Description">
      <summary>
            Gets a description for the Safe Motor Object.
            </summary>
    </member>
    <member name="M:WPILib.RobotDrive.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.RobotDrive.Drive(System.Double,System.Double)">
      <summary>
            Drive the motors at a specified "speed" and "curve".
            </summary>
      <param name="outputMagnitude">The forward component of the magnitude to send to the motors.</param>
      <param name="curve">The rate of turn, constant for different forward speeds.c</param>
    </member>
    <member name="P:WPILib.RobotDrive.Expiration">
      <summary>
            Gets or Sets the expiration time of the motor in seconds.
            </summary>
    </member>
    <member name="F:WPILib.RobotDrive.FrontLeftMotor"></member>
    <member name="F:WPILib.RobotDrive.FrontRightMotor"></member>
    <member name="M:WPILib.RobotDrive.Limit(System.Double)">
      <summary>
            Limit motor values to the -1.0 to +1.0 ranges
            </summary>
      <param name="num">The number to limit</param>
      <returns>The limited value</returns>
    </member>
    <member name="F:WPILib.RobotDrive.MaxNumberOfMotors"></member>
    <member name="P:WPILib.RobotDrive.MaxOutput">
      <summary>
            Sets the maximum output allowed to be outputed by the drive.
            </summary>
    </member>
    <member name="F:WPILib.RobotDrive.MecanumCartesianReported"></member>
    <member name="M:WPILib.RobotDrive.MecanumDrive_Cartesian(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Cartesian drive method for Mecanum wheeled robots
            </summary>
      <param name="x">The speed that the robot should drive in the X direction.</param>
      <param name="y">The speed that the robbot should drive in the Y direction.</param>
      <param name="rotation">The rate of rotation for the robot that is independed of translation.</param>
      <param name="gyroAngle">The current angle reading from the gyro. Use this to implement field-oriented controls.</param>
    </member>
    <member name="M:WPILib.RobotDrive.mecanumDrive_Polar(System.Double,System.Double,System.Double)">
      <summary>
            Polar drive method for Mecanum wheeled robots.
            </summary>
      <param name="magnitude">The magnitude vector</param>
      <param name="direction">The direction vector to drive in.</param>
      <param name="rotation">The rate of rotation. This is independant from translation.</param>
    </member>
    <member name="F:WPILib.RobotDrive.MecanumPolarReported"></member>
    <member name="M:WPILib.RobotDrive.Normalize(System.Collections.Generic.IList{System.Double})">
      <summary>
            Normalized all wheel speeds if the magnitude of any wheel is greater the 1.0.
            </summary>
      <param name="wheelSpeeds">The wheel speeds to normalize</param>
    </member>
    <member name="P:WPILib.RobotDrive.NumMotors">
      <summary>
            Gets the number of motors in the drive.
            </summary>
    </member>
    <member name="F:WPILib.RobotDrive.RearLeftMotor"></member>
    <member name="F:WPILib.RobotDrive.RearRightMotor"></member>
    <member name="M:WPILib.RobotDrive.RotateVector(System.Double@,System.Double@,System.Double)">
      <summary>
            Rotates a vector in Cartesian Space
            </summary>
      <param name="x">The X vector</param>
      <param name="y">The Y vector</param>
      <param name="angle">The angle to rotate in degrees</param>
    </member>
    <member name="P:WPILib.RobotDrive.SafetyEnabled">
      <summary>
            Gets or Sets whether safety is enabled.
            </summary>
    </member>
    <member name="F:WPILib.RobotDrive.SafetyHelper"></member>
    <member name="P:WPILib.RobotDrive.Sensitivity">
      <summary>
            Sets the turning sensitivity for the <see cref="M:WPILib.RobotDrive.Drive(System.Double,System.Double)" /> function.
            </summary>
    </member>
    <member name="M:WPILib.RobotDrive.SetInvertedMotor(WPILib.MotorType,System.Boolean)">
      <summary>
            Invert a motor direction
            </summary>
      <param name="motor">The motor index to invert</param>
      <param name="isInverted">True if the motor should be inverted.</param>
    </member>
    <member name="M:WPILib.RobotDrive.SetLeftRightMotorOutputs(System.Double,System.Double)">
      <summary>
            Sets the speed of the left and right drive motors
            </summary>
      <param name="leftOutput">The speed to send to the left side.</param>
      <param name="rightOutput">The speed to send to the right side.</param>
    </member>
    <member name="M:WPILib.RobotDrive.StopMotor">
      <summary>
            Stop the motor associated with this PWM object.
            </summary>
    </member>
    <member name="F:WPILib.RobotDrive.SyncGroup"></member>
    <member name="M:WPILib.RobotDrive.TankDrive(System.Double,System.Double,System.Boolean)">
      <summary>
            Provide tank style driving for the robot.
            </summary>
      <param name="leftValue">The value for the left side</param>
      <param name="rightValue">The value for the right side</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="M:WPILib.RobotDrive.TankDrive(WPILib.GenericHID,System.Int32,WPILib.GenericHID,System.Int32,System.Boolean)">
      <summary>
            Provide tank style driving for the robot.
            </summary>
      <param name="leftStick">The joystick to use for the left side.</param>
      <param name="leftAxis">The axis to select on the left joystick.</param>
      <param name="rightStick">The joystick to use for the right side.</param>
      <param name="rightAxis">The axis to select on the right joystick</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="M:WPILib.RobotDrive.TankDrive(WPILib.GenericHID,WPILib.GenericHID,System.Boolean)">
      <summary>
            Provide tank style driving for the robot.
            </summary>
      <param name="leftStick">The joystick to control the left side of the robot.</param>
      <param name="rightStick">The joystick to control the right side of the robot.</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="F:WPILib.RobotDrive.TankReported"></member>
    <member name="T:WPILib.RobotState">
      <summary>
            High level robot state reporting.
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Autonomous">
      <summary>
            Gets if robot is in autonomous.
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Disabled">
      <summary>
            Gets if robot is disabled
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Enabled">
      <summary>
            Gets if robot is enabled.
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Implementation">
      <summary>
            Sets the implementation of the Robot State
            </summary>
    </member>
    <member name="P:WPILib.RobotState.OperatorControl">
      <summary>
            Gets if robot is operator control.
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Test">
      <summary>
            Gets if robot is in test
            </summary>
    </member>
    <member name="T:WPILib.RobotState.Interface">
      <summary>
            Interface for robot state reporters.
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Interface.Autonomous">
      <summary>
            autonomous
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Interface.Disabled">
      <summary>
            disabled
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Interface.Enabled">
      <summary>
            enabled
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Interface.OperatorControl">
      <summary>
            operater control
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Interface.Test">
      <summary>
            test
            </summary>
    </member>
    <member name="T:WPILib.SafePWM">
      <summary>
            This class is used to create PWM devices that implement <see cref="T:WPILib.Interfaces.IMotorSafety" />.
            This will cause a watchdog to be created for the object, and if it is
            not updated within a certain period, it will be stopped.
            </summary>
    </member>
    <member name="M:WPILib.SafePWM.#ctor(System.Int32)">
      <summary>
            Creates a new SafePWM object.
            </summary>
      <param name="channel">The PWM Channel that the Object is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="P:WPILib.SafePWM.Alive">
      <summary>
            Gets whether the motor is alive.
            </summary>
    </member>
    <member name="P:WPILib.SafePWM.Description">
      <summary>
            Gets a description for the Safe Motor Object.
            </summary>
    </member>
    <member name="M:WPILib.SafePWM.Disable">
      <summary>
            Disables the PWM output.
            </summary>
    </member>
    <member name="P:WPILib.SafePWM.Expiration">
      <summary>
            Gets or Sets the expiration time of the motor in seconds.
            </summary>
    </member>
    <member name="M:WPILib.SafePWM.Feed">
      <summary>
            Feeds the Motor Safety Timer
            </summary>
    </member>
    <member name="P:WPILib.SafePWM.SafetyEnabled">
      <summary>
            Gets or Sets whether safety is enabled.
            </summary>
    </member>
    <member name="M:WPILib.SafePWM.StopMotor">
      <summary>
            Stop the motor associated with this PWM object.
            </summary>
    </member>
    <member name="T:WPILib.SampleRobot">
      <summary>
            A simple robot base class that knows the standard competition states. 
            (disabled, autonomous, or operator controlled)
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.#ctor">
      <summary>
            Creates a new SampleRobot
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.Autonomous">
      <summary>
            Autonomous should go here.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.Disabled">
      <summary>
            Disabled should go here.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.OperatorControl">
      <summary>
            Operator control (tele-operated) code should go here.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.RobotInit">
      <summary>
            Robot-wide initialization code should go here.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.RobotMain">
      <summary>
            Robot main program for free-form programs.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.StartCompetition">
      <summary>
            Start a competition.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.Test">
      <summary>
            Test code should go here.
            </summary>
    </member>
    <member name="T:WPILib.SD540">
      <summary>
            MindSensors SD540 Speed Controller.
            </summary>
    </member>
    <member name="M:WPILib.SD540.#ctor(System.Int32)">
      <summary>
            Creates a new <see cref="T:WPILib.SD540" />.
            </summary>
      <param name="channel">The PWM Channel that the SD540 is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.SD540.InitSD540">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.SensorBase">
      <summary>
            This class is the base for all sensors.
            </summary>
    </member>
    <member name="M:WPILib.SensorBase.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.SensorBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.SensorBase.AnalogInputChannels"></member>
    <member name="F:WPILib.SensorBase.AnalogOutputChannels"></member>
    <member name="M:WPILib.SensorBase.CheckAnalogInputChannel(System.Int32)">
      <summary>
            Check that the analog channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckAnalogOutputChannel(System.Int32)">
      <summary>
            Check that the analog output channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckDigitalChannel(System.Int32)">
      <summary>
            Check that the digital channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckPDPChannel(System.Int32)">
      <summary>
            Check that the power distribution channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckPDPModule(System.Int32)">
      <summary>
            Check that the PDP CAN ID is in valid.
            </summary>
      <param name="module">The CAN ID to check</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckPwmChannel(System.Int32)">
      <summary>
            Check that the PWM channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckRelayChannel(System.Int32)">
      <summary>
            Check that the relay channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckSolenoidChannel(System.Int32)">
      <summary>
            Check that the solenoid channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckSolenoidModule(System.Int32)">
      <summary>
            Verify that the solenoid module is correct
            </summary>
      <param name="moduleNumber">The module number to check.</param>
    </member>
    <member name="P:WPILib.SensorBase.DefaultSolenoidModule">
      <summary>
            Gets or Sets the default solenoid module number;
            </summary>
    </member>
    <member name="F:WPILib.SensorBase.DigitalChannels"></member>
    <member name="M:WPILib.SensorBase.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="F:WPILib.SensorBase.PDPChannels"></member>
    <member name="F:WPILib.SensorBase.PDPModules"></member>
    <member name="F:WPILib.SensorBase.PwmChannels"></member>
    <member name="F:WPILib.SensorBase.RelayChannels"></member>
    <member name="F:WPILib.SensorBase.SolenoidChannels"></member>
    <member name="F:WPILib.SensorBase.SolenoidModules"></member>
    <member name="F:WPILib.SensorBase.SystemClockTicksPerMicrosecond"></member>
    <member name="T:WPILib.SerialPort">
      <summary>
            Driver for the serial ports onboard the RoboRIO.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.#ctor(System.Int32,WPILib.SerialPort.Port,System.Int32,WPILib.SerialPort.Parity,WPILib.SerialPort.StopBits)">
      <summary>
            Creates an instance of the Serial Port class.
            </summary>
      <param name="baudRate">The baud rate to configure the serial port at.</param>
      <param name="port">The serial port to use.</param>
      <param name="dataBits">The number of data bits per transfer, between 5 and 8</param>
      <param name="parity">The type of parity checking to use</param>
      <param name="stopBits">The number of stop bits to use</param>
    </member>
    <member name="M:WPILib.SerialPort.DisableTermination">
      <summary>
            Disables termination
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.SerialPort.EnableTermination">
      <summary>
            Enables termination with the default terminator '\n'.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.EnableTermination(System.Char)">
      <summary>
            Enables termination with the specified terminator
            </summary>
      <param name="terminator">The character to use for termination.</param>
    </member>
    <member name="P:WPILib.SerialPort.FlowControl">
      <summary>
            Sets the type of flow control to enable on this port.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.Flush">
      <summary>
            Force the output buffer to be written to the port.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.GetBytesReceived">
      <summary>
            Gets the number of bytes current available to read from the serial port.
            </summary>
      <returns>The number of bytes received.</returns>
    </member>
    <member name="M:WPILib.SerialPort.Read(System.Int32)">
      <summary>
            Read raw bytes out of the buffer.
            </summary>
      <param name="count">The maximum number of bytes to read.</param>
      <returns>An array of the read bytes</returns>
    </member>
    <member name="P:WPILib.SerialPort.ReadBufferSize">
      <summary>
            Sets the size of the input buffer.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.ReadString">
      <summary>
            Reads a string out of the buffer, reading the full buffer.
            </summary>
      <returns>The read string</returns>
    </member>
    <member name="M:WPILib.SerialPort.ReadString(System.Int32)">
      <summary>
            Reads a string out of the buffer.
            </summary>
      <param name="count">The number of characters to read into the string</param>
      <returns>The read string</returns>
    </member>
    <member name="M:WPILib.SerialPort.Reset">
      <summary>
            Reset the serial port driver to a know state.
            </summary>
    </member>
    <member name="P:WPILib.SerialPort.Timeout">
      <summary>
            Configures the timeout of the serial port.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.Write(System.Byte[],System.Int32)">
      <summary>
            Write raw bytes to the serial port.
            </summary>
      <param name="buffer">The buffer of bytes to write.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <returns>The number of bytes actually written to the port.</returns>
    </member>
    <member name="P:WPILib.SerialPort.WriteBufferMode">
      <summary>
            Sets the flushing behavior of the output buffer
            </summary>
    </member>
    <member name="P:WPILib.SerialPort.WriteBufferSize">
      <summary>
            Sets the size of the output buffer.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.WriteString(System.String)">
      <summary>
            Writes a string to the serial port
            </summary>
      <param name="data">The string to write to the serial port.</param>
      <returns>The number of bytes written  to the port.</returns>
    </member>
    <member name="T:WPILib.SerialPort.FlowControlEnum">
      <summary>
            Specifies the FlowControl settings for a <see cref="T:WPILib.SerialPort" /> object
            </summary>
    </member>
    <member name="F:WPILib.SerialPort.FlowControlEnum.None"></member>
    <member name="F:WPILib.SerialPort.FlowControlEnum.XonXoff"></member>
    <member name="F:WPILib.SerialPort.FlowControlEnum.RtsCts"></member>
    <member name="F:WPILib.SerialPort.FlowControlEnum.DtrDsr"></member>
    <member name="T:WPILib.SerialPort.Parity">
      <summary>
            Specifies the parity bit for a <see cref="T:WPILib.SerialPort" /> object.
            </summary>
    </member>
    <member name="F:WPILib.SerialPort.Parity.None"></member>
    <member name="F:WPILib.SerialPort.Parity.Odd"></member>
    <member name="F:WPILib.SerialPort.Parity.Even"></member>
    <member name="F:WPILib.SerialPort.Parity.Mark"></member>
    <member name="F:WPILib.SerialPort.Parity.Space"></member>
    <member name="T:WPILib.SerialPort.Port">
      <summary>
            Specifies the serial port to use on the RoboRIO.
            </summary>
    </member>
    <member name="F:WPILib.SerialPort.Port.Onboard"></member>
    <member name="F:WPILib.SerialPort.Port.MXP"></member>
    <member name="F:WPILib.SerialPort.Port.USB"></member>
    <member name="T:WPILib.SerialPort.StopBits">
      <summary>
            Specifies the number of stop bits used for a <see cref="T:WPILib.SerialPort" /> object.
            </summary>
    </member>
    <member name="F:WPILib.SerialPort.StopBits.One"></member>
    <member name="F:WPILib.SerialPort.StopBits.OnePointFive"></member>
    <member name="F:WPILib.SerialPort.StopBits.Two"></member>
    <member name="T:WPILib.SerialPort.WriteBufferModeEnum">
      <summary>
            Specifies the WriteBufferMode for a <see cref="T:WPILib.SerialPort" /> object.
            </summary>
    </member>
    <member name="F:WPILib.SerialPort.WriteBufferModeEnum.FlushOnAccess"></member>
    <member name="F:WPILib.SerialPort.WriteBufferModeEnum.FlushWhenFull"></member>
    <member name="T:WPILib.Servo">
      <summary>
            This class is used for interfacing with 
            </summary>
    </member>
    <member name="M:WPILib.Servo.#ctor(System.Int32)">
      <summary>
            Creates a new Servo.
            </summary>
      <param name="channel">The PWM Channel that the Servo is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="F:WPILib.Servo.DefaultMaxServoPWM">
      <summary>
            The default max value for the servo.
            </summary>
    </member>
    <member name="F:WPILib.Servo.DefaultMinServoPWM">
      <summary>
            The default min value for the servo.
            </summary>
    </member>
    <member name="M:WPILib.Servo.Get">
      <summary>
            Gets the latest absolute value of the servo.
            </summary>
      <returns>The latest absolute setpoint between 0.0 and 1.0</returns>
    </member>
    <member name="M:WPILib.Servo.GetAngle">
      <summary>
            Gets the latest servo angle.
            </summary>
      <returns>The latest angle in degrees between 0 and 180</returns>
    </member>
    <member name="M:WPILib.Servo.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.Servo.Set(System.Double)">
      <summary>
            Sets the absolute value of the servo.
            </summary>
      <param name="value">The absolute setpoint between 0.0 and 1.0</param>
    </member>
    <member name="M:WPILib.Servo.SetAngle(System.Double)">
      <summary>
            Sets the servo angle.
            </summary>
      <param name="degrees">The angle in degrees between 0 and 180</param>
    </member>
    <member name="P:WPILib.Servo.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Servo.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Servo.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="M:WPILib.Servo.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.Servo.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="T:WPILib.Solenoid">
      <summary>
            Solenoid class for running high voltage digital output.
            </summary>
    </member>
    <member name="M:WPILib.Solenoid.#ctor(System.Int32)">
      <summary>
            Constructor using the default PCM ID (0)
            </summary>
      <param name="channel">The channel on the PCM to control (0..7).</param>
    </member>
    <member name="M:WPILib.Solenoid.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor.
            </summary>
      <param name="moduleNumber">The CAN ID of the PCM the solenoid is attached to.</param>
      <param name="channel">The channel on the PCM to control (0..7).</param>
    </member>
    <member name="M:WPILib.Solenoid.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.Solenoid.Get">
      <summary>
            Read the current value of the solenoid.
            </summary>
      <returns>The current value of the solenoid.</returns>
    </member>
    <member name="M:WPILib.Solenoid.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.Solenoid.IsBlackListed">
      <summary>
            Check if solenoid is blacklisted.
            </summary>
      <returns>If solenoid is disabled due to short.</returns>
    </member>
    <member name="M:WPILib.Solenoid.Set(System.Boolean)">
      <summary>
            Set the value of a solenoid
            </summary>
      <param name="on">Turn the solenoid output off or on.</param>
    </member>
    <member name="P:WPILib.Solenoid.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Solenoid.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Solenoid.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.Solenoid.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Solenoid.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.Solenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="T:WPILib.SolenoidBase">
      <summary>
            The SolenoidBase class is the common base class for the <see cref="T:WPILib.Solenoid" />
            and <see cref="T:WPILib.DoubleSolenoid" /> classes.
            </summary>
    </member>
    <member name="M:WPILib.SolenoidBase.#ctor(System.Int32)">
      <summary>
            Creates a new <see cref="T:WPILib.SolenoidBase" />.
            </summary>
      <param name="moduleNumber">The PCM CAN ID</param>
    </member>
    <member name="F:WPILib.SolenoidBase.Allocated">
      <summary>
            The allocated resources for the solenoid.
            </summary>
    </member>
    <member name="M:WPILib.SolenoidBase.ClearAllPCMStickyFaults">
      <summary>
            Clear all sticky faults inside PCM that Compressor is wired to. </summary>
    </member>
    <member name="M:WPILib.SolenoidBase.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.SolenoidBase.GetAll">
      <summary>
            Read all 8 solenoids from the module used byt this solenoid as a single byte
            </summary>
      <returns>The current value of all 8 solenoids on thsis module.</returns>
    </member>
    <member name="M:WPILib.SolenoidBase.GetPCMSolenoidBlackList">
      <summary>
            Reads complete solenoid blacklist for all 8 solenoids as a single byte.
            </summary>
      <returns>The solenoid blacklist of all 8 solenoids on the module.</returns>
    </member>
    <member name="M:WPILib.SolenoidBase.GetPCMSolenoidVoltageFault">
      <summary>
            Returns if PCM is in a fault state
            </summary>
      <returns>true if PCM is in fault state : The common highside solenoid voltage rail is too low, most likely a solenoid channel is shorted.</returns>
    </member>
    <member name="M:WPILib.SolenoidBase.GetPCMSolenoidVoltageStickyFault">
      <summary>
            Returns if a PCM sticky fault is set.
            </summary>
      <returns>True if PCM sticky fault is set : The common highside solenoid voltage rail is too low, most likely a solenoid channel is shorted.</returns>
    </member>
    <member name="F:WPILib.SolenoidBase.ModuleNumber">
      <summary>
            The module number for the solenoid.
            </summary>
    </member>
    <member name="T:WPILib.Spark">
      <summary>
            REV Robotics SPARK Speed Controller
            </summary>
    </member>
    <member name="M:WPILib.Spark.#ctor(System.Int32)">
      <summary>
            Creates a new <see cref="T:WPILib.Spark" /></summary>
      <param name="channel">The PWM Channel that the Spark is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.Spark.InitSpark">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.SPI">
      <summary>
            This class is used to interface with the SPI ports on the RoboRIO
            </summary>
    </member>
    <member name="M:WPILib.SPI.#ctor(WPILib.SPI.Port)">
      <summary>
            Creates a new SPI class.
            </summary>
      <param name="port">The physical SPI Port</param>
    </member>
    <member name="M:WPILib.SPI.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.SPI.FreeAccumulator">
      <summary>
            Frees the accumulator.
            </summary>
    </member>
    <member name="M:WPILib.SPI.GetAccumulatorAverage">
      <summary>
            Read the average of the accumulated value.
            </summary>
      <returns>The accumulated average value (value / count)</returns>
    </member>
    <member name="M:WPILib.SPI.GetAccumulatorCount">
      <summary>
            Read the number of accumulated values.
            </summary>
      <returns>The number of times samples from the channel were accumulated.</returns>
    </member>
    <member name="M:WPILib.SPI.GetAccumulatorLastValue">
      <summary>
            Read the last value read by the accumulator engine.
            </summary>
      <returns>The last value from the accumulator</returns>
    </member>
    <member name="M:WPILib.SPI.GetAccumulatorOutput(System.Int64@,System.UInt32@)">
      <summary>
            Read the accumulated value and the number of accumulated values atomically
            </summary>
      <param name="value">The 64 bit accumulated output</param>
      <param name="count">The number of accumulation cycles</param>
    </member>
    <member name="M:WPILib.SPI.GetAccumulatorValue">
      <summary>
            Read the accumulated value.
            </summary>
      <returns>The 64-bit value accumulated since the last Reset().</returns>
    </member>
    <member name="M:WPILib.SPI.InitAccumulator(System.Double,System.UInt32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Initialize the accumulator.
            </summary>
      <param name="period">Time between reads.</param>
      <param name="cmd">SPI command to send to request data</param>
      <param name="xferSize">SPI transfer size, in bytes</param>
      <param name="validMask">Mask to apply to received data for validity checking.</param>
      <param name="validValue">After validMask is applied, required matching value for
            validity checking.</param>
      <param name="dataShift">Bit shift to apply to received data to get actual data value</param>
      <param name="dataSize">Size (int bits) of data field</param>
      <param name="isSigned">Is data field signed?</param>
      <param name="bigEndian">Is device big endian?</param>
    </member>
    <member name="M:WPILib.SPI.Read(System.Boolean,System.Byte[],System.Int32)">
      <summary>
            Reads a word from the receive FIFO.
            </summary>
      <param name="initiate">If true, this method pushes "0" into the transmit buffer and 
            initiates a transfer.</param>
      <param name="dataReceived">An array to hold the data received.</param>
      <param name="size">The size of data to receive.</param>
      <returns></returns>
    </member>
    <member name="M:WPILib.SPI.ResetAccumulator">
      <summary>
            Resets the accumulator to zero.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetAccumulatorCenter(System.Int32)">
      <summary>
            Sets the center value of the accumulator.
            </summary>
      <param name="center">The center value to set.</param>
    </member>
    <member name="M:WPILib.SPI.SetAccumulatorDeadband(System.Int32)">
      <summary>
            Sets the accumulator's deadband.
            </summary>
      <param name="deadband">The deadband to set.</param>
    </member>
    <member name="M:WPILib.SPI.SetChipSelectActiveHigh">
      <summary>
            Configure the chip select line to be active high.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetChipSelectActiveLow">
      <summary>
            Configure the chip select line to be active low.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetClockActiveHigh">
      <summary>
            Configure the clock line to be active low.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetClockActiveLow">
      <summary>
            Configure the clock line to be active low.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetClockRate(System.Int32)">
      <summary>
            Sets the Generated SPI Clock Rate
            </summary>
      <param name="hz">Rate in Hz.</param>
    </member>
    <member name="M:WPILib.SPI.SetLSBFirst">
      <summary>
            Set the port to send and receive the LSB First.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetMSBFirst">
      <summary>
            Set the port to send and receive the MSB First.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetSampleDataOnFalling">
      <summary>
            Configure the data to be stable on the falling edge and changing on the rising edge.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetSampleDataOnRising">
      <summary>
            Configure the data to be stable on the rising edge and changing on the falling edge.
            </summary>
    </member>
    <member name="M:WPILib.SPI.Transaction(System.Byte[],System.Byte[],System.Int32)">
      <summary>
            Perform a simultaneous read/write transaction with the device.
            </summary>
      <param name="dataToSend">The data to be written out to the device.</param>
      <param name="dataReceived">Buffer to receive data from the device.</param>
      <param name="size">The length of the transaction, in bytes.</param>
      <returns></returns>
    </member>
    <member name="M:WPILib.SPI.Write(System.Byte[],System.Int32)">
      <summary>
            Writes the data to the slave device.
            </summary>
      <param name="dataToSend">The byte array to send.</param>
      <param name="size">The size of the byte array.</param>
      <returns></returns>
    </member>
    <member name="T:WPILib.SPI.Port">
      <summary>
            The SPI ports available
            </summary>
    </member>
    <member name="F:WPILib.SPI.Port.OnboardCS0"></member>
    <member name="F:WPILib.SPI.Port.OnboardCS1"></member>
    <member name="F:WPILib.SPI.Port.OnboardCS2"></member>
    <member name="F:WPILib.SPI.Port.OnboardCS3"></member>
    <member name="F:WPILib.SPI.Port.MXP"></member>
    <member name="T:WPILib.Talon">
      <summary>
            Cross the Road Electronics (CTRE) Talon and Talon SR Speed Controller
            </summary>
    </member>
    <member name="M:WPILib.Talon.#ctor(System.Int32)">
      <summary>
            Creates a new Talon or Talon SR Motor Controller.
            </summary>
      <param name="channel">The PWM Channel that the Talon is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.Talon.InitTalon">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.TalonSRX">
      <summary>
            Cross the Road Electronics (CTRE) Talon SRX Speed Controller with PWM control</summary>
    </member>
    <member name="M:WPILib.TalonSRX.#ctor(System.Int32)">
      <summary>
            Creates a new Talon SRX Motor Controller in PWM mode.
            </summary>
      <param name="channel">The PWM Channel that the TalonSRX is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.TalonSRX.InitTalonSRX">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.Timer">
      <summary>
            This class is used to create timers
            </summary>
    </member>
    <member name="M:WPILib.Timer.#ctor">
      <summary>
            Creates a new Timer
            </summary>
    </member>
    <member name="M:WPILib.Timer.Delay(System.Double)">
      <summary>
            Pause the thread for a specified time.</summary>
      <param name="seconds">Length of time to pause (seconds)</param>
    </member>
    <member name="M:WPILib.Timer.Get">
      <summary>
            Get the current time from the timer.</summary>
      <returns>Current time value for this timer in seconds</returns>
    </member>
    <member name="M:WPILib.Timer.GetFPGATimestamp">
      <summary>
            Return the system clock time in seconds.
            </summary>
      <returns>The FPGA timestamp in seconds.</returns>
    </member>
    <member name="M:WPILib.Timer.GetMatchTime">
      <summary>
            Return the approximate match time since the beginning of autonomous </summary>
      <returns>Match time since the beginning of autonomous.</returns>
    </member>
    <member name="M:WPILib.Timer.HasPeriodPassed(System.Double)">
      <summary>
            Check if the period specified has passed and if it has, advance the start
            time by that period.</summary>
      <param name="period">The period to check for (in seconds)</param>
      <returns>If the period has passed.</returns>
    </member>
    <member name="M:WPILib.Timer.PreciseDelay(System.Double)">
      <summary>
            Puases the thread for a specific time using a SpinLoop
            </summary>
      <param name="seconds"></param>
    </member>
    <member name="M:WPILib.Timer.Reset">
      <summary>
            Reset the timer by setting the time to 0.
            </summary>
    </member>
    <member name="M:WPILib.Timer.Start">
      <summary>
            Start the timer running.
            </summary>
    </member>
    <member name="M:WPILib.Timer.Stop">
      <summary>
            Stop the timer. </summary>
    </member>
    <member name="T:WPILib.Timer.IStaticTimerInterface">
      <summary>
            This interface is used to specify the static timer functions to be used by the <see cref="T:WPILib.Timer" /> class.
            </summary>
    </member>
    <member name="M:WPILib.Timer.IStaticTimerInterface.Delay(System.Double)">
      <summary>
            Pause the thread for a specified time
            </summary>
      <param name="seconds">Length of time to pause</param>
    </member>
    <member name="M:WPILib.Timer.IStaticTimerInterface.GetFPGATimestamp">
      <summary>
            Returns the system clock time in seconds.
            </summary>
    </member>
    <member name="M:WPILib.Timer.IStaticTimerInterface.GetMatchTime">
      <summary>
            Returns the Match Time in seconds
            </summary>
    </member>
    <member name="M:WPILib.Timer.IStaticTimerInterface.NewTimer">
      <summary>
            Creates a new Timer
            </summary>
      <returns>A new timer</returns>
    </member>
    <member name="T:WPILib.Timer.ITimerInterface">
      <summary>
            This interface is used to specify the instance timer functions to be used by the <see cref="T:WPILib.Timer" /> class.
            </summary>
    </member>
    <member name="M:WPILib.Timer.ITimerInterface.Get">
      <summary>
            Get the current time from the timer
            </summary>
      <returns>Current time in seconds</returns>
    </member>
    <member name="M:WPILib.Timer.ITimerInterface.HasPeriodPassed(System.Double)">
      <summary>
            Check if the specified period has passed.
            If so, advance the start time by that period.
            </summary>
      <param name="period">The period to check for (seconds)</param>
      <returns>If the period has passed.</returns>
    </member>
    <member name="M:WPILib.Timer.ITimerInterface.Reset">
      <summary>
            Reset the timer, and start the timer.
            </summary>
    </member>
    <member name="M:WPILib.Timer.ITimerInterface.Start">
      <summary>
            Start the timer running
            </summary>
    </member>
    <member name="M:WPILib.Timer.ITimerInterface.Stop">
      <summary>
            Stop the timer
            </summary>
    </member>
    <member name="T:WPILib.Ultrasonic">
      <summary>
            Ultrasonic rangefinder class, for digital ultransonics. Not for the MaxBotix Sensors
            </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.#ctor(System.Int32,System.Int32,WPILib.Ultrasonic.Unit)">
      <summary>
            Create an instance of the <see cref="T:WPILib.Ultrasonic" /> Sensor.
            </summary>
      <param name="pingChannel">The digital output channel that sends the pulse 
            to initiate the sensor sending the ping</param>
      <param name="echoChannel">The digital input channel the receives the echo.
            The lenght of time that the echo is high represents the round trip time of 
            the ping, and the distance/</param>
      <param name="units">The units returns in either <see cref="F:WPILib.Ultrasonic.Unit.Inches">Inches</see>
            or <see cref="F:WPILib.Ultrasonic.Unit.Millimeters">Millimeters</see>. Default is inches.</param>
    </member>
    <member name="M:WPILib.Ultrasonic.#ctor(WPILib.DigitalOutput,WPILib.DigitalInput,WPILib.Ultrasonic.Unit)">
      <summary>
            Create an instance of the <see cref="T:WPILib.Ultrasonic" /> Sensor.
            </summary>
      <param name="pingChannel">The <see cref="T:WPILib.DigitalOutput" /> channel that sends the pulse 
            to initiate the sensor sending the ping</param>
      <param name="echoChannel">The <see cref="T:WPILib.DigitalInput" /> channel the receives the echo.
            The lenght of time that the echo is high represents the round trip time of 
            the ping, and the distance/</param>
      <param name="units">The units returns in either <see cref="F:WPILib.Ultrasonic.Unit.Inches">Inches</see>
            or <see cref="F:WPILib.Ultrasonic.Unit.Millimeters">Millimeters</see></param>
    </member>
    <member name="P:WPILib.Ultrasonic.AutomaticModeEnabled">
      <summary>
            Get or Set whether automatic mode is enabled.
            </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.Dispose">
      <summary>
            Destructor for the ultrasonic sensor.
            </summary>
    </member>
    <member name="P:WPILib.Ultrasonic.DistanceUnits">
      <summary>
            Gets or Sets the current <see cref="T:WPILib.Ultrasonic.Unit">Distance Unit</see> that is used for the 
            <see cref="T:WPILib.Interfaces.IPIDSource" /> base object.
            </summary>
    </member>
    <member name="P:WPILib.Ultrasonic.Enabled">
      <summary>
            Gets or Sets whether the ultrasonic is enabled.
            </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.GetDistanceUnits">
      <summary>
            Get the current <see cref="T:WPILib.Ultrasonic.Unit">Distance Unit</see> that is used for the
            <see cref="T:WPILib.Interfaces.IPIDSource" /> base object.
            </summary>
      <returns>The type of <see cref="T:WPILib.Ultrasonic.Unit">Distance Unit</see> that is being used.</returns>
    </member>
    <member name="M:WPILib.Ultrasonic.GetEnabled">
      <summary>
            Gets if the ultrasonic is enabled
            </summary>
      <returns>true if enabled</returns>
    </member>
    <member name="M:WPILib.Ultrasonic.GetRangeInches">
      <summary>
            Get the range in inches from the ultrasonic sensor.
            </summary>
      <returns>Range in inches of the target returned from the ultrasonic sensor. 
            Returns 0 if there is no valid value.</returns>
    </member>
    <member name="M:WPILib.Ultrasonic.GetRangeMM">
      <summary>
            Get the range in millimeters from the ultrasonic sensor.
            </summary>
      <returns>Range in millimeters of the target returned from the ultrasonic sensor. 
            Returns 0 if there is no valid value.</returns>
    </member>
    <member name="M:WPILib.Ultrasonic.InitTable(NetworkTables.Tables.ITable)"></member>
    <member name="M:WPILib.Ultrasonic.IsRangeValid">
      <summary>
            Check if there is a valid range measurement.
            </summary>
      <returns>If the range is valid.</returns>
    </member>
    <member name="M:WPILib.Ultrasonic.PidGet">
      <summary>
            Get the result to use in PIDController
            </summary>
      <returns>The result to use in PIDController</returns>
    </member>
    <member name="P:WPILib.Ultrasonic.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.Ping">
      <summary>
            Ping a single ultrasonic sensor.
            </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.SetAutomaticMode(System.Boolean)">
      <summary>
            Turn Automatic mode on/off.
            </summary>
      <param name="enabling">Set to true to enable round robin scheduling.</param>
    </member>
    <member name="M:WPILib.Ultrasonic.SetDistanceUnits(WPILib.Ultrasonic.Unit)">
      <summary>
            Set the current Distance Unit that should be used for the <see cref="T:WPILib.Interfaces.IPIDSource" />
            base object.
            </summary>
      <param name="units">The <see cref="T:WPILib.Ultrasonic.Unit">Distance Unit</see> to use.</param>
    </member>
    <member name="M:WPILib.Ultrasonic.SetEnabled(System.Boolean)">
      <summary>
            Set if the ultrasonic is enabled.
            </summary>
      <param name="enabled">true if enabled</param>
    </member>
    <member name="P:WPILib.Ultrasonic.SmartDashboardType"></member>
    <member name="M:WPILib.Ultrasonic.StartLiveWindowMode"></member>
    <member name="M:WPILib.Ultrasonic.StopLiveWindowMode"></member>
    <member name="P:WPILib.Ultrasonic.Table"></member>
    <member name="M:WPILib.Ultrasonic.UpdateTable"></member>
    <member name="T:WPILib.Ultrasonic.Unit">
      <summary>
            The unit for measurements to return.
            </summary>
    </member>
    <member name="F:WPILib.Ultrasonic.Unit.Inches"></member>
    <member name="F:WPILib.Ultrasonic.Unit.Millimeters"></member>
    <member name="T:WPILib.Utility">
      <summary>
            Contains global utility functions
            </summary>
    </member>
    <member name="M:WPILib.Utility.CheckStatus(System.Int32,System.String,System.String,System.Int32)">
      <summary>
            This is used to check the status's returned from the HAL functions.
            </summary>
      <param name="status"></param>
      <param name="memberName"></param>
      <param name="filePath"></param>
      <param name="lineNumber"></param>
    </member>
    <member name="M:WPILib.Utility.GetFPGARevision">
      <summary>
            Return the FPGA Revision number. The format of the revision is 3 numbers. </summary>
    </member>
    <member name="M:WPILib.Utility.GetFPGATime">
      <summary>
            Read the microsecond timer from the FPGA
            </summary>
    </member>
    <member name="M:WPILib.Utility.GetFPGAVersion">
      <summary>
            Return the FPGA Version number. For now, expect this to be 2015.
            </summary>
    </member>
    <member name="M:WPILib.Utility.GetUserButton">
      <summary>
            Get the state of the "USER" button on the RoboRIO
            </summary>
      <returns>True if the button is currently pressed down</returns>
    </member>
    <member name="T:WPILib.Victor">
      <summary>
            VEX Robotics Victor 888 Speed Controller
            </summary>
    </member>
    <member name="M:WPILib.Victor.#ctor(System.Int32)">
      <summary>
            Creates a new Victor 888 Motor Controller.
            </summary>
      <param name="channel">The PWM Channel that the Victor is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.Victor.InitVictor">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.VictorSP">
      <summary>
            VEX Robotics Victor SP Speed Controller
            </summary>
    </member>
    <member name="M:WPILib.VictorSP.#ctor(System.Int32)">
      <summary>
            Creates a new VictorSP Motor Controller.
            </summary>
      <param name="channel">The PWM Channel that the VictorSP is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.VictorSP.InitVictorSP">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.WaitResult">
      <summary>
            The Result returned from a synchronous interrupt
            </summary>
    </member>
    <member name="F:WPILib.WaitResult.Timeout"></member>
    <member name="F:WPILib.WaitResult.RisingEdge"></member>
    <member name="F:WPILib.WaitResult.FallingEdge"></member>
    <member name="F:WPILib.WaitResult.Both"></member>
    <member name="T:WPILib.Buttons.Button">
      <summary>
             This class provides an easy way to link commands to OI inputs.
             </summary>
    </member>
    <member name="M:WPILib.Buttons.Button.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Buttons.Button</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Buttons.Button.CancelWhenPressed(WPILib.Commands.Command)">
      <summary>
            Cancel the command when the button is pressed.
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Button.ToggleWhenPressed(WPILib.Commands.Command)">
      <summary>
            Toggles the command whenever the button is pressed (on then off then on)
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Button.WhenPressed(WPILib.Commands.Command)">
      <summary>
            Starts the given command whenever the button is newly pressed
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Button.WhenReleased(WPILib.Commands.Command)">
      <summary>
            Starts the command when the button is released
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Button.WhileHeld(WPILib.Commands.Command)">
      <summary>
            Constantly starts the given command while the button is held.
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="T:WPILib.Buttons.ButtonScheduler">
      <summary>
            An internal class of <see cref="T:WPILib.Buttons.Trigger" />. The user should ignore this, it is
            only public to interface between packages
            </summary>
    </member>
    <member name="M:WPILib.Buttons.ButtonScheduler.#ctor(System.Boolean,WPILib.Buttons.Trigger,WPILib.Commands.Command)">
      <summary>
            Creates a new <see cref="T:WPILib.Buttons.ButtonScheduler" />.
            </summary>
      <param name="last">True if the button was last pressed.</param>
      <param name="button">The button trigger.</param>
      <param name="orders">The button command.</param>
    </member>
    <member name="M:WPILib.Buttons.ButtonScheduler.Execute">
      <summary>
            Executes the trigger.
            </summary>
    </member>
    <member name="F:WPILib.Buttons.ButtonScheduler.m_button">
      <summary>
            The button trigger.
            </summary>
    </member>
    <member name="F:WPILib.Buttons.ButtonScheduler.m_command">
      <summary>
            The button command.
            </summary>
    </member>
    <member name="F:WPILib.Buttons.ButtonScheduler.m_pressedLast">
      <summary>
            True if the button was pressed last.
            </summary>
    </member>
    <member name="M:WPILib.Buttons.ButtonScheduler.Start">
      <summary>
            Starts the button scheduler.
            </summary>
    </member>
    <member name="T:WPILib.Buttons.InternalButton">
      <summary>
            This class is intended to be used within a program. The programmer can manually set its value.
            Also include a setting for whether or not it should invert its value.
            </summary>
    </member>
    <member name="M:WPILib.Buttons.InternalButton.#ctor">
      <summary>
            Creates an InternalButton that is not inverted
            </summary>
    </member>
    <member name="M:WPILib.Buttons.InternalButton.#ctor(System.Boolean)">
      <summary>
            Creates an InternalButton which is inverted depending on the input.
            </summary>
      <param name="inverted">If false, then this button is pressed when set to true, otherwise it is pressed when set to false.</param>
    </member>
    <member name="M:WPILib.Buttons.InternalButton.Get">
      <summary>
            Returns whether or not the trigger is active
            </summary>
      <returns>Whether or not the trigger condition is active.</returns>
    </member>
    <member name="M:WPILib.Buttons.InternalButton.SetInverted(System.Boolean)">
      <summary>
            Sets whether the button is inverted.
            </summary>
      <param name="inverted">True if inverted.</param>
    </member>
    <member name="M:WPILib.Buttons.InternalButton.SetPressed(System.Boolean)">
      <summary>
            Sets whether the button is pressed
            </summary>
      <param name="pressed">True if pressed</param>
    </member>
    <member name="T:WPILib.Buttons.JoystickButton">
      <summary>
            Creates a new command button that uses a joytick button.
            </summary>
    </member>
    <member name="M:WPILib.Buttons.JoystickButton.#ctor(WPILib.GenericHID,System.Int32)">
      <summary>
            Create a joystick button for triggering commands
            </summary>
      <param name="joystick">The GenericHID object that has the button (e.g Joystick, KinectStick, etc)</param>
      <param name="buttonNumber">The button number (see <see cref="M:WPILib.GenericHID.GetRawButton(System.Int32)" />)</param>
    </member>
    <member name="P:WPILib.Buttons.JoystickButton.ButtonNumber">
      <summary>
            The button number on the joystick.
            </summary>
    </member>
    <member name="M:WPILib.Buttons.JoystickButton.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:WPILib.Buttons.JoystickButton.Equals(WPILib.Buttons.JoystickButton)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:WPILib.Buttons.JoystickButton.Get">
      <summary>
            Gets the value of the joystick button
            </summary>
      <returns>The value of the joystick button</returns>
    </member>
    <member name="M:WPILib.Buttons.JoystickButton.GetHashCode">
      <summary>Serves as the default hash function. </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="P:WPILib.Buttons.JoystickButton.Joystick">
      <summary>
            The joystick the bbutton is on.
            </summary>
    </member>
    <member name="T:WPILib.Buttons.NetworkButton">
      <summary>
            This class represents a button hosted by the NetworkTable.
            </summary>
    </member>
    <member name="M:WPILib.Buttons.NetworkButton.#ctor(NetworkTables.NetworkTable,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:WPILib.Buttons.NetworkButton" /> class
            </summary>
      <param name="table">The <see cref="T:NetworkTables.NetworkTable" /> to locate the button on</param>
      <param name="field">The name of the button</param>
    </member>
    <member name="M:WPILib.Buttons.NetworkButton.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:WPILib.Buttons.NetworkButton" /> class
            </summary>
      <param name="table">The name of the table to locate the button on</param>
      <param name="field">The name of the button</param>
    </member>
    <member name="P:WPILib.Buttons.NetworkButton.Field">
      <summary>
            Gets the key in the network table the button is checking for.
            </summary>
    </member>
    <member name="M:WPILib.Buttons.NetworkButton.Get">
      <summary>
            Returns whether or not the trigger is active
            
            This method will be called repeatedly a command is linked to the Trigger.
            </summary>
      <returns>Whether or not the trigger condition is active.</returns>
    </member>
    <member name="P:WPILib.Buttons.NetworkButton.SourceTable">
      <summary>
            Gets the source Network Table.
            </summary>
    </member>
    <member name="T:WPILib.Buttons.Trigger">
      <summary>
            This class provides an easy way to link commands to inputs.
            </summary>
    </member>
    <member name="M:WPILib.Buttons.Trigger.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Buttons.Trigger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Buttons.Trigger.CancelWhenActive(WPILib.Commands.Command)">
      <summary>
            Cancel the command when the button is pressed.
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Trigger.Get">
      <summary>
            Returns whether or not the trigger is active
            </summary>
      <returns>Whether or not the trigger condition is active.</returns>
    </member>
    <member name="M:WPILib.Buttons.Trigger.Grab">
      <summary>
            Returns whether Get() return true or the internal table for SmartDashboard use is pressed.
            </summary>
      <returns>Whether <see cref="M:WPILib.Buttons.Trigger.Get" /> return true or the internal table for SmartDashboard use is pressed</returns>
    </member>
    <member name="M:WPILib.Buttons.Trigger.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Buttons.Trigger.SmartDashboardType">
      <summary>
            These methods continue to return the "Button" SmartDashboard type until we decided
            to create a Trigger widget type for the dashboard.
            </summary>
    </member>
    <member name="P:WPILib.Buttons.Trigger.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Buttons.Trigger.ToggleWhenActive(WPILib.Commands.Command)">
      <summary>
            Toggles the command whenever the button is pressed (on then off then on)
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Trigger.WhenActive(WPILib.Commands.Command)">
      <summary>
            Starts the given command whenever the trigger just becomes active.
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Trigger.WhenInactive(WPILib.Commands.Command)">
      <summary>
            Starts the command when the button is released
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Trigger.WhileActive(WPILib.Commands.Command)">
      <summary>
            Constantly starts the given command while the button is held.
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="T:WPILib.CAN.CANInvalidBufferException">
      <summary>
            Exception indicating that a CAN driver library entry-point
            was passed an invalid buffer. </summary>
    </member>
    <member name="M:WPILib.CAN.CANInvalidBufferException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.CAN.CANInvalidBufferException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.CAN.CANJaguarVersionException">
      <summary>
            Exception indicating that the CAN Jaguar does not have the correct version
            </summary>
    </member>
    <member name="M:WPILib.CAN.CANJaguarVersionException.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:WPILib.CAN.CANJaguarVersionException" /> class
            </summary>
      <param name="deviceNumber">The Device Number</param>
      <param name="fwVersion">The FW Version</param>
    </member>
    <member name="F:WPILib.CAN.CANJaguarVersionException.MinLegalFIRSTFirmwareVersion">
      <summary>
            The Minimum FIRST Legal version of the firmware
            </summary>
    </member>
    <member name="F:WPILib.CAN.CANJaguarVersionException.MinRdkFirmwareVersion">
      <summary>
            The Minimum RDK Firmware Version
            </summary>
    </member>
    <member name="T:WPILib.CAN.CANMessageNotAllowedException">
      <summary>
            Exception indicating that the Jaguar CAN Driver layer refused to send a
            restricted message ID to the CAN bus.
            </summary>
    </member>
    <member name="M:WPILib.CAN.CANMessageNotAllowedException.#ctor(System.String)">
      <summary>
            Initialized a new instance of the <see cref="T:WPILib.CAN.CANMessageNotAllowedException" /> class
            </summary>
      <param name="msg"></param>
    </member>
    <member name="T:WPILib.CAN.CANMessageNotFoundException">
      <summary>
            Exception indicating that a can message is not available from Network
            </summary>
    </member>
    <member name="M:WPILib.CAN.CANMessageNotFoundException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.CAN.CANMessageNotFoundException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.CAN.CANNotInitializedException">
      <summary>
            Exception indicating that the CAN driver layer has not been initialized.
            </summary>
    </member>
    <member name="M:WPILib.CAN.CANNotInitializedException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.CAN.CANNotInitializedException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.Commands.Command">
      <summary>
            The Command class is at the very core of the entire command framework.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.#ctor">
      <summary>
            Creates a new command.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.#ctor(System.Double)">
      <summary>
            Creates a new command with the given timeout and a default name.
            </summary>
      <param name="timeout">The time (in seconds) before this command "times out"</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If given a negative timeout</exception>
    </member>
    <member name="M:WPILib.Commands.Command.#ctor(System.String)">
      <summary>
            Creates a new command with the given name.
            </summary>
      <param name="name">The name for this command</param>
      <exception cref="T:System.ArgumentNullException">If name is null</exception>
    </member>
    <member name="M:WPILib.Commands.Command.#ctor(System.String,System.Double)">
      <summary>
            Creates a new command with the given name and timeout.
            </summary>
      <param name="name">The name of the command</param>
      <param name="timeout">The time (in seconds) before this command "times out"</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If given a negative timeout</exception>
    </member>
    <member name="M:WPILib.Commands.Command._End">
      <summary>
            A shadow method called before <see cref="M:WPILib.Commands.Command.End" />.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command._Initialize">
      <summary>
            A shadow method called before <see cref="M:WPILib.Commands.Command.Initialize" /></summary>
    </member>
    <member name="M:WPILib.Commands.Command._Interrupted">
      <summary>
            A shadow method called before <see cref="M:WPILib.Commands.Command.Interrupted" />.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.Cancel">
      <summary>
            This will cancel the current command.
            </summary>
    </member>
    <member name="P:WPILib.Commands.Command.Canceled">
      <summary>
            Gets whether or not this has been canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.DoesRequire(WPILib.Commands.Subsystem)">
      <summary>
            Checks if the command requires the given <see cref="T:WPILib.Commands.Subsystem" />.
            </summary>
      <param name="system">The system</param>
      <returns>Whether or not the subsystem is required, or false if given null.</returns>
    </member>
    <member name="M:WPILib.Commands.Command.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.GetGroup">
      <summary>
            Returns the <see cref="T:WPILib.Commands.CommandGroup" /> this command is a part of.
            </summary>
      <returns>The <see cref="T:WPILib.Commands.CommandGroup" /> that this command is a part of (or null if not in a group)</returns>
    </member>
    <member name="M:WPILib.Commands.Command.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.Commands.Command.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="P:WPILib.Commands.Command.Interruptible">
      <summary>
            Get or Set whether or not this command can be interrupted.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="M:WPILib.Commands.Command.IsRunning">
      <summary>
            Returns whether or not the command is running.
            </summary>
      <returns>Whether or not the command is running</returns>
    </member>
    <member name="M:WPILib.Commands.Command.IsTimedOut">
      <summary>
            Returns whether or not the <see cref="M:WPILib.Commands.Command.TimeSinceInitialized" /> 
            method returns a number which is greater then or equal to the timeout for the command.
            </summary>
      <returns>Whether the time has expired.</returns>
    </member>
    <member name="P:WPILib.Commands.Command.Name">
      <summary>
            Returns the name of this command.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.Requires(WPILib.Commands.Subsystem)">
      <summary>
            This method specifies that the given <see cref="T:WPILib.Commands.Subsystem" /> is used by this command.
            </summary>
      <param name="subsystem">The <see cref="T:WPILib.Commands.Subsystem" /> required</param>
      <exception cref="T:System.ArgumentNullException">If subsystem is null</exception>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If this command has started before or if it has been given to a <see cref="T:WPILib.Commands.CommandGroup" /></exception>
    </member>
    <member name="P:WPILib.Commands.Command.RunWhenDisabled">
      <summary>
            Gets or Sets whether or not this <see cref="T:WPILib.Commands.Command" /> should run when the robot is disabled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.SetTimeout(System.Double)">
      <summary>
            Sets the timeout of this command.
            </summary>
      <param name="seconds">the timeout (in seconds)</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If given a negative timeout</exception>
    </member>
    <member name="P:WPILib.Commands.Command.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.Start">
      <summary>
            Starts up the command.
            </summary>
    </member>
    <member name="P:WPILib.Commands.Command.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.TimeSinceInitialized">
      <summary>
            Returns the time since this command was initialized (in seconds).
            </summary>
      <returns>The time since this command was initialize (in seconds).</returns>
    </member>
    <member name="M:WPILib.Commands.Command.ToString">
      <summary>
            The string representation for a <see cref="T:WPILib.Commands.Command" /> is by default its name.
            </summary>
      <returns>
            A string that represents the current object.
            </returns>
    </member>
    <member name="M:WPILib.Commands.Command.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="T:WPILib.Commands.CommandGroup">
      <summary>
            A <see cref="T:WPILib.Commands.CommandGroup" /> is a list of commands which are executed in sequence.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.#ctor">
      <summary>
            Creates a new <see cref="T:WPILib.Commands.CommandGroup" />. The name of this command
            will be set to its class name.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:WPILib.Commands.CommandGroup" /> with the given name.
            </summary>
      <param name="name">The name for this command group.</param>
      <exception cref="T:System.ArgumentNullException">If name is null</exception>
    </member>
    <member name="M:WPILib.Commands.CommandGroup._End">
      <summary>
            A shadow method called before <see cref="M:WPILib.Commands.Command.End" />.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup._Initialize">
      <summary>
            A shadow method called before <see cref="M:WPILib.Commands.Command.Initialize" /></summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup._Interrupted">
      <summary>
            A shadow method called before <see cref="M:WPILib.Commands.Command.Interrupted" />.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.AddParallel(WPILib.Commands.Command)">
      <summary>
            Adds a new <see cref="T:WPILib.Commands.Command" /> to the group.
            </summary>
      <param name="command">The <see cref="T:WPILib.Commands.Command" /> to be added.</param>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If the command has been started before or been given to another group.</exception>
      <exception cref="T:System.ArgumentNullException">If the given <see cref="T:WPILib.Commands.Command" /> is null</exception>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.AddParallel(WPILib.Commands.Command,System.Double)">
      <summary>
            Adds a new <see cref="T:WPILib.Commands.Command" /> to the group with the given timeout.
            </summary>
      <param name="command">The <see cref="T:WPILib.Commands.Command" /> to be added.</param>
      <param name="timeout">The timeout (in seconds).</param>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If the command has been started before or been given to another group.</exception>
      <exception cref="T:System.ArgumentNullException">If the given <see cref="T:WPILib.Commands.Command" /> is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the given timeout is negative.</exception>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.AddSequential(WPILib.Commands.Command)">
      <summary>
            Adds a new <see cref="T:WPILib.Commands.Command" /> to the group.
            </summary>
      <param name="command">The <see cref="T:WPILib.Commands.Command" /> to be added.</param>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If the command has been started before or been given to another group.</exception>
      <exception cref="T:System.ArgumentNullException">If the given <see cref="T:WPILib.Commands.Command" /> is null</exception>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.AddSequential(WPILib.Commands.Command,System.Double)">
      <summary>
            Adds a new <see cref="T:WPILib.Commands.Command" /> to the group with a given timeout.
            </summary>
      <param name="command">The <see cref="T:WPILib.Commands.Command" /> to be added.</param>
      <param name="timeout">The timeout (in seconds).</param>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If the group has been started before or been given to another group.</exception>
      <exception cref="T:System.ArgumentNullException">If the given <see cref="T:WPILib.Commands.Command" /> is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the given timeout is negative.</exception>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="P:WPILib.Commands.CommandGroup.Interruptible">
      <summary>
            Returns whether or not this group is interruptible.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.IsFinished">
      <summary>
            Returns true if all the <see cref="T:WPILib.Commands.Command">Commands</see> in this group have
            been started and have finished.
            </summary>
      <returns>Whether this <see cref="T:WPILib.Commands.CommandGroup" /> is finished.</returns>
    </member>
    <member name="T:WPILib.Commands.IllegalUseOfCommandException">
      <summary>
            This exception will be thrown if a command is used illegally.
            </summary>
    </member>
    <member name="M:WPILib.Commands.IllegalUseOfCommandException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:WPILib.Commands.IllegalUseOfCommandException" /> class
            </summary>
    </member>
    <member name="M:WPILib.Commands.IllegalUseOfCommandException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:WPILib.Commands.IllegalUseOfCommandException" /> class with the given message.
            </summary>
      <param name="message">The message</param>
    </member>
    <member name="T:WPILib.Commands.PIDCommand">
      <summary>
            This class defines a <see cref="T:WPILib.Commands.Command" /> which interacts heavily with a PID loop.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDCommand" /> that will use the given p, i and d values,
            and use the class name as its name
            </summary>
      <param name="p">The proportional value.</param>
      <param name="i">The integral value.</param>
      <param name="d">The derivative value.</param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDCommand" /> that will use the given p, i, and d values,
            using the class name as the name, and runs during the specified period.
            </summary>
      <param name="p">The proportional value.</param>
      <param name="i">The integral value.</param>
      <param name="d">The derivative value.</param>
      <param name="period">The period to run the controller at. (seconds)</param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.#ctor(System.String,System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDCommand" /> that will use the given p, i and d values.
            </summary>
      <param name="name">The name of the command.</param>
      <param name="p">The proportional value.</param>
      <param name="i">The integral value.</param>
      <param name="d">The derivative value.</param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDCommand" /> that will use the given p, i and d values,
            running using the specifed period.
            </summary>
      <param name="name">The name of the command.</param>
      <param name="p">The proportional value.</param>
      <param name="i">The integral value.</param>
      <param name="d">The derivative value.</param>
      <param name="period">The period to run the controller at. (seconds)</param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand._End">
      <summary>
            A shadow method called before <see cref="M:WPILib.Commands.Command.End" />.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand._Initialize">
      <summary>
            A shadow method called before <see cref="M:WPILib.Commands.Command.Initialize" /></summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand._Interrupted">
      <summary>
            A shadow method called before <see cref="M:WPILib.Commands.Command.Interrupted" />.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.GetPosition">
      <summary>
            Gets the current position.
            </summary>
      <returns>The current position.</returns>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Commands.PIDCommand.PIDController">
      <summary>
            Returns the <see cref="P:WPILib.Commands.PIDCommand.PIDController" /> used by this <see cref="T:WPILib.Commands.PIDCommand" />.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.PidGet">
      <summary>
            Get the result to use in <see cref="T:WPILib.PIDController" /></summary>
      <returns>The result to use in <see cref="T:WPILib.PIDController" /></returns>
    </member>
    <member name="P:WPILib.Commands.PIDCommand.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.PidWrite(System.Double)">
      <summary>
            Set the output to the value calculated by <see cref="T:WPILib.PIDController" /></summary>
      <param name="value">Output the value calculated by <see cref="T:WPILib.PIDController" /></param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.ReturnPIDInput">
      <summary>
            Returns the input for the PID Loop.
            </summary>
      <returns>The value the PID Loop should use as input.</returns>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.SetInputRange(System.Double,System.Double)">
      <summary>
            Sets the minimum and maximum values expected from the input and setpoint.
            </summary>
      <param name="minimumInput">The minimum value expected from the input and setpoint.</param>
      <param name="maximumInput">The maximum value expected from the input and setpoint.</param>
    </member>
    <member name="P:WPILib.Commands.PIDCommand.Setpoint">
      <summary>
            Gets or sets the setpoint.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.SetSetpointRelative(System.Double)">
      <summary>
            Adds the given value to the setpoint.
            </summary>
      <param name="deltaSetpoint">The change in the setpoint.</param>
    </member>
    <member name="P:WPILib.Commands.PIDCommand.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.UsePIDOutput(System.Double)">
      <summary>
            Uses the value that the PID Loop Calculated.
            </summary>
      <param name="output">The value the PID loop calculated.</param>
    </member>
    <member name="T:WPILib.Commands.PIDSubsystem">
      <summary>
            This class is designed to handle the case where there is a <see cref="T:WPILib.Commands.Subsystem" />
            which uses a single <see cref="T:WPILib.PIDController">PIDController</see> almost constantly.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDSubsystem" /> that will use the give p, i and d values.
            /// It will use the class name as its name.
            </summary>
      <param name="p">The proportional value</param>
      <param name="i">The integral value</param>
      <param name="d">The derivative value</param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDSubsystem" /> that will use the give p, i and d values.
            It will also space the time between PID loop calcuulations to be equal to the given period.
            It will use the class name as its name.
            </summary>
      <param name="p">The proportional value</param>
      <param name="i">The integral value</param>
      <param name="d">The derivative value</param>
      <param name="period">The time (in seconds) between calculations</param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDSubsystem" /> that will use the give p, i, d and f values.
            It will also space the time between PID loop calcuulations to be equal to the given period.
            It will use the class name as its name.
            </summary>
      <param name="p">The proportional value</param>
      <param name="i">The integral value</param>
      <param name="d">The derivative value</param>
      <param name="f">The feed forward value</param>
      <param name="period">The time (in seconds) between calculations</param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDSubsystem" /> that will use the give p, i and d values.
            </summary>
      <param name="name">The name</param>
      <param name="p">The proportional value</param>
      <param name="i">The integral value</param>
      <param name="d">The derivative value</param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDSubsystem" /> that will use the give p, i, d and f values.
            </summary>
      <param name="name">The name</param>
      <param name="p">The proportional value</param>
      <param name="i">The integral value</param>
      <param name="d">The derivative value</param>
      <param name="f">The feed forward value</param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDSubsystem" /> that will use the give p, i, d and f values.
            It will also space the time between PID loop calcuulations to be equal to the given period.
            </summary>
      <param name="name">The name</param>
      <param name="p">The proportional value</param>
      <param name="i">The integral value</param>
      <param name="d">The derivative value</param>
      <param name="f">The feed forward value</param>
      <param name="period">The time (in seconds) between calculations</param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.Disable">
      <summary>
            Disables the internal <see cref="T:WPILib.PIDController">PIDController</see></summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.Enable">
      <summary>
            Enables the internal <see cref="T:WPILib.PIDController">PIDController</see></summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.GetPosition">
      <summary>
            Gets the current position.
            </summary>
      <returns>The current position.</returns>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.OnTarget">
      <summary>
            Gets if the PID system is on target.
            </summary>
      <returns>True if the error is less then the tolerance.</returns>
    </member>
    <member name="P:WPILib.Commands.PIDSubsystem.PIDController">
      <summary>
            Gets the <see cref="P:WPILib.Commands.PIDSubsystem.PIDController" /> used by this <see cref="T:WPILib.Commands.PIDSubsystem" />.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.PidGet">
      <summary>
            Get the result to use in <see cref="T:WPILib.PIDController" /></summary>
      <returns>The result to use in <see cref="T:WPILib.PIDController" /></returns>
    </member>
    <member name="P:WPILib.Commands.PIDSubsystem.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.PidWrite(System.Double)">
      <summary>
            Set the output to the value calculated by <see cref="T:WPILib.PIDController" /></summary>
      <param name="value">Output the value calculated by <see cref="T:WPILib.PIDController" /></param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.ReturnPIDInput">
      <summary>
            Returns the input for the PID Loop.
            </summary>
      <returns>The value the PID Loop should use as input.</returns>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.SetAbsoluteTolerance(System.Double)">
      <summary>
            Sets the absolute error which is considered tolerable for use with <see cref="M:WPILib.Commands.PIDSubsystem.OnTarget" />.
            </summary>
      <param name="t">The absolute tolerance.</param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.SetInputRange(System.Double,System.Double)">
      <summary>
            Sets the minimum and maximum values expected from the input and setpoint.
            </summary>
      <param name="minimumInput">The minimum value expected from the input and setpoint.</param>
      <param name="maximumInput">The maximum value expected from the input and setpoint.</param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.SetOutputRange(System.Double,System.Double)">
      <summary>
            Sets the maximum and minimum values to write.
            </summary>
      <param name="minimumOutput">The minimum value to write to the output.</param>
      <param name="maximumOutput">The maximum value to write to the output.</param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.SetPercentTolerance(System.Double)">
      <summary>
            Set the percentage error which is considered tolerable for use with <see cref="M:WPILib.Commands.PIDSubsystem.OnTarget" />.
            </summary>
      <param name="p">The percent tolerance.</param>
    </member>
    <member name="P:WPILib.Commands.PIDSubsystem.Setpoint">
      <summary>
            Gets or sets the setpoint.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.SetPositionRelative(System.Double)">
      <summary>
            Adds the given value to the setpoint.
            </summary>
      <param name="deltaSetpoint">The change in the setpoint.</param>
    </member>
    <member name="P:WPILib.Commands.PIDSubsystem.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.UsePIDOutput(System.Double)">
      <summary>
            Uses the value that the PID Loop Calculated.
            </summary>
      <param name="output">The value the PID loop calculated.</param>
    </member>
    <member name="T:WPILib.Commands.PrintCommand">
      <summary>
            A <see cref="T:WPILib.Commands.PrintCommand" /> is a command which prints out a string when it is initialized, and then immediately finishes.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.#ctor(System.String)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PrintCommand" /> which will print the given message when it is run.
            </summary>
      <param name="message">The message to print.</param>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="T:WPILib.Commands.Scheduler">
      <summary>
            The <see cref="T:WPILib.Commands.Scheduler" /> is a singleton which holds the top-level running m_commands.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Scheduler.AddButton(WPILib.Buttons.ButtonScheduler)">
      <summary>
            Adds a button responder to the scheduler.
            </summary>
      <param name="button">The <see cref="T:WPILib.Buttons.ButtonScheduler" /> to add to the scheduler.</param>
    </member>
    <member name="M:WPILib.Commands.Scheduler.AddCommand(WPILib.Commands.Command)">
      <summary>
            Adds a <see cref="T:WPILib.Commands.Command" /> to the scheduler.
            </summary>
      <param name="command">The command to add to the scheduler.</param>
    </member>
    <member name="M:WPILib.Commands.Scheduler.Disable">
      <summary>
            Disables the scheduler.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Scheduler.Enable">
      <summary>
            Enables the scheduler.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Scheduler.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Commands.Scheduler.Instance">
      <summary>
            Returns the <see cref="T:WPILib.Commands.Scheduler" />, creating it if one does not exist.
            </summary>
    </member>
    <member name="P:WPILib.Commands.Scheduler.Name">
      <summary>
            Returns the name of the subtable of SmartDashboard that the Sendable object will use.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Scheduler.RemoveAll">
      <summary>
            Removes all existing commands from the scheduler.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Scheduler.Run">
      <summary>
            Runs a single iteration of the scheduler loop.
            </summary>
    </member>
    <member name="P:WPILib.Commands.Scheduler.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="P:WPILib.Commands.Scheduler.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="T:WPILib.Commands.StartCommand">
      <summary>
            A <see cref="T:WPILib.Commands.StartCommand" /> will call the <see cref="M:WPILib.Commands.Command.Start">Start()</see> method of another
            command when it is initialized and will finish immediately.
            </summary>
    </member>
    <member name="M:WPILib.Commands.StartCommand.#ctor(WPILib.Commands.Command)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.StartCommand" /> which will start the given command when its 
            <see cref="M:WPILib.Commands.StartCommand.Initialize" /> is called.
            </summary>
      <param name="commandToStart">The <see cref="T:WPILib.Commands.Command" /> to start.</param>
    </member>
    <member name="M:WPILib.Commands.StartCommand.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.StartCommand.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.StartCommand.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.StartCommand.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="M:WPILib.Commands.StartCommand.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="T:WPILib.Commands.Subsystem">
      <summary>
            This class defines a major component of the robot.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Subsystem.#ctor">
      <summary>
            Creates a subsystem. This will set the name to the name of the class.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Subsystem.#ctor(System.String)">
      <summary>
            Creates a subsystem with the given name.
            </summary>
      <param name="name">The name of the subsystem.</param>
    </member>
    <member name="M:WPILib.Commands.Subsystem.GetCurrentCommand">
      <summary>
            Returns the command which currently claims this subsystem.
            </summary>
      <returns>The command which currently claims this subsystem.</returns>
    </member>
    <member name="M:WPILib.Commands.Subsystem.InitDefaultCommand">
      <summary>
            Initialize the default command for a subsystem.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Subsystem.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Commands.Subsystem.Name">
      <summary>
            Returns the name of the subtable of SmartDashboard that the Sendable object will use.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Subsystem.SetDefaultCommand(WPILib.Commands.Command)">
      <summary>
            Sets the default command.
            </summary>
      <param name="command">The default command(or null if there should be none.</param>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If the command does not require the subsystem.</exception>
    </member>
    <member name="P:WPILib.Commands.Subsystem.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="P:WPILib.Commands.Subsystem.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="T:WPILib.Commands.WaitCommand">
      <summary>
            A <see cref="T:WPILib.Commands.WaitCommand" /> will wait for a certain amount of time before finishing.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.#ctor(System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.WaitCommand" /> with the given timeout.
            </summary>
      <param name="timeout">The time the command takes to run.</param>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.#ctor(System.String,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.WaitCommand" /> with the given timeout.
            </summary>
      <param name="name">The name of the command.</param>
      <param name="timeout">The time the command takes to run.</param>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="T:WPILib.Commands.WaitForChildren">
      <summary>
            This command will only finish if whatever <see cref="T:WPILib.Commands.CommandGroup" />
            it is in has no active children.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Commands.WaitForChildren</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="T:WPILib.Commands.WaitUntilCommand">
      <summary>
            This command waits until an absolute game time.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.#ctor(System.Double)">
      <summary>
            Initializes a new <see cref="T:WPILib.Commands.WaitUntilCommand" />.
            </summary>
      <param name="time">The time to wait until.</param>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="T:WPILib.Exceptions.AllocationException">
      <summary>
            Exception indicating that the resource is already allocated.
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.AllocationException.#ctor(System.String)">
      <summary>
            Create a new AllocationException
            </summary>
      <param name="message">The message to attach to the exception</param>
    </member>
    <member name="T:WPILib.Exceptions.AnalogTriggerException">
      <summary>
            Exceptions dealing with improper operation of the Analog trigger.
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.AnalogTriggerException.#ctor(System.String)">
      <summary>
            Create a new exception with the given message
            </summary>
      <param name="message">The message to pass to the exception</param>
    </member>
    <member name="T:WPILib.Exceptions.BaseSystemNotInitializedException">
      <summary>
            Thrown if there is an error caused by a basic system or setting
            not being properly initialized before being used.
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.BaseSystemNotInitializedException.#ctor(System.Object,System.Object)">
      <summary>
            Create a new BaseSystemNotInitializedException using the offending class that was not set and the
            class that was affected.
            </summary>
      <param name="offender">The class or interface that was not properly initialized.</param>
      <param name="affected">The class that was affected by this missing initialization.</param>
    </member>
    <member name="M:WPILib.Exceptions.BaseSystemNotInitializedException.#ctor(System.String)">
      <summary>
            Create a new BaseSystemNotInitializedException
            </summary>
      <param name="message">The message to attach to the exception</param>
    </member>
    <member name="T:WPILib.Exceptions.BoundaryException">
      <summary>
            This exception represent an error in which a lower limit was set as higher
            then an upper limit.
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.BoundaryException.#ctor(System.String)">
      <summary>
            Create a new exception with the given message
            </summary>
      <param name="message">The message to attach to the exception</param>
    </member>
    <member name="M:WPILib.Exceptions.BoundaryException.AssertWithinBounds(System.Double,System.Double,System.Double)">
      <summary>
            Make sure that the given value is between the upper and lower bounds, and
            throw an exception if they are not.
            </summary>
      <param name="value">The value to check</param>
      <param name="lower">The minimum acceptable value.</param>
      <param name="upper">The maximum acceptable value.</param>
    </member>
    <member name="M:WPILib.Exceptions.BoundaryException.GetMessage(System.Double,System.Double,System.Double)">
      <summary>
            Returns the message for a boundary exception. Used to keep  the message 
            consistent across all boundary exceptions.
            </summary>
      <param name="value">The given value</param>
      <param name="lower">The lower limit</param>
      <param name="upper">The upper limit</param>
      <returns>The message for a boundary exception</returns>
    </member>
    <member name="T:WPILib.Exceptions.InvalidValueException">
      <summary>
            This class represents errors in trying to set relay values contradictory
            to the direction to which the relay is set.
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.InvalidValueException.#ctor(System.String)">
      <summary>
            Create a new exception with the given message
            </summary>
      <param name="message">The message to pass with the exception</param>
    </member>
    <member name="T:WPILib.Exceptions.UncleanStatusException">
      <summary>
            Exception for bad status codes from the chip object
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.UncleanStatusException.#ctor">
      <summary>
            Create a new UncleanStatusException
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.UncleanStatusException.#ctor(System.Int32)">
      <summary>
            Create a new UncleanStatusException
            </summary>
      <param name="status">The status code that caused the exception</param>
    </member>
    <member name="M:WPILib.Exceptions.UncleanStatusException.#ctor(System.Int32,System.String)">
      <summary>
            Create a new UncleanStatusException
            </summary>
      <param name="status">The status code the caused the exception</param>
      <param name="message">A message describing the exception</param>
    </member>
    <member name="M:WPILib.Exceptions.UncleanStatusException.#ctor(System.String)">
      <summary>
            Create a new UncleanStatusException
            </summary>
      <param name="message">A message describing the exception</param>
    </member>
    <member name="M:WPILib.Exceptions.UncleanStatusException.GetStatus">
      <summary>
            Create a new UncleanStatusException
            </summary>
      <returns>The status code that caused the exception</returns>
    </member>
    <member name="T:WPILib.Filters.Filter">
      <summary>
            Superclass for filters
            </summary>
    </member>
    <member name="M:WPILib.Filters.Filter.#ctor(WPILib.Interfaces.IPIDSource)">
      <summary>
            Creates a new <see cref="T:WPILib.Filters.Filter" /></summary>
      <param name="source">The <see cref="T:WPILib.Interfaces.IPIDSource" /> to filter.</param>
    </member>
    <member name="M:WPILib.Filters.Filter.Get">
      <summary>
            Returns the current filter estimate without inserting new data as <see cref="M:WPILib.Filters.Filter.PidGet" />
            would do.
            </summary>
      <returns>The current filter estimate</returns>
    </member>
    <member name="M:WPILib.Filters.Filter.PidGet">
      <summary>
            Get the result to use in <see cref="T:WPILib.PIDController" /></summary>
      <returns>The result to use in <see cref="T:WPILib.PIDController" /></returns>
    </member>
    <member name="M:WPILib.Filters.Filter.PidGetSource">
      <summary>
            Calls PidGet of source.
            </summary>
      <returns>Current value of the source</returns>
    </member>
    <member name="P:WPILib.Filters.Filter.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="M:WPILib.Filters.Filter.Reset">
      <summary>
            Resets the filter state.
            </summary>
    </member>
    <member name="T:WPILib.Filters.LinearDigitalFilter">
      <summary>
            This class implements a linear, digital filter.
            </summary>
    </member>
    <member name="M:WPILib.Filters.LinearDigitalFilter.#ctor(WPILib.Interfaces.IPIDSource,System.Double[],System.Double[])">
      <summary>
            Creates a linear FIR or IIR filter.
            </summary>
      <param name="source">The <see cref="T:WPILib.Interfaces.IPIDSource" /> object that is used to get values.</param>
      <param name="ffGains">The "feed forward" or FIR gains.</param>
      <param name="fbGains">The "feed back" or IIR gains.</param>
    </member>
    <member name="M:WPILib.Filters.LinearDigitalFilter.Get">
      <summary>
            Returns the current filter estimate without inserting new data as <see cref="M:WPILib.Filters.Filter.PidGet" />
            would do.
            </summary>
      <returns>The current filter estimate</returns>
    </member>
    <member name="M:WPILib.Filters.LinearDigitalFilter.HighPass(WPILib.Interfaces.IPIDSource,System.Double,System.Double)">
      <summary>
            Creates a first-order high-pass filter.
            </summary>
      <param name="source">The <see cref="T:WPILib.Interfaces.IPIDSource" /> object that is used to get values.</param>
      <param name="timeConstant">The discrete-time time constant in seconds.</param>
      <param name="period">The period in seconds between samples taken by the user.</param>
      <returns></returns>
    </member>
    <member name="M:WPILib.Filters.LinearDigitalFilter.MovingAverage(WPILib.Interfaces.IPIDSource,System.Int32)">
      <summary>
            Creates a K-tap FIR moving average filter.
            </summary>
      <param name="source">The <see cref="T:WPILib.Interfaces.IPIDSource" /> object that is used to get values.</param>
      <param name="taps">The number of samples to average over. Higher = smoother but slower</param>
      <returns>A new Moving Average <see cref="T:WPILib.Filters.LinearDigitalFilter" /></returns>
    </member>
    <member name="M:WPILib.Filters.LinearDigitalFilter.PidGet">
      <summary>
            Get the result to use in <see cref="T:WPILib.PIDController" /></summary>
      <returns>The result to use in <see cref="T:WPILib.PIDController" /></returns>
    </member>
    <member name="M:WPILib.Filters.LinearDigitalFilter.Reset">
      <summary>
            Resets the filter state.
            </summary>
    </member>
    <member name="M:WPILib.Filters.LinearDigitalFilter.SinglePoleIIR(WPILib.Interfaces.IPIDSource,System.Double,System.Double)">
      <summary>
            Ceates a one-pole IIR low-passs filter.
            </summary>
      <param name="source">The <see cref="T:WPILib.Interfaces.IPIDSource" /> object that is used to get values.</param>
      <param name="timeConstant">The filter's feedforward gain factor (lower = smoother but slower).</param>
      <param name="period"></param>
      <returns>A new Single Pole IIR <see cref="T:WPILib.Filters.LinearDigitalFilter" /></returns>
    </member>
    <member name="T:WPILib.Interfaces.AccelerometerRange">
      <summary>
            Ranges allowed for Accelerometers
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.AccelerometerRange.k2G">
      <summary>
            2G Maximum
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.AccelerometerRange.k4G">
      <summary>
            4G Maximum
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.AccelerometerRange.k8G">
      <summary>
            8G Maximum
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.AccelerometerRange.k16G">
      <summary>
            16G Maximum
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.AllAxes">
      <summary>
            A struct containing all axes of an accelerometer.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.AllAxes.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Creates a new <see cref="T:WPILib.Interfaces.AllAxes" /> struct.
            </summary>
      <param name="x">The x value.</param>
      <param name="y">The y value.</param>
      <param name="z">The z value.</param>
    </member>
    <member name="P:WPILib.Interfaces.AllAxes.XAxis">
      <summary>
            The X Axis
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.AllAxes.YAxis">
      <summary>
            The Y Axis
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.AllAxes.ZAxis">
      <summary>
            The Z Axis
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.ControlMode">
      <summary>
            Mode for determining how the <see cref="T:WPILib.Interfaces.ICANSpeedController" /> is controlled, used internally.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.ControlMode.PercentVbus">
      <summary>
            Percent Vbus Mode (Similar to PWM).
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.ControlMode.Follower">
      <summary>
            Follower Mode (sets the controller to follow another controller).
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.ControlMode.Voltage">
      <summary>
            Runs the controller by directly setting the output voltage.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.ControlMode.Position">
      <summary>
            Runs the controller in Closed Loop Position mode.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.ControlMode.Speed">
      <summary>
            Runs the controller in Closed Loop Speed mode.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.ControlMode.Current">
      <summary>
            Runs the controller in Closed Loop Current mode.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.ControlMode.MotionProfile">
      <summary>
            Runs the controller in Motion Profile mode.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.ControlMode.Disabled">
      <summary>
            If this mode is set, the controller is disabled.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.ControlModeExtensions">
      <summary>
            Extenstions to ease control mode checking.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ControlModeExtensions.IsPID(WPILib.Interfaces.ControlMode)">
      <summary>
            Checks whether the <see cref="T:WPILib.Interfaces.ControlMode" /> is a PID control mode.
            </summary>
      <param name="mode">The <see cref="T:WPILib.Interfaces.ControlMode" /> to check.</param>
      <returns>True if the <see cref="T:WPILib.Interfaces.ControlMode" /> is a PID control mode.</returns>
    </member>
    <member name="T:WPILib.Interfaces.EncodingType">
      <summary>
            Encoding Types for Counters and Encoders.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.EncodingType.K1X">
      <summary>
            Count only on rising edge of A channel
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.EncodingType.K2X">
      <summary>
            Count on rising edge of A and B channel
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.EncodingType.K4X">
      <summary>
            Count on rising and falling edges of both A and B channel
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.Faults">
      <summary>
            Fault enum for CAN devices.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Faults.CurrentFault">
      <summary>
            Current Fault.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Faults.TemperatureFault">
      <summary>
            Temperature Fault.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Faults.BusVoltageFault">
      <summary>
            Bus Voltage Fault.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Faults.GateDriverFault">
      <summary>
            Gate Driver Fault.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Faults.FwdLimitSwitch">
      <summary>
            Forward Limit Switch Fault.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Faults.RevLimitSwitch">
      <summary>
            Reverse Limit Switch Fault.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Faults.FwdSoftLimit">
      <summary>
            Forward Soft Limit Fault.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Faults.RevSoftLimit">
      <summary>
            Reverse Soft Limit Fault.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.IAccelerometer">
      <summary>
            Interface for 3-axis accelerometers
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IAccelerometer.AccelerometerRange">
      <summary>
            Common interface for setting the measuring range of an accelerometer
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IAccelerometer.GetAllAxes">
      <summary>
            Common interface for getting all acceleration axes
            </summary>
      <returns>A struct containing all axes</returns>
    </member>
    <member name="M:WPILib.Interfaces.IAccelerometer.GetX">
      <summary>
            Common interface for getting the x axis acceleration
            </summary>
      <returns>The acceleration along the x axis in g-forces</returns>
    </member>
    <member name="M:WPILib.Interfaces.IAccelerometer.GetY">
      <summary>
            Common interface for getting the y axis acceleration
            </summary>
      <returns>The acceleration along the y axis in g-forces</returns>
    </member>
    <member name="M:WPILib.Interfaces.IAccelerometer.GetZ">
      <summary>
            Common interface for getting the z axis acceleration
            </summary>
      <returns>The acceleration along the z axis in g-forces</returns>
    </member>
    <member name="T:WPILib.Interfaces.ICANSpeedController">
      <summary>
            Interface for CAN Speed Controllers like <see cref="T:WPILib.CANTalon" /> and <see cref="T:WPILib.CANJaguar" /></summary>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.ConfigSoftPositionLimits(System.Double,System.Double)">
      <summary>
            Configure soft position limits when in position controller mode.
            </summary>
      <param name="forwardLimitPosition">The position that if exceeded will disabled the forward direction.</param>
      <param name="reverseLimitPosition">The position that if exceeded will disabled the reverse direction.</param>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.D">
      <summary>
            Gets or sets the derivative PID constant.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.DisableSoftPositionLimits">
      <summary>
            Disables soft position limits if previously enabled (disabled by default).
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.EncoderCodesPerRev">
      <summary>
            Sets how many codes per revolution are generated by your encoder.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.F">
      <summary>
            Gets or sets the feed-forward PID constant.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.FaultTime">
      <summary>
            Set how long the speed controller waits in the case of a fault before
            resuming operation.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.FirmwareVersion">
      <summary>
            Gets the firmware version of the speed controller.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.ForwardLimit">
      <summary>
            Sets the position that if exceeded will disable the forward direction.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetBusVoltage">
      <summary>
            Gets the current input (battery) voltage.
            </summary>
      <returns>The input voltage to the controller (in Volts).</returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetFaults">
      <summary>
            Gets the status of any faults the speed controller has detected.
            </summary>
      <returns>Any faults returned by the controller.</returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetForwardLimitOk">
      <summary>
            Gets the status of the forward limit switch.
            </summary>
      <returns>The motor is allowed to turn in the forward direction when true.</returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetOutputCurrent">
      <summary>
            Gets the current being applied to the motor.
            </summary>
      <returns>The current motor current (in Amperes).</returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetOutputVoltage">
      <summary>
            Gets the current output voltage.
            </summary>
      <returns>The output voltage of the controller (in Volts).</returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetPosition">
      <summary>
            Return the current position of whatever the current selected sensor is.
            </summary>
      <returns>The current sensor position.</returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetReverseLimitOk">
      <summary>
            Gets the status of the reverse limit switch.
            </summary>
      <returns>The motor is allowed to turn in the reverse direction when true.</returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetSpeed">
      <summary>
            Return the current velocity of whatever the current selected sensor is.
            </summary>
      <returns>The current sensor velocity.</returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetTemperature">
      <summary>
            Gets the current temperature of the controller.
            </summary>
      <returns>The current temperature of the controller, in degrees Celsius.</returns>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.I">
      <summary>
            Gets or sets the integral PID constant.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.LimitMode">
      <summary>
            Sets the limit mode for position control mode.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.MaxOutputVoltage">
      <summary>
            Sets the maximum voltage that the speed controller will ever output.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.MotorControlMode">
      <summary>
            Gets or Sets the <see cref="T:WPILib.Interfaces.ControlMode" /> of the speed controller.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.NeutralMode">
      <summary>
            Sets what the controller does to the H-Bridge when neutral (not driving the output).
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.P">
      <summary>
            Gets or sets the proportional PID constant.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.PotentiometerTurns">
      <summary>
            Sets the number of turns on the potentiometer.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.ReverseLimit">
      <summary>
            Sets the position that if exceeded will disable the reverese direction.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.VoltageRampRate">
      <summary>
            Sets the maximum voltage change rate in Volts/s.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.IController">
      <summary>
            An interface for controllers. Controllers run control loops, the most command
            are PID controllers and there variants, but this includes anything that is
            controlling an actuator in a separate thread.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IController.Disable">
      <summary>
            Stops the control loop from running until explicitly re-enabled by calling
            <see cref="M:WPILib.Interfaces.IController.Enable" /></summary>
    </member>
    <member name="M:WPILib.Interfaces.IController.Enable">
      <summary>
            Allows the control loop to run
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.ICounterBase">
      <summary>
            Interface for counting input ticks.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ICounterBase.Get">
      <summary>
            Gets the current count from the encoder.
            </summary>
      <returns>The current count from the encoder.</returns>
    </member>
    <member name="M:WPILib.Interfaces.ICounterBase.GetDirection">
      <summary>
            The last direction the encoder value changed.
            </summary>
      <returns>True if forward, otherwise false.</returns>
    </member>
    <member name="M:WPILib.Interfaces.ICounterBase.GetPeriod">
      <summary>
            Returns the period of the most recent pulse in seconds.
            </summary>
      <returns>Period in seconds of the most recent pulse.</returns>
    </member>
    <member name="M:WPILib.Interfaces.ICounterBase.GetStopped">
      <summary>
            Gets if the encoder is stopped.
            </summary>
      <returns>True if the encoder is stopped, otherwise false.</returns>
    </member>
    <member name="P:WPILib.Interfaces.ICounterBase.MaxPeriod">
      <summary>
            Sets the maximum period for stopped detection, in seconds.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ICounterBase.Reset">
      <summary>
            Resets the encoder count to 0.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.IGyro">
      <summary>
            Interface for yaw rate gyros
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IGyro.Calibrate">
      <summary>
            Initialize the gyro.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IGyro.GetAngle">
      <summary>
            Return the actual angle in degrees that the robot is currently facing.
            </summary>
      <returns>The current heading of the robot in degrees. This heading is
            based on integration of the returned rate of the gyro.</returns>
    </member>
    <member name="M:WPILib.Interfaces.IGyro.GetRate">
      <summary>
            Returns the rate of rotation of the gyro.
            </summary>
      <returns>The current rate in degrees per second.</returns>
    </member>
    <member name="M:WPILib.Interfaces.IGyro.Reset">
      <summary>
            Reset the gyro.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.IMotorSafety">
      <summary>
            Interface for creating Safe Motors.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IMotorSafety.Alive">
      <summary>
            Gets whether the motor is alive.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IMotorSafety.Description">
      <summary>
            Gets a description for the Safe Motor Object.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IMotorSafety.Expiration">
      <summary>
            Gets or Sets the expiration time of the motor in seconds.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IMotorSafety.SafetyEnabled">
      <summary>
            Gets or Sets whether safety is enabled.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IMotorSafety.StopMotor">
      <summary>
            Stop the motor associated with this PWM object.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.INamedSendable">
      <summary>
            The interface for sendable objects that gives the sendable a default name in the Smart Dashboard
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.INamedSendable.Name">
      <summary>
            Returns the name of the subtable of SmartDashboard that the Sendable object will use.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.IPIDInterface">
      <summary>
            An interface for PID loops.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IPIDInterface.D">
      <summary>
            Gets the derivative gain constant.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IPIDInterface.Enabled">
      <summary>
            Gets whether the control loop is enabled.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IPIDInterface.GetError">
      <summary>
            Gets the difference between the <see cref="P:WPILib.Interfaces.IPIDInterface.Setpoint" /> and the actual position.
            </summary>
      <returns></returns>
    </member>
    <member name="P:WPILib.Interfaces.IPIDInterface.I">
      <summary>
            Gets the integral gain constant.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IPIDInterface.P">
      <summary>
            Gets the proportaional gain constant.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IPIDInterface.Reset">
      <summary>
            Resets the PID controller.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IPIDInterface.SetPID(System.Double,System.Double,System.Double)">
      <summary>
            Sets the P, I and D constants for the loop.
            </summary>
      <param name="p">The proportional gain constant.</param>
      <param name="i">The integral gain constant.</param>
      <param name="d">The derivative gain constant.</param>
    </member>
    <member name="P:WPILib.Interfaces.IPIDInterface.Setpoint">
      <summary>
            Gets or Sets the loop setpoint.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.IPIDOutput">
      <summary>
            This interface allows <see cref="T:WPILib.PIDController" /> to write it's results to its output.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IPIDOutput.PidWrite(System.Double)">
      <summary>
            Set the output to the value calculated by <see cref="T:WPILib.PIDController" /></summary>
      <param name="value">Output the value calculated by <see cref="T:WPILib.PIDController" /></param>
    </member>
    <member name="T:WPILib.Interfaces.IPIDSource">
      <summary>
            This interface allows for <see cref="T:WPILib.PIDController" /> to automatically read from this object
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IPIDSource.PidGet">
      <summary>
            Get the result to use in <see cref="T:WPILib.PIDController" /></summary>
      <returns>The result to use in <see cref="T:WPILib.PIDController" /></returns>
    </member>
    <member name="P:WPILib.Interfaces.IPIDSource.PIDSourceType">
      <summary>
            Gets or sets the Source type for this <see cref="T:WPILib.Interfaces.IPIDSource" />.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.IPotentiometer">
      <summary>
            Interface for Potentiometers
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IPotentiometer.Get">
      <summary>
            Get the value of the potentiometer
            </summary>
      <returns>The value of the potentiometer</returns>
    </member>
    <member name="T:WPILib.Interfaces.ISendable">
      <summary>
            The base interface for objects that can be sent over the network
            through network tables.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ISendable.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Interfaces.ISendable.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ISendable.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.ISpeedController">
      <summary>
            Interface for speed controlling devices
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ISpeedController.Disable">
      <summary>
            Disable the speed controller.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ISpeedController.Get">
      <summary>
            Returns the last value set to this speed controller.
            </summary>
      <returns>The output value between -1.0 and 1.0</returns>
    </member>
    <member name="P:WPILib.Interfaces.ISpeedController.Inverted">
      <summary>
            Inverts the direction of the motors rotation.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ISpeedController.Set(System.Double)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
    </member>
    <member name="M:WPILib.Interfaces.ISpeedController.Set(System.Double,System.Byte)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
      <param name="syncGroup">The update group to add this Set() to, pending UpdateSyncGroup().  If 0, update immediately.</param>
    </member>
    <member name="T:WPILib.Interfaces.LimitMode">
      <summary>
            Determines which sensor to use for position reference.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.LimitMode.SwitchInputsOnly">
      <summary>
            Only use switches for limits
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.LimitMode.SoftPositionLimits">
      <summary>
            Use both switches and soft limits
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.LimitMode.SrxDisableSwitchInputs">
      <summary>
            Disable switches and disable soft limits.  Only valid for methods on <see cref="T:WPILib.CANTalon" /> objects.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.Limits">
      <summary>
            Limit switch enum for CAN devices
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Limits.ForwardLimit">
      <summary>
            The forward limit
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Limits.ReverseLimit">
      <summary>
            The reverse limit
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.NeutralMode">
      <summary>
            Determines how the <see cref="T:WPILib.Interfaces.ICANSpeedController" /> behaves when sending a
            zero signal.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.NeutralMode.Jumper">
      <summary>Use the <see cref="T:WPILib.Interfaces.NeutralMode" /> that is set by the jumper wire on the CAN device.</summary>
    </member>
    <member name="F:WPILib.Interfaces.NeutralMode.Brake">
      <summary>Stop the motor's rotation by applying a force.</summary>
    </member>
    <member name="F:WPILib.Interfaces.NeutralMode.Coast">
      <summary>Do not attempt to stop the motor. Instead allow it to coast to a stop without applying resistance.</summary>
    </member>
    <member name="T:WPILib.Interfaces.PIDSourceType">
      <summary>
            The PID source type for this PID source.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.PIDSourceType.Displacement">
      <summary>
            Use displacement as the source.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.PIDSourceType.Rate">
      <summary>
            Use rate as the source
            </summary>
    </member>
    <member name="T:WPILib.Internal.HardwareHLUsageReporting">
      <summary>
            The RoboRIO Usage Reporting implementation
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareHLUsageReporting.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Internal.HardwareHLUsageReporting</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareHLUsageReporting.ReportPIDController(System.Int32)">
      <summary>
            Report PID Controller
            </summary>
      <param name="num">The PID Controller Index</param>
    </member>
    <member name="M:WPILib.Internal.HardwareHLUsageReporting.ReportScheduler">
      <summary>
            Report Scheduler
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareHLUsageReporting.ReportSmartDashboard">
      <summary>
            Report Smart Dashboard.
            </summary>
    </member>
    <member name="T:WPILib.Internal.HardwareTimer">
      <summary>
            Timer objects measure accumulated time in milliseconds.
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Internal.HardwareTimer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.Delay(System.Double)">
      <summary>
            Pause the thread for a specified time
            </summary>
      <param name="seconds">Length of time to pause</param>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.GetFPGATimestamp">
      <summary>
            Returns the system clock time in seconds.
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.GetMatchTime">
      <summary>
            Returns the Match Time in seconds
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.NewTimer">
      <summary>
            Creates a new Timer
            </summary>
      <returns>A new timer</returns>
    </member>
    <member name="T:WPILib.Internal.HardwareTimer.TimerImpl">
      <summary>
            A hardware timer implementation
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.#ctor">
      <summary>
            Create a new timer object
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.Get">
      <summary>
            Get the current time from the timer
            </summary>
      <returns>Current time in seconds</returns>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.HasPeriodPassed(System.Double)">
      <summary>
            Check if the specified period has passed.
            If so, advance the start time by that period.
            </summary>
      <param name="period">The period to check for (seconds)</param>
      <returns>If the period has passed.</returns>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.Reset">
      <summary>
            Reset the timer, and start the timer.
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.Start">
      <summary>
            Start the timer running
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.Stop">
      <summary>
            Stop the timer
            </summary>
    </member>
    <member name="T:WPILib.LiveWindow.ILiveWindowSendable">
      <summary>
            Live Window Sendable is a special type of object sendable to the live window.
            </summary>
    </member>
    <member name="M:WPILib.LiveWindow.ILiveWindowSendable.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.LiveWindow.ILiveWindowSendable.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="M:WPILib.LiveWindow.ILiveWindowSendable.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.LiveWindow.LiveWindow">
      <summary>
            The LiveWindow class is the public interface for putting sensor and actuators on the LiveWindow.
            </summary>
    </member>
    <member name="M:WPILib.LiveWindow.LiveWindow.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.LiveWindow.LiveWindow</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.LiveWindow.LiveWindow.AddActuator(System.String,System.Int32,System.Int32,WPILib.LiveWindow.ILiveWindowSendable)">
      <summary>
            Add Actuator to LiveWindow. </summary>
      <param name="moduleType">A string that defines the module name in the label for the value</param>
      <param name="moduleNumber">The number of the particular module type</param>
      <param name="channel">The channel number the device is connected to (usually PWM)</param>
      <param name="component">A reference to the object being added</param>
    </member>
    <member name="M:WPILib.LiveWindow.LiveWindow.AddActuator(System.String,System.Int32,WPILib.LiveWindow.ILiveWindowSendable)">
      <summary>
            Add Actuator to LiveWindow. </summary>
      <param name="moduleType">A string that defines the module name in the label for the value</param>
      <param name="channel">The channel number the device is connected to (usually PWM)</param>
      <param name="component">A reference to the object being added</param>
    </member>
    <member name="M:WPILib.LiveWindow.LiveWindow.AddActuator(System.String,System.String,WPILib.LiveWindow.ILiveWindowSendable)">
      <summary>
            Add an Actuator associated with the subsystem and with call it by the given name.
            </summary>
      <param name="subsystem">The subsystem this component is part of.</param>
      <param name="name">The name of this component.</param>
      <param name="component">A LiveWindowSendable component that represents an actuator.</param>
    </member>
    <member name="M:WPILib.LiveWindow.LiveWindow.AddSensor(System.String,System.Int32,WPILib.LiveWindow.ILiveWindowSendable)">
      <summary>
            Add Sensor to LiveWindow. The components are shown with the type and
             channel like this: Gyro[1] for a gyro object connected to the first
             analog channel.
            </summary>
      <param name="moduleType">A string indicating the type if the module used in the naming (above)</param>
      <param name="channel">The channel number the device is connected to</param>
      <param name="component">A reference to the object being added</param>
    </member>
    <member name="M:WPILib.LiveWindow.LiveWindow.AddSensor(System.String,System.String,WPILib.LiveWindow.ILiveWindowSendable)">
      <summary>
            Add a Sensor associated with the subsystem and with call it by the given name.
            </summary>
      <param name="subsystem">The subsystem this component is part of.</param>
      <param name="name">The name of this component.</param>
      <param name="component">A LiveWindowSendable component that represents a sensor.</param>
    </member>
    <member name="M:WPILib.LiveWindow.LiveWindow.Run">
      <summary>
            The run method is called repeatedly to keep the values refreshed on the screen in test mode.
            </summary>
    </member>
    <member name="M:WPILib.LiveWindow.LiveWindow.SetEnabled(System.Boolean)">
      <summary>
            Set the enabled state of LiveWindow. </summary>
      <param name="enabled"></param>
    </member>
    <member name="T:WPILib.SmartDashboard.SendableChooser">
      <summary>
            The <see cref="T:WPILib.SmartDashboard.SendableChooser" /> class is a useful tool for presenting a 
            selection of options to the <see cref="T:WPILib.SmartDashboard.SmartDashboard" />.
            </summary>
    </member>
    <member name="M:WPILib.SmartDashboard.SendableChooser.#ctor">
      <summary>
            Instantiates a <see cref="T:WPILib.SmartDashboard.SendableChooser" /></summary>
    </member>
    <member name="M:WPILib.SmartDashboard.SendableChooser.AddDefault(System.String,System.Object)">
      <summary>
            Add the given object to the list of options and marks it as the default.
            Functionally, this is very close to
            <see cref="M:WPILib.SmartDashboard.SendableChooser.AddObject(System.String,System.Object)">AddObject(...)</see> except that it will
            use this as the default option if none other is explicitly selected.
            </summary>
      <param name="name">The name of the option</param>
      <param name="obj">The option</param>
    </member>
    <member name="M:WPILib.SmartDashboard.SendableChooser.AddObject(System.String,System.Object)">
      <summary>
            Adds the given object tot the list of options. On the 
            <see cref="T:WPILib.SmartDashboard.SmartDashboard" /> on the desktop, the object will appear as the given name.
            </summary>
      <param name="name">The name of the option</param>
      <param name="obj">The option</param>
    </member>
    <member name="M:WPILib.SmartDashboard.SendableChooser.GetSelected">
      <summary>
            Returns the selected option. If there is none selected, it will return
            the default. If there is none selected, then it will return null.
            </summary>
      <returns>The option selected</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SendableChooser.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.SmartDashboard.SendableChooser.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="P:WPILib.SmartDashboard.SendableChooser.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="T:WPILib.SmartDashboard.SmartDashboard">
      <summary>
            The <see cref="T:WPILib.SmartDashboard.SmartDashboard" /> class is the bridge between robot programs and the SmartDashboard on the laptop.
            </summary>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.SmartDashboard.SmartDashboard</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetBoolean(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetBoolean(System.String,System.Boolean)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetBooleanArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetBooleanArray(System.String,System.Boolean[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetData(System.String)">
      <summary>
            Returns the <see cref="T:WPILib.Interfaces.ISendable" /> at the specified key.
            </summary>
      <param name="key">The key to return.</param>
      <returns>The <see cref="T:WPILib.Interfaces.ISendable" /> mapped to the key.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if there is no value mapped to the key.</exception>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetNumber(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetNumber(System.String,System.Double)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetNumberArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetNumberArray(System.String,System.Double[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetString(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetString(System.String,System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetStringArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Native.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.GetStringArray(System.String,System.String[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.PutBoolean(System.String,System.Boolean)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.PutBooleanArray(System.String,System.Boolean[])">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.PutData(System.String,WPILib.Interfaces.ISendable)">
      <summary>
            Maps the specified key to the specified value in this table.
            </summary>
      <param name="key">The key to map the <see cref="T:WPILib.Interfaces.ISendable" /> to.</param>
      <param name="data">The <see cref="T:WPILib.Interfaces.ISendable" /> to map.</param>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.PutData(WPILib.Interfaces.INamedSendable)">
      <summary>
            Maps the specified key to the specified value in this table.
            </summary>
      <param name="value">The <see cref="T:WPILib.Interfaces.INamedSendable" /> to map.</param>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.PutNumber(System.String,System.Double)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.PutNumberArray(System.String,System.Double[])">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.PutString(System.String,System.String)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:WPILib.SmartDashboard.SmartDashboard.PutStringArray(System.String,System.String[])">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
  </members>
</doc>